{
    "sourceFile": "app/homepassenger/phome.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 335,
            "patches": [
                {
                    "date": 1745770351244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745805411053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +1,192 @@\n-import React from \"react\";\r\n-import { View, Text, TouchableOpacity, StyleSheet, StatusBar, Dimensions } from \"react-native\";\r\n+// 📍 Passenger HomePage - phome.tsx\r\n+\r\n+import React, { useState, useEffect } from \"react\";\r\n+import { View, Text, StyleSheet, Dimensions, TouchableOpacity, TextInput } from \"react-native\";\r\n+import MapView, { Marker } from \"react-native-maps\";\r\n+import * as Location from \"expo-location\";\r\n import { useRouter } from \"expo-router\";\r\n+import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n+import { LocationProvider } from \"../location/GlobalLocation\";\r\n \r\n-const { width } = Dimensions.get(\"window\");\r\n \r\n-export default function PassengerHome() {\r\n+const { width, height } = Dimensions.get(\"window\");\r\n+\r\n+export default function PHome() {\r\n+  const [location, setLocation] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n   const router = useRouter();\r\n \r\n+  useEffect(() => {\r\n+    (async () => {\r\n+      let { status } = await Location.requestForegroundPermissionsAsync();\r\n+      if (status !== \"granted\") {\r\n+        alert(\"Permission to access location was denied\");\r\n+        return;\r\n+      }\r\n+\r\n+      let loc = await Location.getCurrentPositionAsync({});\r\n+      setLocation(loc.coords);\r\n+      setLoading(false);\r\n+    })();\r\n+  }, []);\r\n+\r\n+  if (loading || !location) {\r\n+    return (\r\n+      <View style={styles.loadingContainer}>\r\n+        <Text style={{ fontSize: 20 }}>Loading Map...</Text>\r\n+      </View>\r\n+    );\r\n+  }\r\n+\r\n   return (\r\n     <View style={styles.container}>\r\n-      <StatusBar barStyle=\"dark-content\" translucent backgroundColor=\"transparent\" />\r\n-      \r\n-      <View style={styles.inner}>\r\n-        <Text style={styles.title}>Welcome, Passenger!</Text>\r\n-        <Text style={styles.subtitle}>You are now logged in.</Text>\r\n+      {/* Map */}\r\n+      <MapView\r\n+        style={StyleSheet.absoluteFillObject}\r\n+        initialRegion={{\r\n+          latitude: location.latitude,\r\n+          longitude: location.longitude,\r\n+          latitudeDelta: 0.01,\r\n+          longitudeDelta: 0.01,\r\n+        }}\r\n+      >\r\n+        <Marker\r\n+          coordinate={{ latitude: location.latitude, longitude: location.longitude }}\r\n+          title=\"You are here\"\r\n+        />\r\n+      </MapView>\r\n \r\n-        <TouchableOpacity\r\n-          style={styles.button}\r\n-        //   onPress={() => router.push(\"/somewhere\")} // Replace with your real pages later\r\n-        >\r\n-          <Text style={styles.buttonText}>Go to Available Rides</Text>\r\n+      {/* Floating Card */}\r\n+      <View style={styles.card}>\r\n+        <View style={styles.cardHeader} />\r\n+\r\n+        <TouchableOpacity style={styles.inputBox}>\r\n+          <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n+          <Text style={styles.inputText}>Saan ka papunta ngayon?</Text>\r\n+          <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n \r\n-        <TouchableOpacity\r\n-          style={[styles.button, { backgroundColor: \"#DD1F1F\" }]}\r\n-          onPress={() => router.push(\"/login_and_reg/plogin\")} // Simulate logout (go back to login)\r\n-        >\r\n-          <Text style={styles.buttonText}>Log Out</Text>\r\n+        <TouchableOpacity style={styles.inputBox}>\r\n+          <MaterialIcons name=\"swap-vert\" size={20} color=\"#616161\" />\r\n+          <Text style={styles.inputText}>Saan ka ihahatid?</Text>\r\n+          <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n+\r\n+        <TouchableOpacity style={styles.inputBoxSimple}>\r\n+          <MaterialIcons name=\"edit\" size={20} color=\"#616161\" />\r\n+          <Text style={styles.inputText}>Notes sa driver</Text>\r\n+        </TouchableOpacity>\r\n+\r\n+        <TouchableOpacity style={styles.inputBox}>\r\n+          <MaterialIcons name=\"payments\" size={20} color=\"#616161\" />\r\n+          <Text style={styles.inputText}>Paano ka magbabayad</Text>\r\n+          <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+        </TouchableOpacity>\r\n+\r\n+        <View style={styles.totalFareContainer}>\r\n+          <View style={styles.fareBox}>\r\n+            <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n+          </View>\r\n+          <TouchableOpacity style={styles.bookNowButton}>\r\n+            <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n+          </TouchableOpacity>\r\n+        </View>\r\n       </View>\r\n+\r\n+      {/* Bottom Nav */}\r\n+      <View style={styles.bottomNav}>\r\n+        <TouchableOpacity>\r\n+          <Ionicons name=\"home\" size={30} color=\"black\" />\r\n+          <Text>Home</Text>\r\n+        </TouchableOpacity>\r\n+        <TouchableOpacity>\r\n+          <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n+          <Text>History</Text>\r\n+        </TouchableOpacity>\r\n+        <TouchableOpacity>\r\n+          <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n+          <Text>Chats</Text>\r\n+        </TouchableOpacity>\r\n+        <TouchableOpacity>\r\n+          <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n+          <Text>Profile</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n     </View>\r\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n-  container: { flex: 1, backgroundColor: \"#fff\", alignItems: \"center\", justifyContent: \"center\" },\r\n-  inner: { width: width * 0.85, alignItems: \"center\" },\r\n-  title: { fontSize: 26, fontWeight: \"bold\", color: \"#414141\", marginBottom: 10 },\r\n-  subtitle: { fontSize: 16, color: \"#666\", marginBottom: 30 },\r\n-  button: {\r\n-    width: \"100%\",\r\n-    backgroundColor: \"#5089A3\",\r\n+  container: { flex: 1 },\r\n+  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\" },\r\n+  card: {\r\n+    position: \"absolute\",\r\n+    bottom: 80,\r\n+    backgroundColor: \"#87CEEB\",\r\n+    width: width * 0.9,\r\n+    alignSelf: \"center\",\r\n+    borderRadius: 10,\r\n+    padding: 15,\r\n+  },\r\n+  cardHeader: {\r\n+    width: 50,\r\n+    height: 4,\r\n+    backgroundColor: \"black\",\r\n+    alignSelf: \"center\",\r\n+    borderRadius: 5,\r\n+    marginBottom: 10,\r\n+  },\r\n+  inputBox: {\r\n+    backgroundColor: \"white\",\r\n     borderRadius: 8,\r\n-    paddingVertical: 14,\r\n+    flexDirection: \"row\",\r\n     alignItems: \"center\",\r\n-    marginBottom: 15,\r\n+    justifyContent: \"space-between\",\r\n+    paddingHorizontal: 10,\r\n+    height: 45,\r\n+    marginBottom: 10,\r\n   },\r\n-  buttonText: { color: \"#fff\", fontSize: 16, fontWeight: \"bold\" },\r\n+  inputBoxSimple: {\r\n+    backgroundColor: \"white\",\r\n+    borderRadius: 8,\r\n+    flexDirection: \"row\",\r\n+    alignItems: \"center\",\r\n+    paddingHorizontal: 10,\r\n+    height: 45,\r\n+    marginBottom: 10,\r\n+  },\r\n+  inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n+  totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n+  fareBox: {\r\n+    flex: 1,\r\n+    backgroundColor: \"white\",\r\n+    borderRadius: 8,\r\n+    alignItems: \"center\",\r\n+    justifyContent: \"center\",\r\n+    padding: 10,\r\n+    marginRight: 5,\r\n+  },\r\n+  totalFareText: { fontSize: 16, fontWeight: \"bold\" },\r\n+  bookNowButton: {\r\n+    flex: 1,\r\n+    backgroundColor: \"white\",\r\n+    borderRadius: 8,\r\n+    alignItems: \"center\",\r\n+    justifyContent: \"center\",\r\n+    padding: 10,\r\n+    marginLeft: 5,\r\n+  },\r\n+  bookNowText: { fontSize: 16, fontWeight: \"bold\" },\r\n+  bottomNav: {\r\n+    position: \"absolute\",\r\n+    bottom: 0,\r\n+    flexDirection: \"row\",\r\n+    justifyContent: \"space-around\",\r\n+    width: width,\r\n+    height: 70,\r\n+    backgroundColor: \"white\",\r\n+    borderTopLeftRadius: 30,\r\n+    borderTopRightRadius: 30,\r\n+    alignItems: \"center\",\r\n+  },\r\n });\r\n"
                },
                {
                    "date": 1745805917917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,32 +5,17 @@\n import MapView, { Marker } from \"react-native-maps\";\r\n import * as Location from \"expo-location\";\r\n import { useRouter } from \"expo-router\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n-import { LocationProvider } from \"../location/GlobalLocation\";\r\n+import { useLocation } from \"../location/GlobalLocation\";\r\n \r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n-  const [location, setLocation] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n+  const { location, loading } = useLocation();\r\n   const router = useRouter();\r\n \r\n-  useEffect(() => {\r\n-    (async () => {\r\n-      let { status } = await Location.requestForegroundPermissionsAsync();\r\n-      if (status !== \"granted\") {\r\n-        alert(\"Permission to access location was denied\");\r\n-        return;\r\n-      }\r\n-\r\n-      let loc = await Location.getCurrentPositionAsync({});\r\n-      setLocation(loc.coords);\r\n-      setLoading(false);\r\n-    })();\r\n-  }, []);\r\n-\r\n   if (loading || !location) {\r\n     return (\r\n       <View style={styles.loadingContainer}>\r\n         <Text style={{ fontSize: 20 }}>Loading Map...</Text>\r\n"
                },
                {
                    "date": 1745806149996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,18 +12,9 @@\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n-  const router = useRouter();\r\n \r\n-  if (loading || !location) {\r\n-    return (\r\n-      <View style={styles.loadingContainer}>\r\n-        <Text style={{ fontSize: 20 }}>Loading Map...</Text>\r\n-      </View>\r\n-    );\r\n-  }\r\n-\r\n   return (\r\n     <View style={styles.container}>\r\n       {/* Map */}\r\n       <MapView\r\n"
                },
                {
                    "date": 1745806164429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,18 @@\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n+  const router = useRouter();\r\n \r\n+  if (loading || !location) {\r\n+    return (\r\n+      <View style={styles.loadingContainer}>\r\n+        <Text style={{ fontSize: 20 }}>Loading Map...</Text>\r\n+      </View>\r\n+    );\r\n+  }\r\n+\r\n   return (\r\n     <View style={styles.container}>\r\n       {/* Map */}\r\n       <MapView\r\n"
                },
                {
                    "date": 1745807647183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n   const router = useRouter();\r\n+  console.log(location)\r\n \r\n   if (loading || !location) {\r\n     return (\r\n       <View style={styles.loadingContainer}>\r\n"
                },
                {
                    "date": 1745807794493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n   loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\" },\r\n   card: {\r\n     position: \"absolute\",\r\n     bottom: 80,\r\n-    backgroundColor: \"#87CEEB\",\r\n+    backgroundColor: \"#81C3E1\",\r\n     width: width * 0.9,\r\n     alignSelf: \"center\",\r\n     borderRadius: 10,\r\n     padding: 15,\r\n"
                },
                {
                    "date": 1745807812485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n     alignItems: \"center\",\r\n     justifyContent: \"space-between\",\r\n     paddingHorizontal: 10,\r\n     height: 45,\r\n-    marginBottom: 10,\r\n+    marginBottom: 5,\r\n   },\r\n   inputBoxSimple: {\r\n     backgroundColor: \"white\",\r\n     borderRadius: 8,\r\n"
                },
                {
                    "date": 1745807853382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n     flexDirection: \"row\",\r\n     alignItems: \"center\",\r\n     paddingHorizontal: 10,\r\n     height: 45,\r\n-    marginBottom: 10,\r\n+    marginBottom: 5,\r\n   },\r\n   inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n   totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n   fareBox: {\r\n"
                },
                {
                    "date": 1745807859777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n     backgroundColor: \"white\",\r\n     borderRadius: 8,\r\n     flexDirection: \"row\",\r\n     alignItems: \"center\",\r\n-    paddingHorizontal: 10,\r\n+    paddingHorizontal: ,\r\n     height: 45,\r\n     marginBottom: 5,\r\n   },\r\n   inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n"
                },
                {
                    "date": 1745807873535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,10 +136,10 @@\n     backgroundColor: \"white\",\r\n     borderRadius: 8,\r\n     flexDirection: \"row\",\r\n     alignItems: \"center\",\r\n-    paddingHorizontal: ,\r\n-    height: 45,\r\n+    paddingHorizontal: 10,\r\n+    height: 40,\r\n     marginBottom: 5,\r\n   },\r\n   inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n   totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n"
                },
                {
                    "date": 1745807891337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n     flexDirection: \"row\",\r\n     alignItems: \"center\",\r\n     justifyContent: \"space-between\",\r\n     paddingHorizontal: 10,\r\n-    height: 45,\r\n+    height: 40,\r\n     marginBottom: 5,\r\n   },\r\n   inputBoxSimple: {\r\n     backgroundColor: \"white\",\r\n"
                },
                {
                    "date": 1745807921066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,8 @@\n   totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n   fareBox: {\r\n     flex: 1,\r\n     backgroundColor: \"white\",\r\n-    borderRadius: 8,\r\n     alignItems: \"center\",\r\n     justifyContent: \"center\",\r\n     padding: 10,\r\n     marginRight: 5,\r\n"
                },
                {
                    "date": 1745807952997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n     flex: 1,\r\n     backgroundColor: \"white\",\r\n     alignItems: \"center\",\r\n     justifyContent: \"center\",\r\n-    padding: 10,\r\n+    paddingHorizontal: 10,\r\n     marginRight: 5,\r\n   },\r\n   totalFareText: { fontSize: 16, fontWeight: \"bold\" },\r\n   bookNowButton: {\r\n"
                },
                {
                    "date": 1745807969707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,8 +144,9 @@\n   inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n   totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n   fareBox: {\r\n     flex: 1,\r\n+    borderRadius: 3\r\n     backgroundColor: \"white\",\r\n     alignItems: \"center\",\r\n     justifyContent: \"center\",\r\n     paddingHorizontal: 10,\r\n"
                },
                {
                    "date": 1745807985134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,13 +144,12 @@\n   inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n   totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n   fareBox: {\r\n     flex: 1,\r\n-    borderRadius: 3\r\n+    borderRadius: 3,\r\n     backgroundColor: \"white\",\r\n     alignItems: \"center\",\r\n     justifyContent: \"center\",\r\n-    paddingHorizontal: 10,\r\n     marginRight: 5,\r\n   },\r\n   totalFareText: { fontSize: 16, fontWeight: \"bold\" },\r\n   bookNowButton: {\r\n"
                },
                {
                    "date": 1745807997411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,11 +148,12 @@\n     borderRadius: 3,\r\n     backgroundColor: \"white\",\r\n     alignItems: \"center\",\r\n     justifyContent: \"center\",\r\n+    paddingHorizontal: 10,\r\n     marginRight: 5,\r\n   },\r\n-  totalFareText: { fontSize: 16, fontWeight: \"bold\" },\r\n+  totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n   bookNowButton: {\r\n     flex: 1,\r\n     backgroundColor: \"white\",\r\n     borderRadius: 8,\r\n"
                },
                {
                    "date": 1745808007099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,8 @@\n   fareBox: {\r\n     flex: 1,\r\n     borderRadius: 3,\r\n     backgroundColor: \"white\",\r\n-    alignItems: \"center\",\r\n     justifyContent: \"center\",\r\n     paddingHorizontal: 10,\r\n     marginRight: 5,\r\n   },\r\n"
                },
                {
                    "date": 1745808014449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,8 @@\n     flex: 1,\r\n     borderRadius: 3,\r\n     backgroundColor: \"white\",\r\n     justifyContent: \"center\",\r\n-    paddingHorizontal: 10,\r\n     marginRight: 5,\r\n   },\r\n   totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n   bookNowButton: {\r\n"
                },
                {
                    "date": 1745808021945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,8 +147,9 @@\n     flex: 1,\r\n     borderRadius: 3,\r\n     backgroundColor: \"white\",\r\n     justifyContent: \"center\",\r\n+    paddingHorizontal: 10,\r\n     marginRight: 5,\r\n   },\r\n   totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n   bookNowButton: {\r\n"
                },
                {
                    "date": 1745808041529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,10 +147,11 @@\n     flex: 1,\r\n     borderRadius: 3,\r\n     backgroundColor: \"white\",\r\n     justifyContent: \"center\",\r\n-    paddingHorizontal: 10,\r\n+    paddingHorizontal: 5,\r\n     marginRight: 5,\r\n+    width: '50%',\r\n   },\r\n   totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n   bookNowButton: {\r\n     flex: 1,\r\n"
                },
                {
                    "date": 1745808102377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n     backgroundColor: \"#81C3E1\",\r\n     width: width * 0.9,\r\n     alignSelf: \"center\",\r\n     borderRadius: 10,\r\n-    padding: 15,\r\n+    padding: 10,\r\n   },\r\n   cardHeader: {\r\n     width: 50,\r\n     height: 4,\r\n"
                },
                {
                    "date": 1745808124662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n   card: {\r\n     position: \"absolute\",\r\n     bottom: 80,\r\n     backgroundColor: \"#81C3E1\",\r\n-    width: width * 0.9,\r\n+    width: width * 0.95,\r\n     alignSelf: \"center\",\r\n     borderRadius: 10,\r\n     padding: 10,\r\n   },\r\n"
                },
                {
                    "date": 1745808141471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n   container: { flex: 1 },\r\n   loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\" },\r\n   card: {\r\n     position: \"absolute\",\r\n-    bottom: 80,\r\n+    bottom: 60,\r\n     backgroundColor: \"#81C3E1\",\r\n     width: width * 0.95,\r\n     alignSelf: \"center\",\r\n     borderRadius: 10,\r\n"
                },
                {
                    "date": 1745808148877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n   container: { flex: 1 },\r\n   loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\" },\r\n   card: {\r\n     position: \"absolute\",\r\n-    bottom: 60,\r\n+    bottom: 75,\r\n     backgroundColor: \"#81C3E1\",\r\n     width: width * 0.95,\r\n     alignSelf: \"center\",\r\n     borderRadius: 10,\r\n"
                },
                {
                    "date": 1745808167773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n     borderRadius: 10,\r\n     padding: 10,\r\n   },\r\n   cardHeader: {\r\n-    width: 50,\r\n+    width: 100,\r\n     height: 4,\r\n     backgroundColor: \"black\",\r\n     alignSelf: \"center\",\r\n     borderRadius: 5,\r\n"
                },
                {
                    "date": 1745808203577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n     borderRadius: 10,\r\n     padding: 10,\r\n   },\r\n   cardHeader: {\r\n-    width: 100,\r\n+    width: 150,\r\n     height: 4,\r\n     backgroundColor: \"black\",\r\n     alignSelf: \"center\",\r\n     borderRadius: 5,\r\n@@ -160,8 +160,9 @@\n     alignItems: \"center\",\r\n     justifyContent: \"center\",\r\n     padding: 10,\r\n     marginLeft: 5,\r\n+    width: '50%',\r\n   },\r\n   bookNowText: { fontSize: 16, fontWeight: \"bold\" },\r\n   bottomNav: {\r\n     position: \"absolute\",\r\n"
                },
                {
                    "date": 1745808219059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,9 @@\n     backgroundColor: \"white\",\r\n     borderRadius: 8,\r\n     alignItems: \"center\",\r\n     justifyContent: \"center\",\r\n-    padding: 10,\r\n+    paddingHorizontal: 5,\r\n     marginLeft: 5,\r\n     width: '50%',\r\n   },\r\n   bookNowText: { fontSize: 16, fontWeight: \"bold\" },\r\n"
                },
                {
                    "date": 1745808226060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,9 @@\n     backgroundColor: \"white\",\r\n     borderRadius: 8,\r\n     alignItems: \"center\",\r\n     justifyContent: \"center\",\r\n-    paddingHorizontal: 5,\r\n+    padding: 5,\r\n     marginLeft: 5,\r\n     width: '50%',\r\n   },\r\n   bookNowText: { fontSize: 16, fontWeight: \"bold\" },\r\n"
                },
                {
                    "date": 1745808242702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,9 @@\n     padding: 5,\r\n     marginLeft: 5,\r\n     width: '50%',\r\n   },\r\n-  bookNowText: { fontSize: 16, fontWeight: \"bold\" },\r\n+  bookNowText: { fontSize: 14 },\r\n   bottomNav: {\r\n     position: \"absolute\",\r\n     bottom: 0,\r\n     flexDirection: \"row\",\r\n"
                },
                {
                    "date": 1745808259452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,11 +160,11 @@\n     alignItems: \"center\",\r\n     justifyContent: \"center\",\r\n     padding: 5,\r\n     marginLeft: 5,\r\n-    width: '50%',\r\n+    width: '30%',\r\n   },\r\n-  bookNowText: { fontSize: 14 },\r\n+  bookNowText: { fontSize: 16 },\r\n   bottomNav: {\r\n     position: \"absolute\",\r\n     bottom: 0,\r\n     flexDirection: \"row\",\r\n"
                },
                {
                    "date": 1745808264633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n     backgroundColor: \"white\",\r\n     justifyContent: \"center\",\r\n     paddingHorizontal: 5,\r\n     marginRight: 5,\r\n-    width: '50%',\r\n+    width: '70%',\r\n   },\r\n   totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n   bookNowButton: {\r\n     flex: 1,\r\n"
                },
                {
                    "date": 1745808275663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n     backgroundColor: \"white\",\r\n     justifyContent: \"center\",\r\n     paddingHorizontal: 5,\r\n     marginRight: 5,\r\n-    width: '70%',\r\n+    width: '50%',\r\n   },\r\n   totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n   bookNowButton: {\r\n     flex: 1,\r\n@@ -160,9 +160,9 @@\n     alignItems: \"center\",\r\n     justifyContent: \"center\",\r\n     padding: 5,\r\n     marginLeft: 5,\r\n-    width: '30%',\r\n+    width: '50%',\r\n   },\r\n   bookNowText: { fontSize: 16 },\r\n   bottomNav: {\r\n     position: \"absolute\",\r\n"
                },
                {
                    "date": 1745808359007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,6 +174,8 @@\n     backgroundColor: \"white\",\r\n     borderTopLeftRadius: 30,\r\n     borderTopRightRadius: 30,\r\n     alignItems: \"center\",\r\n+    borderWidth: 1,\r\n+  borderColor: \"#ccc\",\r\n   },\r\n });\r\n"
                },
                {
                    "date": 1745808364807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,7 +175,7 @@\n     borderTopLeftRadius: 30,\r\n     borderTopRightRadius: 30,\r\n     alignItems: \"center\",\r\n     borderWidth: 1,\r\n-  borderColor: \"#ccc\",\r\n+  borderColor: \"black\",\r\n   },\r\n });\r\n"
                },
                {
                    "date": 1745808405073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n // 📍 Passenger HomePage - phome.tsx\r\n \r\n import React, { useState, useEffect } from \"react\";\r\n-import { View, Text, StyleSheet, Dimensions, TouchableOpacity, TextInput } from \"react-native\";\r\n+import { View, Text, StyleSheet, Dimensions, TouchableOpacity, TextInput, StatusBar } from \"react-native\";\r\n import MapView, { Marker } from \"react-native-maps\";\r\n import * as Location from \"expo-location\";\r\n import { useRouter } from \"expo-router\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n@@ -25,8 +25,11 @@\n   }\r\n \r\n   return (\r\n     <View style={styles.container}>\r\n+      <View style={{paddingTop: 30}}>\r\n+        <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n+      </View>\r\n       {/* Map */}\r\n       <MapView\r\n         style={StyleSheet.absoluteFillObject}\r\n         initialRegion={{\r\n"
                },
                {
                    "date": 1745808843490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,8 @@\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n   const router = useRouter();\r\n-  console.log(location)\r\n \r\n   if (loading || !location) {\r\n     return (\r\n       <View style={styles.loadingContainer}>\r\n"
                },
                {
                    "date": 1745813855733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,26 @@\n-// 📍 Passenger HomePage - phome.tsx\r\n+// 📍 Updated Passenger HomePage - phome.tsx\r\n \r\n-import React, { useState, useEffect } from \"react\";\r\n-import { View, Text, StyleSheet, Dimensions, TouchableOpacity, TextInput, StatusBar } from \"react-native\";\r\n+import React, { useState } from \"react\";\r\n+import { View, Text, StyleSheet, Dimensions, TouchableOpacity, StatusBar } from \"react-native\";\r\n import MapView, { Marker } from \"react-native-maps\";\r\n import * as Location from \"expo-location\";\r\n import { useRouter } from \"expo-router\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n \r\n-\r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n   const router = useRouter();\r\n \r\n+  const [destination, setDestination] = useState<{\r\n+    name: string;\r\n+    latitude: number;\r\n+    longitude: number;\r\n+  } | null>(null);\r\n+\r\n   if (loading || !location) {\r\n     return (\r\n       <View style={styles.loadingContainer}>\r\n         <Text style={{ fontSize: 20 }}>Loading Map...</Text>\r\n@@ -24,11 +29,12 @@\n   }\r\n \r\n   return (\r\n     <View style={styles.container}>\r\n-      <View style={{paddingTop: 30}}>\r\n+      <View style={{ paddingTop: 30 }}>\r\n         <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       </View>\r\n+\r\n       {/* Map */}\r\n       <MapView\r\n         style={StyleSheet.absoluteFillObject}\r\n         initialRegion={{\r\n@@ -36,42 +42,65 @@\n           longitude: location.longitude,\r\n           latitudeDelta: 0.01,\r\n           longitudeDelta: 0.01,\r\n         }}\r\n+        showsUserLocation\r\n+        onPoiClick={(e) => {\r\n+          const { coordinate, name } = e.nativeEvent;\r\n+          setDestination({\r\n+            name: name,\r\n+            latitude: coordinate.latitude,\r\n+            longitude: coordinate.longitude,\r\n+          });\r\n+        }}\r\n       >\r\n         <Marker\r\n           coordinate={{ latitude: location.latitude, longitude: location.longitude }}\r\n           title=\"You are here\"\r\n         />\r\n+        {destination && (\r\n+          <Marker\r\n+            coordinate={{ latitude: destination.latitude, longitude: destination.longitude }}\r\n+            title={destination.name}\r\n+            pinColor=\"blue\"\r\n+          />\r\n+        )}\r\n       </MapView>\r\n \r\n       {/* Floating Card */}\r\n       <View style={styles.card}>\r\n         <View style={styles.cardHeader} />\r\n \r\n+        {/* Pickup Location */}\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-          <Text style={styles.inputText}>Saan ka papunta ngayon?</Text>\r\n+          <Text style={styles.inputText}>\r\n+            {destination?.name || \"Saan ka papunta ngayon?\"}\r\n+          </Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n \r\n+        {/* Destination (For now static, editable later if needed) */}\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <MaterialIcons name=\"swap-vert\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>Saan ka ihahatid?</Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n \r\n+        {/* Notes to Driver */}\r\n         <TouchableOpacity style={styles.inputBoxSimple}>\r\n           <MaterialIcons name=\"edit\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>Notes sa driver</Text>\r\n         </TouchableOpacity>\r\n \r\n+        {/* Payment Method */}\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <MaterialIcons name=\"payments\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>Paano ka magbabayad</Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n \r\n+        {/* Fare and Book Now */}\r\n         <View style={styles.totalFareContainer}>\r\n           <View style={styles.fareBox}>\r\n             <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n           </View>\r\n@@ -177,7 +206,7 @@\n     borderTopLeftRadius: 30,\r\n     borderTopRightRadius: 30,\r\n     alignItems: \"center\",\r\n     borderWidth: 1,\r\n-  borderColor: \"black\",\r\n+    borderColor: \"black\",\r\n   },\r\n });\r\n"
                },
                {
                    "date": 1745814074215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,18 @@\n             latitude: coordinate.latitude,\r\n             longitude: coordinate.longitude,\r\n           });\r\n         }}\r\n+        onPress={(e) => {\r\n+          const { coordinate } = e.nativeEvent;\r\n+          setDestination({\r\n+            name: \"\", // No name\r\n+            latitude: coordinate.latitude,\r\n+            longitude: coordinate.longitude,\r\n+          });\r\n+        }}\r\n       >\r\n+\r\n         <Marker\r\n           coordinate={{ latitude: location.latitude, longitude: location.longitude }}\r\n           title=\"You are here\"\r\n         />\r\n"
                },
                {
                    "date": 1745814103095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,9 @@\n             title={destination.name}\r\n             pinColor=\"blue\"\r\n           />\r\n         )}\r\n+        \r\n       </MapView>\r\n \r\n       {/* Floating Card */}\r\n       <View style={styles.card}>\r\n"
                },
                {
                    "date": 1746348168738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \r\n   if (loading || !location) {\r\n     return (\r\n       <View style={styles.loadingContainer}>\r\n-        <Text style={{ fontSize: 20 }}>Loading Map...</Text>\r\n+        <Text style={{ fontSize: 20 }}>Loading...</Text>\r\n       </View>\r\n     );\r\n   }\r\n \r\n"
                },
                {
                    "date": 1746355849232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,44 @@\n-// 📍 Updated Passenger HomePage - phome.tsx\r\n-\r\n-import React, { useState } from \"react\";\r\n-import { View, Text, StyleSheet, Dimensions, TouchableOpacity, StatusBar } from \"react-native\";\r\n-import MapView, { Marker } from \"react-native-maps\";\r\n+import React, { useState, useEffect } from \"react\";\r\n+import { View, Text, StyleSheet, Dimensions, TouchableOpacity, StatusBar, Alert } from \"react-native\";\r\n+import MapView, { Marker, Polyline } from \"react-native-maps\";\r\n import * as Location from \"expo-location\";\r\n import { useRouter } from \"expo-router\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n+import API_OSRM_URL from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n   const router = useRouter();\r\n \r\n-  const [destination, setDestination] = useState<{\r\n-    name: string;\r\n-    latitude: number;\r\n-    longitude: number;\r\n-  } | null>(null);\r\n+  const [destination, setDestination] = useState(null);\r\n+  const [routeCoords, setRouteCoords] = useState([]);\r\n \r\n+  useEffect(() => {\r\n+    const fetchRoute = async () => {\r\n+      if (!location || !destination) return;\r\n+\r\n+      const start = `${location.longitude},${location.latitude}`;\r\n+      const end = `${destination.longitude},${destination.latitude}`;\r\n+      const url = `${API_OSRM_URL}/route/v1/driving/${start};${end}?geometries=geojson`;\r\n+\r\n+      try {\r\n+        const res = await fetch(url);\r\n+        const data = await res.json();\r\n+        const coords = data.routes[0].geometry.coordinates.map(([lng, lat]) => ({ latitude: lat, longitude: lng }));\r\n+        setRouteCoords(coords);\r\n+      } catch (err) {\r\n+        console.error(\"Routing error:\", err);\r\n+        Alert.alert(\"Error\", \"Failed to get route from OSRM.\");\r\n+      }\r\n+    };\r\n+\r\n+    fetchRoute();\r\n+  }, [location, destination]);\r\n+\r\n   if (loading || !location) {\r\n     return (\r\n       <View style={styles.loadingContainer}>\r\n         <Text style={{ fontSize: 20 }}>Loading...</Text>\r\n@@ -33,9 +51,8 @@\n       <View style={{ paddingTop: 30 }}>\r\n         <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       </View>\r\n \r\n-      {/* Map */}\r\n       <MapView\r\n         style={StyleSheet.absoluteFillObject}\r\n         initialRegion={{\r\n           latitude: location.latitude,\r\n@@ -43,26 +60,13 @@\n           latitudeDelta: 0.01,\r\n           longitudeDelta: 0.01,\r\n         }}\r\n         showsUserLocation\r\n-        onPoiClick={(e) => {\r\n-          const { coordinate, name } = e.nativeEvent;\r\n-          setDestination({\r\n-            name: name,\r\n-            latitude: coordinate.latitude,\r\n-            longitude: coordinate.longitude,\r\n-          });\r\n-        }}\r\n         onPress={(e) => {\r\n           const { coordinate } = e.nativeEvent;\r\n-          setDestination({\r\n-            name: \"\", // No name\r\n-            latitude: coordinate.latitude,\r\n-            longitude: coordinate.longitude,\r\n-          });\r\n+          setDestination({ name: \"\", latitude: coordinate.latitude, longitude: coordinate.longitude });\r\n         }}\r\n       >\r\n-\r\n         <Marker\r\n           coordinate={{ latitude: location.latitude, longitude: location.longitude }}\r\n           title=\"You are here\"\r\n         />\r\n@@ -72,45 +76,36 @@\n             title={destination.name}\r\n             pinColor=\"blue\"\r\n           />\r\n         )}\r\n-        \r\n+        {routeCoords.length > 0 && (\r\n+          <Polyline coordinates={routeCoords} strokeWidth={5} strokeColor=\"#FF5733\" />\r\n+        )}\r\n       </MapView>\r\n \r\n-      {/* Floating Card */}\r\n       <View style={styles.card}>\r\n         <View style={styles.cardHeader} />\r\n-\r\n-        {/* Pickup Location */}\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>\r\n             {destination?.name || \"Saan ka papunta ngayon?\"}\r\n           </Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n-\r\n-        {/* Destination (For now static, editable later if needed) */}\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <MaterialIcons name=\"swap-vert\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>Saan ka ihahatid?</Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n-\r\n-        {/* Notes to Driver */}\r\n         <TouchableOpacity style={styles.inputBoxSimple}>\r\n           <MaterialIcons name=\"edit\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>Notes sa driver</Text>\r\n         </TouchableOpacity>\r\n-\r\n-        {/* Payment Method */}\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <MaterialIcons name=\"payments\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>Paano ka magbabayad</Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n-\r\n-        {/* Fare and Book Now */}\r\n         <View style={styles.totalFareContainer}>\r\n           <View style={styles.fareBox}>\r\n             <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n           </View>\r\n@@ -119,9 +114,8 @@\n           </TouchableOpacity>\r\n         </View>\r\n       </View>\r\n \r\n-      {/* Bottom Nav */}\r\n       <View style={styles.bottomNav}>\r\n         <TouchableOpacity>\r\n           <Ionicons name=\"home\" size={30} color=\"black\" />\r\n           <Text>Home</Text>\r\n"
                },
                {
                    "date": 1746356249385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,111 +1,138 @@\n-import React, { useState, useEffect } from \"react\";\r\n-import { View, Text, StyleSheet, Dimensions, TouchableOpacity, StatusBar, Alert } from \"react-native\";\r\n-import MapView, { Marker, Polyline } from \"react-native-maps\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { View, Text, StyleSheet, Dimensions, TouchableOpacity, StatusBar } from \"react-native\";\r\n+import { WebView } from \"react-native-webview\";\r\n+import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import * as Location from \"expo-location\";\r\n-import { useRouter } from \"expo-router\";\r\n-import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n-import { useLocation } from \"../location/GlobalLocation\";\r\n import API_OSRM_URL from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n-  const { location, loading } = useLocation();\r\n-  const router = useRouter();\r\n-\r\n+  const [location, setLocation] = useState(null);\r\n   const [destination, setDestination] = useState(null);\r\n-  const [routeCoords, setRouteCoords] = useState([]);\r\n+  const [html, setHtml] = useState(\"\");\r\n \r\n+  // Get current location\r\n   useEffect(() => {\r\n-    const fetchRoute = async () => {\r\n-      if (!location || !destination) return;\r\n+    (async () => {\r\n+      const { status } = await Location.requestForegroundPermissionsAsync();\r\n+      if (status !== \"granted\") return;\r\n+      const loc = await Location.getCurrentPositionAsync({});\r\n+      setLocation({\r\n+        latitude: loc.coords.latitude,\r\n+        longitude: loc.coords.longitude\r\n+      });\r\n+    })();\r\n+  }, []);\r\n \r\n-      const start = `${location.longitude},${location.latitude}`;\r\n-      const end = `${destination.longitude},${destination.latitude}`;\r\n-      const url = `${API_OSRM_URL}/route/v1/driving/${start};${end}?geometries=geojson`;\r\n+  // Build map HTML with OpenStreetMap + OSRM\r\n+  useEffect(() => {\r\n+    if (!location) return;\r\n \r\n-      try {\r\n-        const res = await fetch(url);\r\n-        const data = await res.json();\r\n-        const coords = data.routes[0].geometry.coordinates.map(([lng, lat]) => ({ latitude: lat, longitude: lng }));\r\n-        setRouteCoords(coords);\r\n-      } catch (err) {\r\n-        console.error(\"Routing error:\", err);\r\n-        Alert.alert(\"Error\", \"Failed to get route from OSRM.\");\r\n-      }\r\n-    };\r\n+    const template = `\r\n+      <!DOCTYPE html>\r\n+      <html>\r\n+      <head>\r\n+        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n+        <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n+        <style> html, body, #map { height: 100%; margin: 0; padding: 0; } </style>\r\n+      </head>\r\n+      <body>\r\n+        <div id=\"map\"></div>\r\n+        <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n+        <script>\r\n+          const map = L.map('map').setView([${location.latitude}, ${location.longitude}], 14);\r\n+          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n+            maxZoom: 19,\r\n+            attribution: '© OpenStreetMap contributors'\r\n+          }).addTo(map);\r\n \r\n-    fetchRoute();\r\n-  }, [location, destination]);\r\n+          const start = L.marker([${location.latitude}, ${location.longitude}])\r\n+            .addTo(map)\r\n+            .bindPopup('You are here')\r\n+            .openPopup();\r\n \r\n-  if (loading || !location) {\r\n-    return (\r\n-      <View style={styles.loadingContainer}>\r\n-        <Text style={{ fontSize: 20 }}>Loading...</Text>\r\n-      </View>\r\n-    );\r\n-  }\r\n+          let destMarker = null;\r\n+          let routeLine = null;\r\n \r\n+          map.on('click', async function(e) {\r\n+            const lat = e.latlng.lat;\r\n+            const lng = e.latlng.lng;\r\n+\r\n+            if (destMarker) map.removeLayer(destMarker);\r\n+            if (routeLine) map.removeLayer(routeLine);\r\n+\r\n+            destMarker = L.marker([lat, lng]).addTo(map).bindPopup('Destination').openPopup();\r\n+\r\n+            const res = await fetch(\"${API_OSRM_URL}/route/v1/driving/${location.longitude},${location.latitude};\" + lng + \",\" + lat + \"?geometries=geojson\");\r\n+            const data = await res.json();\r\n+            const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n+            routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n+\r\n+            window.ReactNativeWebView.postMessage(JSON.stringify({\r\n+              destination: { latitude: lat, longitude: lng }\r\n+            }));\r\n+          });\r\n+        </script>\r\n+      </body>\r\n+      </html>\r\n+    `;\r\n+\r\n+    setHtml(template);\r\n+  }, [location]);\r\n+\r\n   return (\r\n     <View style={styles.container}>\r\n       <View style={{ paddingTop: 30 }}>\r\n-        <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n+        <StatusBar barStyle=\"light-content\" translucent backgroundColor=\"black\" />\r\n       </View>\r\n \r\n-      <MapView\r\n-        style={StyleSheet.absoluteFillObject}\r\n-        initialRegion={{\r\n-          latitude: location.latitude,\r\n-          longitude: location.longitude,\r\n-          latitudeDelta: 0.01,\r\n-          longitudeDelta: 0.01,\r\n-        }}\r\n-        showsUserLocation\r\n-        onPress={(e) => {\r\n-          const { coordinate } = e.nativeEvent;\r\n-          setDestination({ name: \"\", latitude: coordinate.latitude, longitude: coordinate.longitude });\r\n-        }}\r\n-      >\r\n-        <Marker\r\n-          coordinate={{ latitude: location.latitude, longitude: location.longitude }}\r\n-          title=\"You are here\"\r\n+      {location && html ? (\r\n+        <WebView\r\n+          originWhitelist={['*']}\r\n+          source={{ html }}\r\n+          javaScriptEnabled\r\n+          onMessage={(event) => {\r\n+            const data = JSON.parse(event.nativeEvent.data);\r\n+            setDestination(data.destination);\r\n+          }}\r\n+          style={StyleSheet.absoluteFillObject}\r\n         />\r\n-        {destination && (\r\n-          <Marker\r\n-            coordinate={{ latitude: destination.latitude, longitude: destination.longitude }}\r\n-            title={destination.name}\r\n-            pinColor=\"blue\"\r\n-          />\r\n-        )}\r\n-        {routeCoords.length > 0 && (\r\n-          <Polyline coordinates={routeCoords} strokeWidth={5} strokeColor=\"#FF5733\" />\r\n-        )}\r\n-      </MapView>\r\n+      ) : (\r\n+        <View style={styles.loadingContainer}>\r\n+          <Text style={{ fontSize: 20 }}>Loading map...</Text>\r\n+        </View>\r\n+      )}\r\n \r\n+      {/* Floating Card UI (unchanged) */}\r\n       <View style={styles.card}>\r\n         <View style={styles.cardHeader} />\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>\r\n-            {destination?.name || \"Saan ka papunta ngayon?\"}\r\n+            {destination ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}` : \"Saan ka papunta ngayon?\"}\r\n           </Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n+\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <MaterialIcons name=\"swap-vert\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>Saan ka ihahatid?</Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n+\r\n         <TouchableOpacity style={styles.inputBoxSimple}>\r\n           <MaterialIcons name=\"edit\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>Notes sa driver</Text>\r\n         </TouchableOpacity>\r\n+\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <MaterialIcons name=\"payments\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>Paano ka magbabayad</Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n+\r\n         <View style={styles.totalFareContainer}>\r\n           <View style={styles.fareBox}>\r\n             <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n           </View>\r\n@@ -114,8 +141,9 @@\n           </TouchableOpacity>\r\n         </View>\r\n       </View>\r\n \r\n+      {/* Bottom Navigation (unchanged) */}\r\n       <View style={styles.bottomNav}>\r\n         <TouchableOpacity>\r\n           <Ionicons name=\"home\" size={30} color=\"black\" />\r\n           <Text>Home</Text>\r\n"
                },
                {
                    "date": 1746356580051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,117 +1,112 @@\n-import React, { useEffect, useState } from \"react\";\r\n-import { View, Text, StyleSheet, Dimensions, TouchableOpacity, StatusBar } from \"react-native\";\r\n+// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView\r\n+\r\n+import React, { useState, useEffect } from \"react\";\r\n+import {\r\n+  View,\r\n+  Text,\r\n+  StyleSheet,\r\n+  Dimensions,\r\n+  TouchableOpacity,\r\n+  StatusBar,\r\n+} from \"react-native\";\r\n import { WebView } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n-import * as Location from \"expo-location\";\r\n-import API_OSRM_URL from \"../../config\";\r\n+import { useLocation } from \"../location/GlobalLocation\";\r\n+import API_BASE_URL from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n-  const [location, setLocation] = useState(null);\r\n+  const { location, loading } = useLocation();\r\n   const [destination, setDestination] = useState(null);\r\n-  const [html, setHtml] = useState(\"\");\r\n+  const [mapHtml, setMapHtml] = useState(\"\");\r\n \r\n-  // Get current location\r\n   useEffect(() => {\r\n-    (async () => {\r\n-      const { status } = await Location.requestForegroundPermissionsAsync();\r\n-      if (status !== \"granted\") return;\r\n-      const loc = await Location.getCurrentPositionAsync({});\r\n-      setLocation({\r\n-        latitude: loc.coords.latitude,\r\n-        longitude: loc.coords.longitude\r\n-      });\r\n-    })();\r\n-  }, []);\r\n-\r\n-  // Build map HTML with OpenStreetMap + OSRM\r\n-  useEffect(() => {\r\n     if (!location) return;\r\n \r\n-    const template = `\r\n+    const html = `\r\n       <!DOCTYPE html>\r\n       <html>\r\n-      <head>\r\n-        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n-        <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n-        <style> html, body, #map { height: 100%; margin: 0; padding: 0; } </style>\r\n-      </head>\r\n-      <body>\r\n-        <div id=\"map\"></div>\r\n-        <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n-        <script>\r\n-          const map = L.map('map').setView([${location.latitude}, ${location.longitude}], 14);\r\n-          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n-            maxZoom: 19,\r\n-            attribution: '© OpenStreetMap contributors'\r\n-          }).addTo(map);\r\n+        <head>\r\n+          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n+          <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n+          <style> html, body, #map { height: 100%; margin: 0; padding: 0; } </style>\r\n+        </head>\r\n+        <body>\r\n+          <div id=\"map\"></div>\r\n+          <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n+          <script>\r\n+            const map = L.map('map').setView([${location.latitude}, ${location.longitude}], 15);\r\n+            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n+              maxZoom: 19,\r\n+              attribution: '© OpenStreetMap contributors'\r\n+            }).addTo(map);\r\n \r\n-          const start = L.marker([${location.latitude}, ${location.longitude}])\r\n-            .addTo(map)\r\n-            .bindPopup('You are here')\r\n-            .openPopup();\r\n+            const startMarker = L.marker([${location.latitude}, ${location.longitude}]).addTo(map);\r\n \r\n-          let destMarker = null;\r\n-          let routeLine = null;\r\n+            let destMarker = null;\r\n+            let routeLine = null;\r\n \r\n-          map.on('click', async function(e) {\r\n-            const lat = e.latlng.lat;\r\n-            const lng = e.latlng.lng;\r\n+            map.on('click', async function(e) {\r\n+              const { lat, lng } = e.latlng;\r\n+              if (destMarker) map.removeLayer(destMarker);\r\n+              if (routeLine) map.removeLayer(routeLine);\r\n \r\n-            if (destMarker) map.removeLayer(destMarker);\r\n-            if (routeLine) map.removeLayer(routeLine);\r\n+              destMarker = L.marker([lat, lng]).addTo(map);\r\n \r\n-            destMarker = L.marker([lat, lng]).addTo(map).bindPopup('Destination').openPopup();\r\n+              const res = await fetch('${API_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n+              const data = await res.json();\r\n+              const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n+              routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n \r\n-            const res = await fetch(\"${API_OSRM_URL}/route/v1/driving/${location.longitude},${location.latitude};\" + lng + \",\" + lat + \"?geometries=geojson\");\r\n-            const data = await res.json();\r\n-            const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n-            routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n-\r\n-            window.ReactNativeWebView.postMessage(JSON.stringify({\r\n-              destination: { latitude: lat, longitude: lng }\r\n-            }));\r\n-          });\r\n-        </script>\r\n-      </body>\r\n+              window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n+            });\r\n+          </script>\r\n+        </body>\r\n       </html>\r\n     `;\r\n \r\n-    setHtml(template);\r\n+    setMapHtml(html);\r\n   }, [location]);\r\n \r\n+  if (loading || !location) {\r\n+    return (\r\n+      <View style={styles.loadingContainer}>\r\n+        <Text style={{ fontSize: 20 }}>Loading Map...</Text>\r\n+      </View>\r\n+    );\r\n+  }\r\n+\r\n   return (\r\n     <View style={styles.container}>\r\n       <View style={{ paddingTop: 30 }}>\r\n-        <StatusBar barStyle=\"light-content\" translucent backgroundColor=\"black\" />\r\n+        <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       </View>\r\n \r\n-      {location && html ? (\r\n+      {mapHtml && (\r\n         <WebView\r\n-          originWhitelist={['*']}\r\n-          source={{ html }}\r\n-          javaScriptEnabled\r\n+          originWhitelist={[\"*\"]}\r\n+          source={{ html: mapHtml }}\r\n+          javaScriptEnabled={true}\r\n           onMessage={(event) => {\r\n             const data = JSON.parse(event.nativeEvent.data);\r\n-            setDestination(data.destination);\r\n+            setDestination(data);\r\n           }}\r\n           style={StyleSheet.absoluteFillObject}\r\n         />\r\n-      ) : (\r\n-        <View style={styles.loadingContainer}>\r\n-          <Text style={{ fontSize: 20 }}>Loading map...</Text>\r\n-        </View>\r\n       )}\r\n \r\n-      {/* Floating Card UI (unchanged) */}\r\n+      {/* Floating Card */}\r\n       <View style={styles.card}>\r\n         <View style={styles.cardHeader} />\r\n+\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>\r\n-            {destination ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}` : \"Saan ka papunta ngayon?\"}\r\n+            {destination\r\n+              ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n+              : \"Saan ka papunta ngayon?\"}\r\n           </Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n \r\n@@ -141,9 +136,8 @@\n           </TouchableOpacity>\r\n         </View>\r\n       </View>\r\n \r\n-      {/* Bottom Navigation (unchanged) */}\r\n       <View style={styles.bottomNav}>\r\n         <TouchableOpacity>\r\n           <Ionicons name=\"home\" size={30} color=\"black\" />\r\n           <Text>Home</Text>\r\n"
                },
                {
                    "date": 1746356612933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n       <html>\r\n         <head>\r\n           <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n           <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n-          <style> html, body, #map { height: 100%; margin: 0; padding: 0; } </style>\r\n+          <style> html, body, #map { height: height; margin: 0; padding: 0; } </style>\r\n         </head>\r\n         <body>\r\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n"
                },
                {
                    "date": 1746356624691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n       <html>\r\n         <head>\r\n           <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n           <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n-          <style> html, body, #map { height: height; margin: 0; padding: 0; } </style>\r\n+          <style> html, body, #map { height: 100vh; margin: 0; padding: 0; } </style>\r\n         </head>\r\n         <body>\r\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n"
                },
                {
                    "date": 1746356793876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n       <html>\r\n         <head>\r\n           <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n           <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n-          <style> html, body, #map { height: 100vh; margin: 0; padding: 0; } </style>\r\n+          <style> html, body, #map { height: 100%; margin: 0; padding: 0; } </style>\r\n         </head>\r\n         <body>\r\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n"
                },
                {
                    "date": 1746356949138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,22 +81,24 @@\n     <View style={styles.container}>\r\n       <View style={{ paddingTop: 30 }}>\r\n         <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       </View>\r\n+      <View style={styles.mapview}>\r\n+        {mapHtml && (\r\n+          <WebView\r\n+            originWhitelist={[\"*\"]}\r\n+            source={{ html: mapHtml }}\r\n+            javaScriptEnabled={true}\r\n+            onMessage={(event) => {\r\n+              const data = JSON.parse(event.nativeEvent.data);\r\n+              setDestination(data);\r\n+            }}\r\n+            style={StyleSheet.absoluteFillObject}\r\n+          />\r\n+        )}\r\n+      </View>\r\n+      \r\n \r\n-      {mapHtml && (\r\n-        <WebView\r\n-          originWhitelist={[\"*\"]}\r\n-          source={{ html: mapHtml }}\r\n-          javaScriptEnabled={true}\r\n-          onMessage={(event) => {\r\n-            const data = JSON.parse(event.nativeEvent.data);\r\n-            setDestination(data);\r\n-          }}\r\n-          style={StyleSheet.absoluteFillObject}\r\n-        />\r\n-      )}\r\n-\r\n       {/* Floating Card */}\r\n       <View style={styles.card}>\r\n         <View style={styles.cardHeader} />\r\n \r\n@@ -178,8 +180,11 @@\n     alignSelf: \"center\",\r\n     borderRadius: 5,\r\n     marginBottom: 10,\r\n   },\r\n+  mapview: {\r\n+    height: height\r\n+  },\r\n   inputBox: {\r\n     backgroundColor: \"white\",\r\n     borderRadius: 8,\r\n     flexDirection: \"row\",\r\n"
                },
                {
                    "date": 1746356969169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,79 +1,30 @@\n-// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView\r\n+// 📍 Updated Passenger HomePage - phome.tsx\r\n \r\n-import React, { useState, useEffect } from \"react\";\r\n-import {\r\n-  View,\r\n-  Text,\r\n-  StyleSheet,\r\n-  Dimensions,\r\n-  TouchableOpacity,\r\n-  StatusBar,\r\n-} from \"react-native\";\r\n-import { WebView } from \"react-native-webview\";\r\n+import React, { useState } from \"react\";\r\n+import { View, Text, StyleSheet, Dimensions, TouchableOpacity, StatusBar } from \"react-native\";\r\n+import MapView, { Marker } from \"react-native-maps\";\r\n+import * as Location from \"expo-location\";\r\n+import { useRouter } from \"expo-router\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n-import API_BASE_URL from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n-  const [destination, setDestination] = useState(null);\r\n-  const [mapHtml, setMapHtml] = useState(\"\");\r\n+  const router = useRouter();\r\n \r\n-  useEffect(() => {\r\n-    if (!location) return;\r\n+  const [destination, setDestination] = useState<{\r\n+    name: string;\r\n+    latitude: number;\r\n+    longitude: number;\r\n+  } | null>(null);\r\n \r\n-    const html = `\r\n-      <!DOCTYPE html>\r\n-      <html>\r\n-        <head>\r\n-          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n-          <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n-          <style> html, body, #map { height: 100%; margin: 0; padding: 0; } </style>\r\n-        </head>\r\n-        <body>\r\n-          <div id=\"map\"></div>\r\n-          <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n-          <script>\r\n-            const map = L.map('map').setView([${location.latitude}, ${location.longitude}], 15);\r\n-            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n-              maxZoom: 19,\r\n-              attribution: '© OpenStreetMap contributors'\r\n-            }).addTo(map);\r\n-\r\n-            const startMarker = L.marker([${location.latitude}, ${location.longitude}]).addTo(map);\r\n-\r\n-            let destMarker = null;\r\n-            let routeLine = null;\r\n-\r\n-            map.on('click', async function(e) {\r\n-              const { lat, lng } = e.latlng;\r\n-              if (destMarker) map.removeLayer(destMarker);\r\n-              if (routeLine) map.removeLayer(routeLine);\r\n-\r\n-              destMarker = L.marker([lat, lng]).addTo(map);\r\n-\r\n-              const res = await fetch('${API_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n-              const data = await res.json();\r\n-              const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n-              routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n-\r\n-              window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n-            });\r\n-          </script>\r\n-        </body>\r\n-      </html>\r\n-    `;\r\n-\r\n-    setMapHtml(html);\r\n-  }, [location]);\r\n-\r\n   if (loading || !location) {\r\n     return (\r\n       <View style={styles.loadingContainer}>\r\n-        <Text style={{ fontSize: 20 }}>Loading Map...</Text>\r\n+        <Text style={{ fontSize: 20 }}>Loading Map=...</Text>\r\n       </View>\r\n     );\r\n   }\r\n \r\n@@ -81,55 +32,85 @@\n     <View style={styles.container}>\r\n       <View style={{ paddingTop: 30 }}>\r\n         <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       </View>\r\n-      <View style={styles.mapview}>\r\n-        {mapHtml && (\r\n-          <WebView\r\n-            originWhitelist={[\"*\"]}\r\n-            source={{ html: mapHtml }}\r\n-            javaScriptEnabled={true}\r\n-            onMessage={(event) => {\r\n-              const data = JSON.parse(event.nativeEvent.data);\r\n-              setDestination(data);\r\n-            }}\r\n-            style={StyleSheet.absoluteFillObject}\r\n+\r\n+      {/* Map */}\r\n+      <MapView\r\n+        style={StyleSheet.absoluteFillObject}\r\n+        initialRegion={{\r\n+          latitude: location.latitude,\r\n+          longitude: location.longitude,\r\n+          latitudeDelta: 0.01,\r\n+          longitudeDelta: 0.01,\r\n+        }}\r\n+        showsUserLocation\r\n+        onPoiClick={(e) => {\r\n+          const { coordinate, name } = e.nativeEvent;\r\n+          setDestination({\r\n+            name: name,\r\n+            latitude: coordinate.latitude,\r\n+            longitude: coordinate.longitude,\r\n+          });\r\n+        }}\r\n+        onPress={(e) => {\r\n+          const { coordinate } = e.nativeEvent;\r\n+          setDestination({\r\n+            name: \"\", // No name\r\n+            latitude: coordinate.latitude,\r\n+            longitude: coordinate.longitude,\r\n+          });\r\n+        }}\r\n+      >\r\n+\r\n+        <Marker\r\n+          coordinate={{ latitude: location.latitude, longitude: location.longitude }}\r\n+          title=\"You are here\"\r\n+        />\r\n+        {destination && (\r\n+          <Marker\r\n+            coordinate={{ latitude: destination.latitude, longitude: destination.longitude }}\r\n+            title={destination.name}\r\n+            pinColor=\"blue\"\r\n           />\r\n         )}\r\n-      </View>\r\n-      \r\n+        \r\n+      </MapView>\r\n \r\n       {/* Floating Card */}\r\n       <View style={styles.card}>\r\n         <View style={styles.cardHeader} />\r\n \r\n+        {/* Pickup Location */}\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>\r\n-            {destination\r\n-              ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n-              : \"Saan ka papunta ngayon?\"}\r\n+            {destination?.name || \"Saan ka papunta ngayon?\"}\r\n           </Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n \r\n+        {/* Destination (For now static, editable later if needed) */}\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <MaterialIcons name=\"swap-vert\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>Saan ka ihahatid?</Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n \r\n+        {/* Notes to Driver */}\r\n         <TouchableOpacity style={styles.inputBoxSimple}>\r\n           <MaterialIcons name=\"edit\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>Notes sa driver</Text>\r\n         </TouchableOpacity>\r\n \r\n+        {/* Payment Method */}\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <MaterialIcons name=\"payments\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>Paano ka magbabayad</Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n \r\n+        {/* Fare and Book Now */}\r\n         <View style={styles.totalFareContainer}>\r\n           <View style={styles.fareBox}>\r\n             <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n           </View>\r\n@@ -138,8 +119,9 @@\n           </TouchableOpacity>\r\n         </View>\r\n       </View>\r\n \r\n+      {/* Bottom Nav */}\r\n       <View style={styles.bottomNav}>\r\n         <TouchableOpacity>\r\n           <Ionicons name=\"home\" size={30} color=\"black\" />\r\n           <Text>Home</Text>\r\n@@ -180,11 +162,8 @@\n     alignSelf: \"center\",\r\n     borderRadius: 5,\r\n     marginBottom: 10,\r\n   },\r\n-  mapview: {\r\n-    height: height\r\n-  },\r\n   inputBox: {\r\n     backgroundColor: \"white\",\r\n     borderRadius: 8,\r\n     flexDirection: \"row\",\r\n"
                },
                {
                    "date": 1746356975923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,79 @@\n-// 📍 Updated Passenger HomePage - phome.tsx\r\n+// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView\r\n \r\n-import React, { useState } from \"react\";\r\n-import { View, Text, StyleSheet, Dimensions, TouchableOpacity, StatusBar } from \"react-native\";\r\n-import MapView, { Marker } from \"react-native-maps\";\r\n-import * as Location from \"expo-location\";\r\n-import { useRouter } from \"expo-router\";\r\n+import React, { useState, useEffect } from \"react\";\r\n+import {\r\n+  View,\r\n+  Text,\r\n+  StyleSheet,\r\n+  Dimensions,\r\n+  TouchableOpacity,\r\n+  StatusBar,\r\n+} from \"react-native\";\r\n+import { WebView } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n+import API_BASE_URL from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n-  const router = useRouter();\r\n+  const [destination, setDestination] = useState(null);\r\n+  const [mapHtml, setMapHtml] = useState(\"\");\r\n \r\n-  const [destination, setDestination] = useState<{\r\n-    name: string;\r\n-    latitude: number;\r\n-    longitude: number;\r\n-  } | null>(null);\r\n+  useEffect(() => {\r\n+    if (!location) return;\r\n \r\n+    const html = `\r\n+      <!DOCTYPE html>\r\n+      <html>\r\n+        <head>\r\n+          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n+          <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n+          <style> html, body, #map { height: 100%; margin: 0; padding: 0; } </style>\r\n+        </head>\r\n+        <body>\r\n+          <div id=\"map\"></div>\r\n+          <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n+          <script>\r\n+            const map = L.map('map').setView([${location.latitude}, ${location.longitude}], 15);\r\n+            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n+              maxZoom: 19,\r\n+              attribution: '© OpenStreetMap contributors'\r\n+            }).addTo(map);\r\n+\r\n+            const startMarker = L.marker([${location.latitude}, ${location.longitude}]).addTo(map);\r\n+\r\n+            let destMarker = null;\r\n+            let routeLine = null;\r\n+\r\n+            map.on('click', async function(e) {\r\n+              const { lat, lng } = e.latlng;\r\n+              if (destMarker) map.removeLayer(destMarker);\r\n+              if (routeLine) map.removeLayer(routeLine);\r\n+\r\n+              destMarker = L.marker([lat, lng]).addTo(map);\r\n+\r\n+              const res = await fetch('${API_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n+              const data = await res.json();\r\n+              const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n+              routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n+\r\n+              window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n+            });\r\n+          </script>\r\n+        </body>\r\n+      </html>\r\n+    `;\r\n+\r\n+    setMapHtml(html);\r\n+  }, [location]);\r\n+\r\n   if (loading || !location) {\r\n     return (\r\n       <View style={styles.loadingContainer}>\r\n-        <Text style={{ fontSize: 20 }}>Loading Map=...</Text>\r\n+        <Text style={{ fontSize: 20 }}>Loading Map...</Text>\r\n       </View>\r\n     );\r\n   }\r\n \r\n@@ -33,84 +82,52 @@\n       <View style={{ paddingTop: 30 }}>\r\n         <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       </View>\r\n \r\n-      {/* Map */}\r\n-      <MapView\r\n-        style={StyleSheet.absoluteFillObject}\r\n-        initialRegion={{\r\n-          latitude: location.latitude,\r\n-          longitude: location.longitude,\r\n-          latitudeDelta: 0.01,\r\n-          longitudeDelta: 0.01,\r\n-        }}\r\n-        showsUserLocation\r\n-        onPoiClick={(e) => {\r\n-          const { coordinate, name } = e.nativeEvent;\r\n-          setDestination({\r\n-            name: name,\r\n-            latitude: coordinate.latitude,\r\n-            longitude: coordinate.longitude,\r\n-          });\r\n-        }}\r\n-        onPress={(e) => {\r\n-          const { coordinate } = e.nativeEvent;\r\n-          setDestination({\r\n-            name: \"\", // No name\r\n-            latitude: coordinate.latitude,\r\n-            longitude: coordinate.longitude,\r\n-          });\r\n-        }}\r\n-      >\r\n-\r\n-        <Marker\r\n-          coordinate={{ latitude: location.latitude, longitude: location.longitude }}\r\n-          title=\"You are here\"\r\n+      {mapHtml && (\r\n+        <WebView\r\n+          originWhitelist={[\"*\"]}\r\n+          source={{ html: mapHtml }}\r\n+          javaScriptEnabled={true}\r\n+          onMessage={(event) => {\r\n+            const data = JSON.parse(event.nativeEvent.data);\r\n+            setDestination(data);\r\n+          }}\r\n+          style={StyleSheet.absoluteFillObject}\r\n         />\r\n-        {destination && (\r\n-          <Marker\r\n-            coordinate={{ latitude: destination.latitude, longitude: destination.longitude }}\r\n-            title={destination.name}\r\n-            pinColor=\"blue\"\r\n-          />\r\n-        )}\r\n-        \r\n-      </MapView>\r\n+      )}\r\n \r\n       {/* Floating Card */}\r\n       <View style={styles.card}>\r\n         <View style={styles.cardHeader} />\r\n \r\n-        {/* Pickup Location */}\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>\r\n-            {destination?.name || \"Saan ka papunta ngayon?\"}\r\n+            {destination\r\n+              ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n+              : \"Saan ka papunta ngayon?\"}\r\n           </Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n \r\n-        {/* Destination (For now static, editable later if needed) */}\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <MaterialIcons name=\"swap-vert\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>Saan ka ihahatid?</Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n \r\n-        {/* Notes to Driver */}\r\n         <TouchableOpacity style={styles.inputBoxSimple}>\r\n           <MaterialIcons name=\"edit\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>Notes sa driver</Text>\r\n         </TouchableOpacity>\r\n \r\n-        {/* Payment Method */}\r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <MaterialIcons name=\"payments\" size={20} color=\"#616161\" />\r\n           <Text style={styles.inputText}>Paano ka magbabayad</Text>\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n \r\n-        {/* Fare and Book Now */}\r\n         <View style={styles.totalFareContainer}>\r\n           <View style={styles.fareBox}>\r\n             <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n           </View>\r\n@@ -119,9 +136,8 @@\n           </TouchableOpacity>\r\n         </View>\r\n       </View>\r\n \r\n-      {/* Bottom Nav */}\r\n       <View style={styles.bottomNav}>\r\n         <TouchableOpacity>\r\n           <Ionicons name=\"home\" size={30} color=\"black\" />\r\n           <Text>Home</Text>\r\n"
                },
                {
                    "date": 1746356994942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,22 +81,24 @@\n     <View style={styles.container}>\r\n       <View style={{ paddingTop: 30 }}>\r\n         <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       </View>\r\n+      <View style={styles.mapview}>\r\n+        {mapHtml && (\r\n+          <WebView\r\n+            originWhitelist={[\"*\"]}\r\n+            source={{ html: mapHtml }}\r\n+            javaScriptEnabled={true}\r\n+            onMessage={(event) => {\r\n+              const data = JSON.parse(event.nativeEvent.data);\r\n+              setDestination(data);\r\n+            }}\r\n+            style={StyleSheet.absoluteFillObject}\r\n+          />\r\n+        )}\r\n+      </View>\r\n+      \r\n \r\n-      {mapHtml && (\r\n-        <WebView\r\n-          originWhitelist={[\"*\"]}\r\n-          source={{ html: mapHtml }}\r\n-          javaScriptEnabled={true}\r\n-          onMessage={(event) => {\r\n-            const data = JSON.parse(event.nativeEvent.data);\r\n-            setDestination(data);\r\n-          }}\r\n-          style={StyleSheet.absoluteFillObject}\r\n-        />\r\n-      )}\r\n-\r\n       {/* Floating Card */}\r\n       <View style={styles.card}>\r\n         <View style={styles.cardHeader} />\r\n \r\n@@ -178,8 +180,11 @@\n     alignSelf: \"center\",\r\n     borderRadius: 5,\r\n     marginBottom: 10,\r\n   },\r\n+  mapview: {\r\n+    height: height\r\n+  },\r\n   inputBox: {\r\n     backgroundColor: \"white\",\r\n     borderRadius: 8,\r\n     flexDirection: \"row\",\r\n"
                },
                {
                    "date": 1746357233999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n           <script>\r\n             const map = L.map('map').setView([${location.latitude}, ${location.longitude}], 15);\r\n-            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n+            L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n               maxZoom: 19,\r\n               attribution: '© OpenStreetMap contributors'\r\n             }).addTo(map);\r\n \r\n"
                },
                {
                    "date": 1746357440809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,13 +103,13 @@\n         <View style={styles.cardHeader} />\r\n \r\n         <TouchableOpacity style={styles.inputBox}>\r\n           <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-          <Text style={styles.inputText}>\r\n+          {/* <Text style={styles.inputText}>\r\n             {destination\r\n               ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n               : \"Saan ka papunta ngayon?\"}\r\n-          </Text>\r\n+          </Text> */}\r\n           <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n         </TouchableOpacity>\r\n \r\n         <TouchableOpacity style={styles.inputBox}>\r\n"
                },
                {
                    "date": 1746357545608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n     <View style={styles.container}>\r\n       <View style={{ paddingTop: 30 }}>\r\n         <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       </View>\r\n-      <View style={styles.mapview}>\r\n+      {/* <View style={styles.mapview}>\r\n         {mapHtml && (\r\n           <WebView\r\n             originWhitelist={[\"*\"]}\r\n             source={{ html: mapHtml }}\r\n@@ -94,9 +94,9 @@\n             }}\r\n             style={StyleSheet.absoluteFillObject}\r\n           />\r\n         )}\r\n-      </View>\r\n+      </View> */}\r\n       \r\n \r\n       {/* Floating Card */}\r\n       <View style={styles.card}>\r\n"
                },
                {
                    "date": 1746357568233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n     <View style={styles.container}>\r\n       <View style={{ paddingTop: 30 }}>\r\n         <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       </View>\r\n-      {/* <View style={styles.mapview}>\r\n+      <View style={styles.mapview}>\r\n         {mapHtml && (\r\n           <WebView\r\n             originWhitelist={[\"*\"]}\r\n             source={{ html: mapHtml }}\r\n@@ -94,9 +94,9 @@\n             }}\r\n             style={StyleSheet.absoluteFillObject}\r\n           />\r\n         )}\r\n-      </View> */}\r\n+      </View>\r\n       \r\n \r\n       {/* Floating Card */}\r\n       <View style={styles.card}>\r\n@@ -161,9 +161,9 @@\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n-  container: { flex: 1 },\r\n+  container: { flex: 1, height: height},\r\n   loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\" },\r\n   card: {\r\n     position: \"absolute\",\r\n     bottom: 75,\r\n"
                },
                {
                    "date": 1746357736693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,9 @@\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n-  container: { flex: 1, height: height},\r\n+  container: { flex: 1, height: height, backgroundColor: \"red\"},\r\n   loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\" },\r\n   card: {\r\n     position: \"absolute\",\r\n     bottom: 75,\r\n"
                },
                {
                    "date": 1746357801882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,9 @@\n }\r\n \r\n const styles = StyleSheet.create({\r\n   container: { flex: 1, height: height, backgroundColor: \"red\"},\r\n-  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\" },\r\n+  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\", backgroundColor: \"red\"},\r\n   card: {\r\n     position: \"absolute\",\r\n     bottom: 75,\r\n     backgroundColor: \"#81C3E1\",\r\n"
                },
                {
                    "date": 1746357826371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,10 @@\n     borderRadius: 5,\r\n     marginBottom: 10,\r\n   },\r\n   mapview: {\r\n-    height: height\r\n+    height: height,\r\n+    backgroundColor: \"red\",\r\n   },\r\n   inputBox: {\r\n     backgroundColor: \"white\",\r\n     borderRadius: 8,\r\n"
                },
                {
                    "date": 1746357854120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,9 +233,9 @@\n     flexDirection: \"row\",\r\n     justifyContent: \"space-around\",\r\n     width: width,\r\n     height: 70,\r\n-    backgroundColor: \"white\",\r\n+    backgroundColor: \"red\",\r\n     borderTopLeftRadius: 30,\r\n     borderTopRightRadius: 30,\r\n     alignItems: \"center\",\r\n     borderWidth: 1,\r\n"
                },
                {
                    "date": 1746357859846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,9 +233,9 @@\n     flexDirection: \"row\",\r\n     justifyContent: \"space-around\",\r\n     width: width,\r\n     height: 70,\r\n-    backgroundColor: \"red\",\r\n+    backgroundColor: \"white\",\r\n     borderTopLeftRadius: 30,\r\n     borderTopRightRadius: 30,\r\n     alignItems: \"center\",\r\n     borderWidth: 1,\r\n"
                },
                {
                    "date": 1746357889497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,9 +225,9 @@\n     padding: 5,\r\n     marginLeft: 5,\r\n     width: '50%',\r\n   },\r\n-  bookNowText: { fontSize: 16 },\r\n+  bookNowText: { fontSize: 16, backgroundColor: \"red\", },\r\n   bottomNav: {\r\n     position: \"absolute\",\r\n     bottom: 0,\r\n     flexDirection: \"row\",\r\n"
                },
                {
                    "date": 1746358051531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n             onMessage={(event) => {\r\n               const data = JSON.parse(event.nativeEvent.data);\r\n               setDestination(data);\r\n             }}\r\n-            style={StyleSheet.absoluteFillObject}\r\n+            style={{width: width, height: height}}\r\n           />\r\n         )}\r\n       </View>\r\n       \r\n@@ -225,9 +225,9 @@\n     padding: 5,\r\n     marginLeft: 5,\r\n     width: '50%',\r\n   },\r\n-  bookNowText: { fontSize: 16, backgroundColor: \"red\", },\r\n+  bookNowText: { fontSize: 16 },\r\n   bottomNav: {\r\n     position: \"absolute\",\r\n     bottom: 0,\r\n     flexDirection: \"row\",\r\n"
                },
                {
                    "date": 1746358063488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n             onMessage={(event) => {\r\n               const data = JSON.parse(event.nativeEvent.data);\r\n               setDestination(data);\r\n             }}\r\n-            style={{width: width, height: height}}\r\n+            style={{width: width, height: height - 220}}\r\n           />\r\n         )}\r\n       </View>\r\n       \r\n"
                },
                {
                    "date": 1746358344705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,11 +78,10 @@\n   }\r\n \r\n   return (\r\n     <View style={styles.container}>\r\n-      <View style={{ paddingTop: 30 }}>\r\n-        <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n-      </View>\r\n+      <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n+      \r\n       <View style={styles.mapview}>\r\n         {mapHtml && (\r\n           <WebView\r\n             originWhitelist={[\"*\"]}\r\n@@ -91,73 +90,77 @@\n             onMessage={(event) => {\r\n               const data = JSON.parse(event.nativeEvent.data);\r\n               setDestination(data);\r\n             }}\r\n-            style={{width: width, height: height - 220}}\r\n+            style={{ flex: 1 }}\r\n           />\r\n         )}\r\n       </View>\r\n+\r\n       \r\n \r\n       {/* Floating Card */}\r\n-      <View style={styles.card}>\r\n-        <View style={styles.cardHeader} />\r\n+      <View style={styles.overlayContainer}>\r\n+        <View style={styles.card}>\r\n+          <View style={styles.cardHeader} />\r\n \r\n-        <TouchableOpacity style={styles.inputBox}>\r\n-          <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-          {/* <Text style={styles.inputText}>\r\n-            {destination\r\n-              ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n-              : \"Saan ka papunta ngayon?\"}\r\n-          </Text> */}\r\n-          <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-        </TouchableOpacity>\r\n+          <TouchableOpacity style={styles.inputBox}>\r\n+            <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n+            {/* <Text style={styles.inputText}>\r\n+              {destination\r\n+                ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n+                : \"Saan ka papunta ngayon?\"}\r\n+            </Text> */}\r\n+            <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+          </TouchableOpacity>\r\n \r\n-        <TouchableOpacity style={styles.inputBox}>\r\n-          <MaterialIcons name=\"swap-vert\" size={20} color=\"#616161\" />\r\n-          <Text style={styles.inputText}>Saan ka ihahatid?</Text>\r\n-          <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-        </TouchableOpacity>\r\n+          <TouchableOpacity style={styles.inputBox}>\r\n+            <MaterialIcons name=\"swap-vert\" size={20} color=\"#616161\" />\r\n+            <Text style={styles.inputText}>Saan ka ihahatid?</Text>\r\n+            <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+          </TouchableOpacity>\r\n \r\n-        <TouchableOpacity style={styles.inputBoxSimple}>\r\n-          <MaterialIcons name=\"edit\" size={20} color=\"#616161\" />\r\n-          <Text style={styles.inputText}>Notes sa driver</Text>\r\n-        </TouchableOpacity>\r\n+          <TouchableOpacity style={styles.inputBoxSimple}>\r\n+            <MaterialIcons name=\"edit\" size={20} color=\"#616161\" />\r\n+            <Text style={styles.inputText}>Notes sa driver</Text>\r\n+          </TouchableOpacity>\r\n \r\n-        <TouchableOpacity style={styles.inputBox}>\r\n-          <MaterialIcons name=\"payments\" size={20} color=\"#616161\" />\r\n-          <Text style={styles.inputText}>Paano ka magbabayad</Text>\r\n-          <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-        </TouchableOpacity>\r\n+          <TouchableOpacity style={styles.inputBox}>\r\n+            <MaterialIcons name=\"payments\" size={20} color=\"#616161\" />\r\n+            <Text style={styles.inputText}>Paano ka magbabayad</Text>\r\n+            <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+          </TouchableOpacity>\r\n \r\n-        <View style={styles.totalFareContainer}>\r\n-          <View style={styles.fareBox}>\r\n-            <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n+          <View style={styles.totalFareContainer}>\r\n+            <View style={styles.fareBox}>\r\n+              <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n+            </View>\r\n+            <TouchableOpacity style={styles.bookNowButton}>\r\n+              <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n+            </TouchableOpacity>\r\n           </View>\r\n-          <TouchableOpacity style={styles.bookNowButton}>\r\n-            <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n+        </View>\r\n+\r\n+        <View style={styles.bottomNav}>\r\n+          <TouchableOpacity>\r\n+            <Ionicons name=\"home\" size={30} color=\"black\" />\r\n+            <Text>Home</Text>\r\n           </TouchableOpacity>\r\n+          <TouchableOpacity>\r\n+            <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n+            <Text>History</Text>\r\n+          </TouchableOpacity>\r\n+          <TouchableOpacity>\r\n+            <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n+            <Text>Chats</Text>\r\n+          </TouchableOpacity>\r\n+          <TouchableOpacity>\r\n+            <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n+            <Text>Profile</Text>\r\n+          </TouchableOpacity>\r\n         </View>\r\n       </View>\r\n-\r\n-      <View style={styles.bottomNav}>\r\n-        <TouchableOpacity>\r\n-          <Ionicons name=\"home\" size={30} color=\"black\" />\r\n-          <Text>Home</Text>\r\n-        </TouchableOpacity>\r\n-        <TouchableOpacity>\r\n-          <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n-          <Text>History</Text>\r\n-        </TouchableOpacity>\r\n-        <TouchableOpacity>\r\n-          <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n-          <Text>Chats</Text>\r\n-        </TouchableOpacity>\r\n-        <TouchableOpacity>\r\n-          <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n-          <Text>Profile</Text>\r\n-        </TouchableOpacity>\r\n-      </View>\r\n+      \r\n     </View>\r\n   );\r\n }\r\n \r\n"
                },
                {
                    "date": 1746358369426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,22 @@\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n-  container: { flex: 1, height: height, backgroundColor: \"red\"},\r\n+  container: {\r\n+    flex: 1,\r\n+    backgroundColor: \"#fff\",\r\n+  },\r\n+  mapview: {\r\n+    flex: 1,\r\n+  },\r\n+  overlayContainer: {\r\n+    position: \"absolute\",\r\n+    bottom: 0,\r\n+    width: \"100%\",\r\n+    alignItems: \"center\",\r\n+  },\r\n+  \r\n   loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\", backgroundColor: \"red\"},\r\n   card: {\r\n     position: \"absolute\",\r\n     bottom: 75,\r\n"
                },
                {
                    "date": 1746358409636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,12 +196,8 @@\n     alignSelf: \"center\",\r\n     borderRadius: 5,\r\n     marginBottom: 10,\r\n   },\r\n-  mapview: {\r\n-    height: height,\r\n-    backgroundColor: \"red\",\r\n-  },\r\n   inputBox: {\r\n     backgroundColor: \"white\",\r\n     borderRadius: 8,\r\n     flexDirection: \"row\",\r\n"
                },
                {
                    "date": 1746358419449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n             </TouchableOpacity>\r\n           </View>\r\n         </View>\r\n \r\n-        <View style={styles.bottomNav}>\r\n+        {/* <View style={styles.bottomNav}>\r\n           <TouchableOpacity>\r\n             <Ionicons name=\"home\" size={30} color=\"black\" />\r\n             <Text>Home</Text>\r\n           </TouchableOpacity>\r\n@@ -156,9 +156,9 @@\n           <TouchableOpacity>\r\n             <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n             <Text>Profile</Text>\r\n           </TouchableOpacity>\r\n-        </View>\r\n+        </View> */}\r\n       </View>\r\n       \r\n     </View>\r\n   );\r\n"
                },
                {
                    "date": 1746358506403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,10 +99,10 @@\n       \r\n \r\n       {/* Floating Card */}\r\n       <View style={styles.overlayContainer}>\r\n-        <View style={styles.card}>\r\n-          <View style={styles.cardHeader} />\r\n+        {/* <View style={styles.card}>\r\n+          <View style={styles.cardHeader} /> */}\r\n \r\n           <TouchableOpacity style={styles.inputBox}>\r\n             <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n             {/* <Text style={styles.inputText}>\r\n@@ -112,9 +112,9 @@\n             </Text> */}\r\n             <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n           </TouchableOpacity>\r\n \r\n-          <TouchableOpacity style={styles.inputBox}>\r\n+          {/* <TouchableOpacity style={styles.inputBox}>\r\n             <MaterialIcons name=\"swap-vert\" size={20} color=\"#616161\" />\r\n             <Text style={styles.inputText}>Saan ka ihahatid?</Text>\r\n             <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n           </TouchableOpacity>\r\n@@ -137,9 +137,9 @@\n             <TouchableOpacity style={styles.bookNowButton}>\r\n               <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n             </TouchableOpacity>\r\n           </View>\r\n-        </View>\r\n+        </View> */}\r\n \r\n         {/* <View style={styles.bottomNav}>\r\n           <TouchableOpacity>\r\n             <Ionicons name=\"home\" size={30} color=\"black\" />\r\n"
                },
                {
                    "date": 1746358517861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,17 +102,17 @@\n       <View style={styles.overlayContainer}>\r\n         {/* <View style={styles.card}>\r\n           <View style={styles.cardHeader} /> */}\r\n \r\n-          <TouchableOpacity style={styles.inputBox}>\r\n+          {/* <TouchableOpacity style={styles.inputBox}>\r\n             <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-            {/* <Text style={styles.inputText}>\r\n+            <Text style={styles.inputText}>\r\n               {destination\r\n                 ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n                 : \"Saan ka papunta ngayon?\"}\r\n-            </Text> */}\r\n+            </Text>\r\n             <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-          </TouchableOpacity>\r\n+          </TouchableOpacity> */}\r\n \r\n           {/* <TouchableOpacity style={styles.inputBox}>\r\n             <MaterialIcons name=\"swap-vert\" size={20} color=\"#616161\" />\r\n             <Text style={styles.inputText}>Saan ka ihahatid?</Text>\r\n"
                },
                {
                    "date": 1746358920046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,22 +80,20 @@\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       \r\n-      <View style={styles.mapview}>\r\n-        {mapHtml && (\r\n-          <WebView\r\n-            originWhitelist={[\"*\"]}\r\n-            source={{ html: mapHtml }}\r\n-            javaScriptEnabled={true}\r\n-            onMessage={(event) => {\r\n-              const data = JSON.parse(event.nativeEvent.data);\r\n-              setDestination(data);\r\n-            }}\r\n-            style={{ flex: 1 }}\r\n-          />\r\n-        )}\r\n-      </View>\r\n+      {mapHtml && (\r\n+        <WebView\r\n+          originWhitelist={[\"*\"]}\r\n+          source={{ html: mapHtml }}\r\n+          javaScriptEnabled={true}\r\n+          onMessage={(event) => {\r\n+            const data = JSON.parse(event.nativeEvent.data);\r\n+            setDestination(data);\r\n+          }}\r\n+          style={StyleSheet.absoluteFillObject}\r\n+        />\r\n+      )}\r\n \r\n       \r\n \r\n       {/* Floating Card */}\r\n"
                },
                {
                    "date": 1746358938788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,18 +164,16 @@\n \r\n const styles = StyleSheet.create({\r\n   container: {\r\n     flex: 1,\r\n-    backgroundColor: \"#fff\",\r\n+    position: 'relative',\r\n   },\r\n-  mapview: {\r\n-    flex: 1,\r\n-  },\r\n   overlayContainer: {\r\n     position: \"absolute\",\r\n     bottom: 0,\r\n     width: \"100%\",\r\n     alignItems: \"center\",\r\n+    zIndex: 10,\r\n   },\r\n   \r\n   loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\", backgroundColor: \"red\"},\r\n   card: {\r\n"
                },
                {
                    "date": 1746359019325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n import { WebView } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n import API_BASE_URL from \"../../config\";\r\n+import { SafeAreaView } from \"react-native-safe-area-context\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n"
                },
                {
                    "date": 1746359043400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,17 +85,22 @@\n       {mapHtml && (\r\n         <WebView\r\n           originWhitelist={[\"*\"]}\r\n           source={{ html: mapHtml }}\r\n-          javaScriptEnabled={true}\r\n+          javaScriptEnabled\r\n           onMessage={(event) => {\r\n             const data = JSON.parse(event.nativeEvent.data);\r\n             setDestination(data);\r\n           }}\r\n           style={StyleSheet.absoluteFillObject}\r\n         />\r\n       )}\r\n \r\n+      {/* Overlay content above the map */}\r\n+      <SafeAreaView style={styles.overlayContainer}>\r\n+        {/* cards, buttons, nav, etc. */}\r\n+      </SafeAreaView>\r\n+\r\n       \r\n \r\n       {/* Floating Card */}\r\n       <View style={styles.overlayContainer}>\r\n"
                },
                {
                    "date": 1746359060083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,13 +94,8 @@\n           style={StyleSheet.absoluteFillObject}\r\n         />\r\n       )}\r\n \r\n-      {/* Overlay content above the map */}\r\n-      <SafeAreaView style={styles.overlayContainer}>\r\n-        {/* cards, buttons, nav, etc. */}\r\n-      </SafeAreaView>\r\n-\r\n       \r\n \r\n       {/* Floating Card */}\r\n       <View style={styles.overlayContainer}>\r\n"
                },
                {
                    "date": 1746359083410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n \r\n       \r\n \r\n       {/* Floating Card */}\r\n-      <View style={styles.overlayContainer}>\r\n+      <SafeAreaView style={styles.overlayContainer}>\r\n         {/* <View style={styles.card}>\r\n           <View style={styles.cardHeader} /> */}\r\n \r\n           {/* <TouchableOpacity style={styles.inputBox}>\r\n@@ -156,9 +156,9 @@\n             <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n             <Text>Profile</Text>\r\n           </TouchableOpacity>\r\n         </View> */}\r\n-      </View>\r\n+      </SafeAreaView>\r\n       \r\n     </View>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1746359328941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,22 +98,22 @@\n       \r\n \r\n       {/* Floating Card */}\r\n       <SafeAreaView style={styles.overlayContainer}>\r\n-        {/* <View style={styles.card}>\r\n-          <View style={styles.cardHeader} /> */}\r\n+        <View style={styles.card}>\r\n+          <View style={styles.cardHeader} />\r\n \r\n-          {/* <TouchableOpacity style={styles.inputBox}>\r\n+          <TouchableOpacity style={styles.inputBox}>\r\n             <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-            <Text style={styles.inputText}>\r\n+            {/* <Text style={styles.inputText}>\r\n               {destination\r\n                 ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n                 : \"Saan ka papunta ngayon?\"}\r\n-            </Text>\r\n+            </Text> */}\r\n             <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-          </TouchableOpacity> */}\r\n+          </TouchableOpacity>\r\n \r\n-          {/* <TouchableOpacity style={styles.inputBox}>\r\n+          <TouchableOpacity style={styles.inputBox}>\r\n             <MaterialIcons name=\"swap-vert\" size={20} color=\"#616161\" />\r\n             <Text style={styles.inputText}>Saan ka ihahatid?</Text>\r\n             <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n           </TouchableOpacity>\r\n@@ -136,11 +136,11 @@\n             <TouchableOpacity style={styles.bookNowButton}>\r\n               <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n             </TouchableOpacity>\r\n           </View>\r\n-        </View> */}\r\n+        </View>\r\n \r\n-        {/* <View style={styles.bottomNav}>\r\n+        <View style={styles.bottomNav}>\r\n           <TouchableOpacity>\r\n             <Ionicons name=\"home\" size={30} color=\"black\" />\r\n             <Text>Home</Text>\r\n           </TouchableOpacity>\r\n@@ -155,9 +155,9 @@\n           <TouchableOpacity>\r\n             <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n             <Text>Profile</Text>\r\n           </TouchableOpacity>\r\n-        </View> */}\r\n+        </View>\r\n       </SafeAreaView>\r\n       \r\n     </View>\r\n   );\r\n"
                },
                {
                    "date": 1746359421638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,21 +81,26 @@\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       \r\n-      {mapHtml && (\r\n+      {mapHtml ? (\r\n         <WebView\r\n           originWhitelist={[\"*\"]}\r\n           source={{ html: mapHtml }}\r\n           javaScriptEnabled\r\n           onMessage={(event) => {\r\n-            const data = JSON.parse(event.nativeEvent.data);\r\n-            setDestination(data);\r\n+            try {\r\n+              const data = JSON.parse(event.nativeEvent.data);\r\n+              setDestination(data);\r\n+            } catch (e) {\r\n+              console.error(\"Invalid map data\", e);\r\n+            }\r\n           }}\r\n-          style={StyleSheet.absoluteFillObject}\r\n+          style={{ flex: 1 }}\r\n         />\r\n-      )}\r\n+      ) : null}\r\n \r\n+\r\n       \r\n \r\n       {/* Floating Card */}\r\n       <SafeAreaView style={styles.overlayContainer}>\r\n"
                },
                {
                    "date": 1746359506220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,8 +182,9 @@\n   },\r\n   \r\n   loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\", backgroundColor: \"red\"},\r\n   card: {\r\n+    height: height\r\n     position: \"absolute\",\r\n     bottom: 75,\r\n     backgroundColor: \"#81C3E1\",\r\n     width: width * 0.95,\r\n"
                },
                {
                    "date": 1746359526182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,11 +180,10 @@\n     alignItems: \"center\",\r\n     zIndex: 10,\r\n   },\r\n   \r\n-  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\", backgroundColor: \"red\"},\r\n+  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\", backgroundColor: \"red\", height: height,},\r\n   card: {\r\n-    height: height\r\n     position: \"absolute\",\r\n     bottom: 75,\r\n     backgroundColor: \"#81C3E1\",\r\n     width: width * 0.95,\r\n"
                },
                {
                    "date": 1746359598460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n import { WebView } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n import API_BASE_URL from \"../../config\";\r\n-import { SafeAreaView } from \"react-native-safe-area-context\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n@@ -81,30 +80,27 @@\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       \r\n-      {mapHtml ? (\r\n-        <WebView\r\n-          originWhitelist={[\"*\"]}\r\n-          source={{ html: mapHtml }}\r\n-          javaScriptEnabled\r\n-          onMessage={(event) => {\r\n-            try {\r\n+      <View style={styles.mapview}>\r\n+        {mapHtml && (\r\n+          <WebView\r\n+            originWhitelist={[\"*\"]}\r\n+            source={{ html: mapHtml }}\r\n+            javaScriptEnabled={true}\r\n+            onMessage={(event) => {\r\n               const data = JSON.parse(event.nativeEvent.data);\r\n               setDestination(data);\r\n-            } catch (e) {\r\n-              console.error(\"Invalid map data\", e);\r\n-            }\r\n-          }}\r\n-          style={{ flex: 1 }}\r\n-        />\r\n-      ) : null}\r\n+            }}\r\n+            style={{ flex: 1 }}\r\n+          />\r\n+        )}\r\n+      </View>\r\n \r\n-\r\n       \r\n \r\n       {/* Floating Card */}\r\n-      <SafeAreaView style={styles.overlayContainer}>\r\n+      <View style={styles.overlayContainer}>\r\n         <View style={styles.card}>\r\n           <View style={styles.cardHeader} />\r\n \r\n           <TouchableOpacity style={styles.inputBox}>\r\n@@ -161,28 +157,30 @@\n             <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n             <Text>Profile</Text>\r\n           </TouchableOpacity>\r\n         </View>\r\n-      </SafeAreaView>\r\n+      </View>\r\n       \r\n     </View>\r\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n   container: {\r\n     flex: 1,\r\n-    position: 'relative',\r\n+    backgroundColor: \"#fff\",\r\n   },\r\n+  mapview: {\r\n+    flex: 1,\r\n+  },\r\n   overlayContainer: {\r\n     position: \"absolute\",\r\n     bottom: 0,\r\n     width: \"100%\",\r\n     alignItems: \"center\",\r\n-    zIndex: 10,\r\n   },\r\n   \r\n-  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\", backgroundColor: \"red\", height: height,},\r\n+  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\", backgroundColor: \"red\", height: height},\r\n   card: {\r\n     position: \"absolute\",\r\n     bottom: 75,\r\n     backgroundColor: \"#81C3E1\",\r\n"
                },
                {
                    "date": 1746359615212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,9 @@\n     width: \"100%\",\r\n     alignItems: \"center\",\r\n   },\r\n   \r\n-  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\", backgroundColor: \"red\", height: height},\r\n+  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\", height: height},\r\n   card: {\r\n     position: \"absolute\",\r\n     bottom: 75,\r\n     backgroundColor: \"#81C3E1\",\r\n"
                },
                {
                    "date": 1746359639957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,9 @@\n     width: \"100%\",\r\n     alignItems: \"center\",\r\n   },\r\n   \r\n-  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\", height: height},\r\n+  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\"},\r\n   card: {\r\n     position: \"absolute\",\r\n     bottom: 75,\r\n     backgroundColor: \"#81C3E1\",\r\n"
                },
                {
                    "date": 1746359648036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,9 @@\n     width: \"100%\",\r\n     alignItems: \"center\",\r\n   },\r\n   \r\n-  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\"},\r\n+  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\",height: height},\r\n   card: {\r\n     position: \"absolute\",\r\n     bottom: 75,\r\n     backgroundColor: \"#81C3E1\",\r\n"
                },
                {
                    "date": 1746359750988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,16 +68,8 @@\n \r\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n-  if (loading || !location) {\r\n-    return (\r\n-      <View style={styles.loadingContainer}>\r\n-        <Text style={{ fontSize: 20 }}>Loading Map...</Text>\r\n-      </View>\r\n-    );\r\n-  }\r\n-\r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       \r\n@@ -178,9 +170,8 @@\n     width: \"100%\",\r\n     alignItems: \"center\",\r\n   },\r\n   \r\n-  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\",height: height},\r\n   card: {\r\n     position: \"absolute\",\r\n     bottom: 75,\r\n     backgroundColor: \"#81C3E1\",\r\n"
                },
                {
                    "date": 1746359806238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,22 +72,20 @@\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       \r\n-      <View style={styles.mapview}>\r\n-        {mapHtml && (\r\n-          <WebView\r\n-            originWhitelist={[\"*\"]}\r\n-            source={{ html: mapHtml }}\r\n-            javaScriptEnabled={true}\r\n-            onMessage={(event) => {\r\n-              const data = JSON.parse(event.nativeEvent.data);\r\n-              setDestination(data);\r\n-            }}\r\n-            style={{ flex: 1 }}\r\n-          />\r\n-        )}\r\n-      </View>\r\n+      {mapHtml && (\r\n+        <WebView\r\n+          originWhitelist={[\"*\"]}\r\n+          source={{ html: mapHtml }}\r\n+          javaScriptEnabled\r\n+          onMessage={(event) => {\r\n+            const data = JSON.parse(event.nativeEvent.data);\r\n+            setDestination(data);\r\n+          }}\r\n+          style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n+        />\r\n+      )}\r\n \r\n       \r\n \r\n       {/* Floating Card */}\r\n"
                },
                {
                    "date": 1746359832318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,11 +158,8 @@\n   container: {\r\n     flex: 1,\r\n     backgroundColor: \"#fff\",\r\n   },\r\n-  mapview: {\r\n-    flex: 1,\r\n-  },\r\n   overlayContainer: {\r\n     position: \"absolute\",\r\n     bottom: 0,\r\n     width: \"100%\",\r\n"
                },
                {
                    "date": 1746359869314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,24 +68,34 @@\n \r\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n+  if (loading || !location) {\r\n+    return (\r\n+      <View style={styles.loadingContainer}>\r\n+        <Text style={{ fontSize: 20 }}>Loading Map...</Text>\r\n+      </View>\r\n+    );\r\n+  }\r\n+\r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       \r\n-      {mapHtml && (\r\n-        <WebView\r\n-          originWhitelist={[\"*\"]}\r\n-          source={{ html: mapHtml }}\r\n-          javaScriptEnabled\r\n-          onMessage={(event) => {\r\n-            const data = JSON.parse(event.nativeEvent.data);\r\n-            setDestination(data);\r\n-          }}\r\n-          style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n-        />\r\n-      )}\r\n+      <View style={styles.mapview}>\r\n+        {mapHtml && (\r\n+          <WebView\r\n+            originWhitelist={[\"*\"]}\r\n+            source={{ html: mapHtml }}\r\n+            javaScriptEnabled={true}\r\n+            onMessage={(event) => {\r\n+              const data = JSON.parse(event.nativeEvent.data);\r\n+              setDestination(data);\r\n+            }}\r\n+            style={{ flex: 1 }}\r\n+          />\r\n+        )}\r\n+      </View>\r\n \r\n       \r\n \r\n       {/* Floating Card */}\r\n@@ -158,15 +168,19 @@\n   container: {\r\n     flex: 1,\r\n     backgroundColor: \"#fff\",\r\n   },\r\n+  mapview: {\r\n+    flex: 1,\r\n+  },\r\n   overlayContainer: {\r\n     position: \"absolute\",\r\n     bottom: 0,\r\n     width: \"100%\",\r\n     alignItems: \"center\",\r\n   },\r\n   \r\n+  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\",height: height},\r\n   card: {\r\n     position: \"absolute\",\r\n     bottom: 75,\r\n     backgroundColor: \"#81C3E1\",\r\n"
                },
                {
                    "date": 1746359911422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,34 +68,24 @@\n \r\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n-  if (loading || !location) {\r\n-    return (\r\n-      <View style={styles.loadingContainer}>\r\n-        <Text style={{ fontSize: 20 }}>Loading Map...</Text>\r\n-      </View>\r\n-    );\r\n-  }\r\n-\r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n       \r\n-      <View style={styles.mapview}>\r\n-        {mapHtml && (\r\n-          <WebView\r\n-            originWhitelist={[\"*\"]}\r\n-            source={{ html: mapHtml }}\r\n-            javaScriptEnabled={true}\r\n-            onMessage={(event) => {\r\n-              const data = JSON.parse(event.nativeEvent.data);\r\n-              setDestination(data);\r\n-            }}\r\n-            style={{ flex: 1 }}\r\n-          />\r\n-        )}\r\n-      </View>\r\n+      {mapHtml && (\r\n+        <WebView\r\n+          originWhitelist={[\"*\"]}\r\n+          source={{ html: mapHtml }}\r\n+          javaScriptEnabled\r\n+          onMessage={(event) => {\r\n+            const data = JSON.parse(event.nativeEvent.data);\r\n+            setDestination(data);\r\n+          }}\r\n+          style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n+        />\r\n+      )}\r\n \r\n       \r\n \r\n       {/* Floating Card */}\r\n@@ -168,19 +158,15 @@\n   container: {\r\n     flex: 1,\r\n     backgroundColor: \"#fff\",\r\n   },\r\n-  mapview: {\r\n-    flex: 1,\r\n-  },\r\n   overlayContainer: {\r\n     position: \"absolute\",\r\n     bottom: 0,\r\n     width: \"100%\",\r\n     alignItems: \"center\",\r\n   },\r\n   \r\n-  loadingContainer: { flex: 1, justifyContent: \"center\", alignItems: \"center\",height: height},\r\n   card: {\r\n     position: \"absolute\",\r\n     bottom: 75,\r\n     backgroundColor: \"#81C3E1\",\r\n"
                },
                {
                    "date": 1746360057315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,13 +94,13 @@\n           <View style={styles.cardHeader} />\r\n \r\n           <TouchableOpacity style={styles.inputBox}>\r\n             <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-            {/* <Text style={styles.inputText}>\r\n+            <Text style={styles.inputText}>\r\n               {destination\r\n                 ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n                 : \"Saan ka papunta ngayon?\"}\r\n-            </Text> */}\r\n+            </Text>\r\n             <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n           </TouchableOpacity>\r\n \r\n           <TouchableOpacity style={styles.inputBox}>\r\n"
                },
                {
                    "date": 1746360633537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView\r\n+// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label\r\n \r\n import React, { useState, useEffect } from \"react\";\r\n import {\r\n   View,\r\n@@ -7,8 +7,9 @@\n   StyleSheet,\r\n   Dimensions,\r\n   TouchableOpacity,\r\n   StatusBar,\r\n+  TextInput,\r\n } from \"react-native\";\r\n import { WebView } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n@@ -18,8 +19,9 @@\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n   const [destination, setDestination] = useState(null);\r\n+  const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n \r\n   useEffect(() => {\r\n     if (!location) return;\r\n@@ -71,9 +73,9 @@\n \r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n-      \r\n+\r\n       {mapHtml && (\r\n         <WebView\r\n           originWhitelist={[\"*\"]}\r\n           source={{ html: mapHtml }}\r\n@@ -85,11 +87,8 @@\n           style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n         />\r\n       )}\r\n \r\n-      \r\n-\r\n-      {/* Floating Card */}\r\n       <View style={styles.overlayContainer}>\r\n         <View style={styles.card}>\r\n           <View style={styles.cardHeader} />\r\n \r\n@@ -102,13 +101,14 @@\n             </Text>\r\n             <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n           </TouchableOpacity>\r\n \r\n-          <TouchableOpacity style={styles.inputBox}>\r\n-            <MaterialIcons name=\"swap-vert\" size={20} color=\"#616161\" />\r\n-            <Text style={styles.inputText}>Saan ka ihahatid?</Text>\r\n-            <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-          </TouchableOpacity>\r\n+          <TextInput\r\n+            style={styles.inputBoxSimple}\r\n+            placeholder=\"Name this location (optional: Home, Work, etc.)\"\r\n+            value={destinationLabel}\r\n+            onChangeText={setDestinationLabel}\r\n+          />\r\n \r\n           <TouchableOpacity style={styles.inputBoxSimple}>\r\n             <MaterialIcons name=\"edit\" size={20} color=\"#616161\" />\r\n             <Text style={styles.inputText}>Notes sa driver</Text>\r\n@@ -148,9 +148,8 @@\n             <Text>Profile</Text>\r\n           </TouchableOpacity>\r\n         </View>\r\n       </View>\r\n-      \r\n     </View>\r\n   );\r\n }\r\n \r\n@@ -164,9 +163,8 @@\n     bottom: 0,\r\n     width: \"100%\",\r\n     alignItems: \"center\",\r\n   },\r\n-  \r\n   card: {\r\n     position: \"absolute\",\r\n     bottom: 75,\r\n     backgroundColor: \"#81C3E1\",\r\n"
                },
                {
                    "date": 1746361085621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n import { WebView } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n import API_BASE_URL from \"../../config\";\r\n+import OSRM_BASE_URL from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n"
                },
                {
                    "date": 1746361115298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n               if (routeLine) map.removeLayer(routeLine);\r\n \r\n               destMarker = L.marker([lat, lng]).addTo(map);\r\n \r\n-              const res = await fetch('${API_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n+              const res = await fetch(`${OSRM_BASE_URL}/route/v1/driving/${startLng},${startLat};${endLng},${endLat}?geometries=geojson`);\r\n               const data = await res.json();\r\n               const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n               routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n \r\n"
                },
                {
                    "date": 1746361238631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n               if (routeLine) map.removeLayer(routeLine);\r\n \r\n               destMarker = L.marker([lat, lng]).addTo(map);\r\n \r\n-              const res = await fetch(`${OSRM_BASE_URL}/route/v1/driving/${startLng},${startLat};${endLng},${endLat}?geometries=geojson`);\r\n+              const res = await fetch('` + OSRM_BASE_URL + `/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n               const data = await res.json();\r\n               const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n               routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n \r\n"
                },
                {
                    "date": 1746361947047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n } from \"react-native\";\r\n import { WebView } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n-import API_BASE_URL from \"../../config\";\r\n-import OSRM_BASE_URL from \"../../config\";\r\n+import {API_BASE_URL} from \"../../config\";\r\n+import {OSRM_BASE_URL} from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n@@ -57,8 +57,9 @@\n \r\n               destMarker = L.marker([lat, lng]).addTo(map);\r\n \r\n               const res = await fetch('` + OSRM_BASE_URL + `/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n+              console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n               const data = await res.json();\r\n               const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n               routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n \r\n"
                },
                {
                    "date": 1746361964609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n   const { location, loading } = useLocation();\r\n   const [destination, setDestination] = useState(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n+  console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n@@ -57,9 +58,8 @@\n \r\n               destMarker = L.marker([lat, lng]).addTo(map);\r\n \r\n               const res = await fetch('` + OSRM_BASE_URL + `/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n-              console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n               const data = await res.json();\r\n               const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n               routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n \r\n"
                },
                {
                    "date": 1746362001962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,8 @@\n   const [destination, setDestination] = useState(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n-\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n"
                },
                {
                    "date": 1746362012233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n } from \"react-native\";\r\n import { WebView } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n-import {API_BASE_URL} from \"../../config\";\r\n import {OSRM_BASE_URL} from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n"
                },
                {
                    "date": 1746362676423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label\r\n+// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label + Route on BOOK NOW\r\n \r\n import React, { useState, useEffect } from \"react\";\r\n import {\r\n   View,\r\n@@ -12,18 +12,20 @@\n } from \"react-native\";\r\n import { WebView } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n-import {OSRM_BASE_URL} from \"../../config\";\r\n+import { OSRM_BASE_URL } from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n   const [destination, setDestination] = useState(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n+  const [mapRef, setMapRef] = useState(null);\r\n+\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n-  console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n+\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n@@ -48,36 +50,51 @@\n \r\n             let destMarker = null;\r\n             let routeLine = null;\r\n \r\n-            map.on('click', async function(e) {\r\n+            map.on('click', function(e) {\r\n               const { lat, lng } = e.latlng;\r\n               if (destMarker) map.removeLayer(destMarker);\r\n               if (routeLine) map.removeLayer(routeLine);\r\n \r\n               destMarker = L.marker([lat, lng]).addTo(map);\r\n-\r\n-              const res = await fetch('` + OSRM_BASE_URL + `/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n-              const data = await res.json();\r\n-              const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n-              routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n-\r\n               window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n             });\r\n+\r\n+            window.addEventListener('message', async function(event) {\r\n+              const msg = JSON.parse(event.data);\r\n+              if (msg.type === 'drawRoute' && msg.destination) {\r\n+                const { latitude, longitude } = msg.destination;\r\n+                const res = await fetch('${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + longitude + ',' + latitude + '?geometries=geojson');\r\n+                const data = await res.json();\r\n+                const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n+                if (routeLine) map.removeLayer(routeLine);\r\n+                routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n+              }\r\n+            });\r\n           </script>\r\n         </body>\r\n       </html>\r\n     `;\r\n \r\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n+  const handleBookNow = () => {\r\n+    if (destination && mapRef) {\r\n+      mapRef.postMessage(\r\n+        JSON.stringify({ type: \"drawRoute\", destination })\r\n+      );\r\n+    }\r\n+  };\r\n+\r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n \r\n       {mapHtml && (\r\n         <WebView\r\n+          ref={(ref) => setMapRef(ref)}\r\n           originWhitelist={[\"*\"]}\r\n           source={{ html: mapHtml }}\r\n           javaScriptEnabled\r\n           onMessage={(event) => {\r\n@@ -123,9 +140,9 @@\n           <View style={styles.totalFareContainer}>\r\n             <View style={styles.fareBox}>\r\n               <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n             </View>\r\n-            <TouchableOpacity style={styles.bookNowButton}>\r\n+            <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n               <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n             </TouchableOpacity>\r\n           </View>\r\n         </View>\r\n"
                },
                {
                    "date": 1746362698540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label + Route on BOOK NOW\r\n+// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label\r\n \r\n import React, { useState, useEffect } from \"react\";\r\n import {\r\n   View,\r\n@@ -12,20 +12,18 @@\n } from \"react-native\";\r\n import { WebView } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n-import { OSRM_BASE_URL } from \"../../config\";\r\n+import {OSRM_BASE_URL} from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n   const [destination, setDestination] = useState(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n-  const [mapRef, setMapRef] = useState(null);\r\n-\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n-\r\n+  console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n@@ -50,51 +48,36 @@\n \r\n             let destMarker = null;\r\n             let routeLine = null;\r\n \r\n-            map.on('click', function(e) {\r\n+            map.on('click', async function(e) {\r\n               const { lat, lng } = e.latlng;\r\n               if (destMarker) map.removeLayer(destMarker);\r\n               if (routeLine) map.removeLayer(routeLine);\r\n \r\n               destMarker = L.marker([lat, lng]).addTo(map);\r\n+\r\n+              const res = await fetch('` + OSRM_BASE_URL + `/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n+              const data = await res.json();\r\n+              const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n+              routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n+\r\n               window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n             });\r\n-\r\n-            window.addEventListener('message', async function(event) {\r\n-              const msg = JSON.parse(event.data);\r\n-              if (msg.type === 'drawRoute' && msg.destination) {\r\n-                const { latitude, longitude } = msg.destination;\r\n-                const res = await fetch('${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + longitude + ',' + latitude + '?geometries=geojson');\r\n-                const data = await res.json();\r\n-                const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n-                if (routeLine) map.removeLayer(routeLine);\r\n-                routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n-              }\r\n-            });\r\n           </script>\r\n         </body>\r\n       </html>\r\n     `;\r\n \r\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n-  const handleBookNow = () => {\r\n-    if (destination && mapRef) {\r\n-      mapRef.postMessage(\r\n-        JSON.stringify({ type: \"drawRoute\", destination })\r\n-      );\r\n-    }\r\n-  };\r\n-\r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n \r\n       {mapHtml && (\r\n         <WebView\r\n-          ref={(ref) => setMapRef(ref)}\r\n           originWhitelist={[\"*\"]}\r\n           source={{ html: mapHtml }}\r\n           javaScriptEnabled\r\n           onMessage={(event) => {\r\n@@ -140,9 +123,9 @@\n           <View style={styles.totalFareContainer}>\r\n             <View style={styles.fareBox}>\r\n               <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n             </View>\r\n-            <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n+            <TouchableOpacity style={styles.bookNowButton}>\r\n               <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n             </TouchableOpacity>\r\n           </View>\r\n         </View>\r\n"
                },
                {
                    "date": 1746362725857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n } from \"react-native\";\r\n import { WebView } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n+import {API_BASE_URL} from \"../../config\";\r\n import {OSRM_BASE_URL} from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n"
                },
                {
                    "date": 1746364002875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,244 @@\n+// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label\r\n+\r\n+import React, { useState, useEffect } from \"react\";\r\n+import {\r\n+  View,\r\n+  Text,\r\n+  StyleSheet,\r\n+  Dimensions,\r\n+  TouchableOpacity,\r\n+  StatusBar,\r\n+  TextInput,\r\n+} from \"react-native\";\r\n+import { WebView } from \"react-native-webview\";\r\n+import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n+import { useLocation } from \"../location/GlobalLocation\";\r\n+import {API_BASE_URL} from \"../../config\";\r\n+import {OSRM_BASE_URL} from \"../../config\";\r\n+\r\n+const { width, height } = Dimensions.get(\"window\");\r\n+\r\n+export default function PHome() {\r\n+  const { location, loading } = useLocation();\r\n+  const [destination, setDestination] = useState(null);\r\n+  const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n+  const [mapHtml, setMapHtml] = useState(\"\");\r\n+  const [mapRef, setMapRef] = useState(null);\r\n+\r\n+  console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n+  \r\n+  useEffect(() => {\r\n+    if (!location) return;\r\n+\r\n+    const html = `\r\n+      <!DOCTYPE html>\r\n+      <html>\r\n+        <head>\r\n+          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n+          <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n+          <style> html, body, #map { height: 100%; margin: 0; padding: 0; } </style>\r\n+        </head>\r\n+        <body>\r\n+          <div id=\"map\"></div>\r\n+          <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n+          <script>\r\n+            const map = L.map('map').setView([${location.latitude}, ${location.longitude}], 15);\r\n+            L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n+              maxZoom: 19,\r\n+              attribution: '© OpenStreetMap contributors'\r\n+            }).addTo(map);\r\n+\r\n+            const startMarker = L.marker([${location.latitude}, ${location.longitude}]).addTo(map);\r\n+\r\n+            let destMarker = null;\r\n+            let routeLine = null;\r\n+\r\n+            map.on('click', async function(e) {\r\n+              const { lat, lng } = e.latlng;\r\n+              if (destMarker) map.removeLayer(destMarker);\r\n+              if (routeLine) map.removeLayer(routeLine);\r\n+\r\n+              destMarker = L.marker([lat, lng]).addTo(map);\r\n+\r\n+              const res = await fetch('` + OSRM_BASE_URL + `/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n+              const data = await res.json();\r\n+              const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n+              routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n+\r\n+              window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n+            });\r\n+          </script>\r\n+        </body>\r\n+      </html>\r\n+    `;\r\n+\r\n+    setMapHtml(html);\r\n+  }, [location]);\r\n+\r\n+  return (\r\n+    <View style={styles.container}>\r\n+      <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n+\r\n+      {mapHtml && (\r\n+        <WebView\r\n+          originWhitelist={[\"*\"]}\r\n+          source={{ html: mapHtml }}\r\n+          javaScriptEnabled\r\n+          onMessage={(event) => {\r\n+            const data = JSON.parse(event.nativeEvent.data);\r\n+            setDestination(data);\r\n+          }}\r\n+          style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n+        />\r\n+      )}\r\n+\r\n+      <View style={styles.overlayContainer}>\r\n+        <View style={styles.card}>\r\n+          <View style={styles.cardHeader} />\r\n+\r\n+          <TouchableOpacity style={styles.inputBox}>\r\n+            <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n+            <Text style={styles.inputText}>\r\n+              {destination && destination.latitude && destination.longitude\r\n+                ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n+                : \"Saan ka papunta ngayon?\"}\r\n+            </Text>\r\n+            <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+          </TouchableOpacity>\r\n+\r\n+          <TextInput\r\n+            style={styles.inputBoxSimple}\r\n+            placeholder=\"Name this location (optional: Home, Work, etc.)\"\r\n+            value={destinationLabel}\r\n+            onChangeText={setDestinationLabel}\r\n+          />\r\n+\r\n+          <TouchableOpacity style={styles.inputBoxSimple}>\r\n+            <MaterialIcons name=\"edit\" size={20} color=\"#616161\" />\r\n+            <Text style={styles.inputText}>Notes sa driver</Text>\r\n+          </TouchableOpacity>\r\n+\r\n+          <TouchableOpacity style={styles.inputBox}>\r\n+            <MaterialIcons name=\"payments\" size={20} color=\"#616161\" />\r\n+            <Text style={styles.inputText}>Paano ka magbabayad</Text>\r\n+            <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+          </TouchableOpacity>\r\n+\r\n+          <View style={styles.totalFareContainer}>\r\n+            <View style={styles.fareBox}>\r\n+              <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n+            </View>\r\n+            <TouchableOpacity style={styles.bookNowButton}>\r\n+              <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n+            </TouchableOpacity>\r\n+          </View>\r\n+        </View>\r\n+\r\n+        <View style={styles.bottomNav}>\r\n+          <TouchableOpacity>\r\n+            <Ionicons name=\"home\" size={30} color=\"black\" />\r\n+            <Text>Home</Text>\r\n+          </TouchableOpacity>\r\n+          <TouchableOpacity>\r\n+            <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n+            <Text>History</Text>\r\n+          </TouchableOpacity>\r\n+          <TouchableOpacity>\r\n+            <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n+            <Text>Chats</Text>\r\n+          </TouchableOpacity>\r\n+          <TouchableOpacity>\r\n+            <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n+            <Text>Profile</Text>\r\n+          </TouchableOpacity>\r\n+        </View>\r\n+      </View>\r\n+    </View>\r\n+  );\r\n+}\r\n+\r\n+const styles = StyleSheet.create({\r\n+  container: {\r\n+    flex: 1,\r\n+    backgroundColor: \"#fff\",\r\n+  },\r\n+  overlayContainer: {\r\n+    position: \"absolute\",\r\n+    bottom: 0,\r\n+    width: \"100%\",\r\n+    alignItems: \"center\",\r\n+  },\r\n+  card: {\r\n+    position: \"absolute\",\r\n+    bottom: 75,\r\n+    backgroundColor: \"#81C3E1\",\r\n+    width: width * 0.95,\r\n+    alignSelf: \"center\",\r\n+    borderRadius: 10,\r\n+    padding: 10,\r\n+  },\r\n+  cardHeader: {\r\n+    width: 150,\r\n+    height: 4,\r\n+    backgroundColor: \"black\",\r\n+    alignSelf: \"center\",\r\n+    borderRadius: 5,\r\n+    marginBottom: 10,\r\n+  },\r\n+  inputBox: {\r\n+    backgroundColor: \"white\",\r\n+    borderRadius: 8,\r\n+    flexDirection: \"row\",\r\n+    alignItems: \"center\",\r\n+    justifyContent: \"space-between\",\r\n+    paddingHorizontal: 10,\r\n+    height: 40,\r\n+    marginBottom: 5,\r\n+  },\r\n+  inputBoxSimple: {\r\n+    backgroundColor: \"white\",\r\n+    borderRadius: 8,\r\n+    flexDirection: \"row\",\r\n+    alignItems: \"center\",\r\n+    paddingHorizontal: 10,\r\n+    height: 40,\r\n+    marginBottom: 5,\r\n+  },\r\n+  inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n+  totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n+  fareBox: {\r\n+    flex: 1,\r\n+    borderRadius: 3,\r\n+    backgroundColor: \"white\",\r\n+    justifyContent: \"center\",\r\n+    paddingHorizontal: 5,\r\n+    marginRight: 5,\r\n+    width: '50%',\r\n+  },\r\n+  totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n+  bookNowButton: {\r\n+    flex: 1,\r\n+    backgroundColor: \"white\",\r\n+    borderRadius: 8,\r\n+    alignItems: \"center\",\r\n+    justifyContent: \"center\",\r\n+    padding: 5,\r\n+    marginLeft: 5,\r\n+    width: '50%',\r\n+  },\r\n+  bookNowText: { fontSize: 16 },\r\n+  bottomNav: {\r\n+    position: \"absolute\",\r\n+    bottom: 0,\r\n+    flexDirection: \"row\",\r\n+    justifyContent: \"space-around\",\r\n+    width: width,\r\n+    height: 70,\r\n+    backgroundColor: \"white\",\r\n+    borderTopLeftRadius: 30,\r\n+    borderTopRightRadius: 30,\r\n+    alignItems: \"center\",\r\n+    borderWidth: 1,\r\n+    borderColor: \"black\",\r\n+  },\r\n+});\r\n"
                },
                {
                    "date": 1746364020247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,9 @@\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n \r\n       {mapHtml && (\r\n         <WebView\r\n+          ref={(ref) => setMapRef(ref)}\r\n           originWhitelist={[\"*\"]}\r\n           source={{ html: mapHtml }}\r\n           javaScriptEnabled\r\n           onMessage={(event) => {\r\n@@ -241,245 +242,4 @@\n     borderWidth: 1,\r\n     borderColor: \"black\",\r\n   },\r\n });\r\n-// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label\r\n-\r\n-import React, { useState, useEffect } from \"react\";\r\n-import {\r\n-  View,\r\n-  Text,\r\n-  StyleSheet,\r\n-  Dimensions,\r\n-  TouchableOpacity,\r\n-  StatusBar,\r\n-  TextInput,\r\n-} from \"react-native\";\r\n-import { WebView } from \"react-native-webview\";\r\n-import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n-import { useLocation } from \"../location/GlobalLocation\";\r\n-import {API_BASE_URL} from \"../../config\";\r\n-import {OSRM_BASE_URL} from \"../../config\";\r\n-\r\n-const { width, height } = Dimensions.get(\"window\");\r\n-\r\n-export default function PHome() {\r\n-  const { location, loading } = useLocation();\r\n-  const [destination, setDestination] = useState(null);\r\n-  const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n-  const [mapHtml, setMapHtml] = useState(\"\");\r\n-  console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n-  useEffect(() => {\r\n-    if (!location) return;\r\n-\r\n-    const html = `\r\n-      <!DOCTYPE html>\r\n-      <html>\r\n-        <head>\r\n-          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n-          <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n-          <style> html, body, #map { height: 100%; margin: 0; padding: 0; } </style>\r\n-        </head>\r\n-        <body>\r\n-          <div id=\"map\"></div>\r\n-          <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n-          <script>\r\n-            const map = L.map('map').setView([${location.latitude}, ${location.longitude}], 15);\r\n-            L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n-              maxZoom: 19,\r\n-              attribution: '© OpenStreetMap contributors'\r\n-            }).addTo(map);\r\n-\r\n-            const startMarker = L.marker([${location.latitude}, ${location.longitude}]).addTo(map);\r\n-\r\n-            let destMarker = null;\r\n-            let routeLine = null;\r\n-\r\n-            map.on('click', async function(e) {\r\n-              const { lat, lng } = e.latlng;\r\n-              if (destMarker) map.removeLayer(destMarker);\r\n-              if (routeLine) map.removeLayer(routeLine);\r\n-\r\n-              destMarker = L.marker([lat, lng]).addTo(map);\r\n-\r\n-              const res = await fetch('` + OSRM_BASE_URL + `/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n-              const data = await res.json();\r\n-              const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n-              routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n-\r\n-              window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n-            });\r\n-          </script>\r\n-        </body>\r\n-      </html>\r\n-    `;\r\n-\r\n-    setMapHtml(html);\r\n-  }, [location]);\r\n-\r\n-  return (\r\n-    <View style={styles.container}>\r\n-      <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n-\r\n-      {mapHtml && (\r\n-        <WebView\r\n-          originWhitelist={[\"*\"]}\r\n-          source={{ html: mapHtml }}\r\n-          javaScriptEnabled\r\n-          onMessage={(event) => {\r\n-            const data = JSON.parse(event.nativeEvent.data);\r\n-            setDestination(data);\r\n-          }}\r\n-          style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n-        />\r\n-      )}\r\n-\r\n-      <View style={styles.overlayContainer}>\r\n-        <View style={styles.card}>\r\n-          <View style={styles.cardHeader} />\r\n-\r\n-          <TouchableOpacity style={styles.inputBox}>\r\n-            <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-            <Text style={styles.inputText}>\r\n-              {destination\r\n-                ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n-                : \"Saan ka papunta ngayon?\"}\r\n-            </Text>\r\n-            <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-          </TouchableOpacity>\r\n-\r\n-          <TextInput\r\n-            style={styles.inputBoxSimple}\r\n-            placeholder=\"Name this location (optional: Home, Work, etc.)\"\r\n-            value={destinationLabel}\r\n-            onChangeText={setDestinationLabel}\r\n-          />\r\n-\r\n-          <TouchableOpacity style={styles.inputBoxSimple}>\r\n-            <MaterialIcons name=\"edit\" size={20} color=\"#616161\" />\r\n-            <Text style={styles.inputText}>Notes sa driver</Text>\r\n-          </TouchableOpacity>\r\n-\r\n-          <TouchableOpacity style={styles.inputBox}>\r\n-            <MaterialIcons name=\"payments\" size={20} color=\"#616161\" />\r\n-            <Text style={styles.inputText}>Paano ka magbabayad</Text>\r\n-            <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-          </TouchableOpacity>\r\n-\r\n-          <View style={styles.totalFareContainer}>\r\n-            <View style={styles.fareBox}>\r\n-              <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n-            </View>\r\n-            <TouchableOpacity style={styles.bookNowButton}>\r\n-              <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n-            </TouchableOpacity>\r\n-          </View>\r\n-        </View>\r\n-\r\n-        <View style={styles.bottomNav}>\r\n-          <TouchableOpacity>\r\n-            <Ionicons name=\"home\" size={30} color=\"black\" />\r\n-            <Text>Home</Text>\r\n-          </TouchableOpacity>\r\n-          <TouchableOpacity>\r\n-            <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n-            <Text>History</Text>\r\n-          </TouchableOpacity>\r\n-          <TouchableOpacity>\r\n-            <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n-            <Text>Chats</Text>\r\n-          </TouchableOpacity>\r\n-          <TouchableOpacity>\r\n-            <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n-            <Text>Profile</Text>\r\n-          </TouchableOpacity>\r\n-        </View>\r\n-      </View>\r\n-    </View>\r\n-  );\r\n-}\r\n-\r\n-const styles = StyleSheet.create({\r\n-  container: {\r\n-    flex: 1,\r\n-    backgroundColor: \"#fff\",\r\n-  },\r\n-  overlayContainer: {\r\n-    position: \"absolute\",\r\n-    bottom: 0,\r\n-    width: \"100%\",\r\n-    alignItems: \"center\",\r\n-  },\r\n-  card: {\r\n-    position: \"absolute\",\r\n-    bottom: 75,\r\n-    backgroundColor: \"#81C3E1\",\r\n-    width: width * 0.95,\r\n-    alignSelf: \"center\",\r\n-    borderRadius: 10,\r\n-    padding: 10,\r\n-  },\r\n-  cardHeader: {\r\n-    width: 150,\r\n-    height: 4,\r\n-    backgroundColor: \"black\",\r\n-    alignSelf: \"center\",\r\n-    borderRadius: 5,\r\n-    marginBottom: 10,\r\n-  },\r\n-  inputBox: {\r\n-    backgroundColor: \"white\",\r\n-    borderRadius: 8,\r\n-    flexDirection: \"row\",\r\n-    alignItems: \"center\",\r\n-    justifyContent: \"space-between\",\r\n-    paddingHorizontal: 10,\r\n-    height: 40,\r\n-    marginBottom: 5,\r\n-  },\r\n-  inputBoxSimple: {\r\n-    backgroundColor: \"white\",\r\n-    borderRadius: 8,\r\n-    flexDirection: \"row\",\r\n-    alignItems: \"center\",\r\n-    paddingHorizontal: 10,\r\n-    height: 40,\r\n-    marginBottom: 5,\r\n-  },\r\n-  inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n-  totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n-  fareBox: {\r\n-    flex: 1,\r\n-    borderRadius: 3,\r\n-    backgroundColor: \"white\",\r\n-    justifyContent: \"center\",\r\n-    paddingHorizontal: 5,\r\n-    marginRight: 5,\r\n-    width: '50%',\r\n-  },\r\n-  totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n-  bookNowButton: {\r\n-    flex: 1,\r\n-    backgroundColor: \"white\",\r\n-    borderRadius: 8,\r\n-    alignItems: \"center\",\r\n-    justifyContent: \"center\",\r\n-    padding: 5,\r\n-    marginLeft: 5,\r\n-    width: '50%',\r\n-  },\r\n-  bookNowText: { fontSize: 16 },\r\n-  bottomNav: {\r\n-    position: \"absolute\",\r\n-    bottom: 0,\r\n-    flexDirection: \"row\",\r\n-    justifyContent: \"space-around\",\r\n-    width: width,\r\n-    height: 70,\r\n-    backgroundColor: \"white\",\r\n-    borderTopLeftRadius: 30,\r\n-    borderTopRightRadius: 30,\r\n-    alignItems: \"center\",\r\n-    borderWidth: 1,\r\n-    borderColor: \"black\",\r\n-  },\r\n-});\r\n"
                },
                {
                    "date": 1746364062383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,18 @@\n     `;\r\n \r\n     setMapHtml(html);\r\n   }, [location]);\r\n+  const handleBookNow = () => {\r\n+    if (destination && mapRef) {\r\n+      mapRef.postMessage(\r\n+        JSON.stringify({\r\n+          type: \"drawRoute\",\r\n+          destination: destination\r\n+        })\r\n+      );\r\n+    }\r\n+  };\r\n \r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n"
                },
                {
                    "date": 1746365774070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label\r\n+// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label + Route on BOOK NOW\r\n \r\n import React, { useState, useEffect } from \"react\";\r\n import {\r\n   View,\r\n@@ -12,22 +12,19 @@\n } from \"react-native\";\r\n import { WebView } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n-import {API_BASE_URL} from \"../../config\";\r\n-import {OSRM_BASE_URL} from \"../../config\";\r\n+import { API_BASE_URL, OSRM_BASE_URL } from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n   const [destination, setDestination] = useState(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n+  const [mapRef, setMapRef] = useState(null);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n-  const [mapRef, setMapRef] = useState(null);\r\n \r\n-  console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n-  \r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n@@ -52,36 +49,40 @@\n \r\n             let destMarker = null;\r\n             let routeLine = null;\r\n \r\n-            map.on('click', async function(e) {\r\n+            map.on('click', function(e) {\r\n               const { lat, lng } = e.latlng;\r\n               if (destMarker) map.removeLayer(destMarker);\r\n               if (routeLine) map.removeLayer(routeLine);\r\n \r\n               destMarker = L.marker([lat, lng]).addTo(map);\r\n-\r\n-              const res = await fetch('` + OSRM_BASE_URL + `/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n-              const data = await res.json();\r\n-              const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n-              routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n-\r\n               window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n             });\r\n+\r\n+            window.addEventListener('message', async function(event) {\r\n+              const msg = JSON.parse(event.data);\r\n+              if (msg.type === 'drawRoute' && msg.destination) {\r\n+                const { latitude, longitude } = msg.destination;\r\n+                const res = await fetch('${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + longitude + ',' + latitude + '?geometries=geojson');\r\n+                const data = await res.json();\r\n+                const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n+                if (routeLine) map.removeLayer(routeLine);\r\n+                routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n+              }\r\n+            });\r\n           </script>\r\n         </body>\r\n       </html>\r\n     `;\r\n \r\n     setMapHtml(html);\r\n   }, [location]);\r\n+\r\n   const handleBookNow = () => {\r\n     if (destination && mapRef) {\r\n       mapRef.postMessage(\r\n-        JSON.stringify({\r\n-          type: \"drawRoute\",\r\n-          destination: destination\r\n-        })\r\n+        JSON.stringify({ type: \"drawRoute\", destination })\r\n       );\r\n     }\r\n   };\r\n \r\n@@ -138,9 +139,9 @@\n           <View style={styles.totalFareContainer}>\r\n             <View style={styles.fareBox}>\r\n               <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n             </View>\r\n-            <TouchableOpacity style={styles.bookNowButton}>\r\n+            <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n               <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n             </TouchableOpacity>\r\n           </View>\r\n         </View>\r\n"
                },
                {
                    "date": 1746366081733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,18 +12,18 @@\n } from \"react-native\";\r\n import { WebView } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n-import { API_BASE_URL, OSRM_BASE_URL } from \"../../config\";\r\n+import { OSRM_BASE_URL } from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n   const [destination, setDestination] = useState(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n+  const [mapHtml, setMapHtml] = useState(\"\");\r\n   const [mapRef, setMapRef] = useState(null);\r\n-  const [mapHtml, setMapHtml] = useState(\"\");\r\n \r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n@@ -53,9 +53,8 @@\n             map.on('click', function(e) {\r\n               const { lat, lng } = e.latlng;\r\n               if (destMarker) map.removeLayer(destMarker);\r\n               if (routeLine) map.removeLayer(routeLine);\r\n-\r\n               destMarker = L.marker([lat, lng]).addTo(map);\r\n               window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n             });\r\n \r\n"
                },
                {
                    "date": 1746366337064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n-  const [destination, setDestination] = useState(null);\r\n+  const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const [mapRef, setMapRef] = useState(null);\r\n \r\n"
                },
                {
                    "date": 1746366401477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,10 @@\n   TouchableOpacity,\r\n   StatusBar,\r\n   TextInput,\r\n } from \"react-native\";\r\n-import { WebView } from \"react-native-webview\";\r\n+import { WebViewMessageEvent, WebView } from \"react-native-webview\";\r\n+import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n import { OSRM_BASE_URL } from \"../../config\";\r\n \r\n"
                },
                {
                    "date": 1746366418260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   const { location, loading } = useLocation();\r\n   const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n-  const [mapRef, setMapRef] = useState(null);\r\n+  const [mapRef, setMapRef] = useState<WebViewType | null>(null);\r\n \r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n"
                },
                {
                    "date": 1746366679485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,11 @@\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n \r\n       {mapHtml && (\r\n         <WebView\r\n-          ref={(ref) => setMapRef(ref)}\r\n+          ref={(ref) => {\r\n+            if (ref && !mapRef) setMapRef(ref);\r\n+          }}\r\n           originWhitelist={[\"*\"]}\r\n           source={{ html: mapHtml }}\r\n           javaScriptEnabled\r\n           onMessage={(event) => {\r\n"
                },
                {
                    "date": 1746366914149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,23 @@\n             let destMarker = null;\r\n             let routeLine = null;\r\n \r\n             map.on('click', function(e) {\r\n+              try {\r\n+              const res = await fetch('http://${OSRM_BASE_URL}/route/v1/driving/...');\r\n+              const data = await res.json();\r\n+\r\n+              if (data.code !== \"Ok\" || !data.routes || data.routes.length === 0) {\r\n+                alert(\"OSRM: No route found.\");\r\n+                return;\r\n+              }\r\n+\r\n+              const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n+              routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n+            } catch (err) {\r\n+              alert(\"OSRM Error: \" + err.message);\r\n+              console.error(err);\r\n+            }\r\n               const { lat, lng } = e.latlng;\r\n               if (destMarker) map.removeLayer(destMarker);\r\n               if (routeLine) map.removeLayer(routeLine);\r\n               destMarker = L.marker([lat, lng]).addTo(map);\r\n"
                },
                {
                    "date": 1746366961691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,23 +51,9 @@\n             let destMarker = null;\r\n             let routeLine = null;\r\n \r\n             map.on('click', function(e) {\r\n-              try {\r\n-              const res = await fetch('http://${OSRM_BASE_URL}/route/v1/driving/...');\r\n-              const data = await res.json();\r\n-\r\n-              if (data.code !== \"Ok\" || !data.routes || data.routes.length === 0) {\r\n-                alert(\"OSRM: No route found.\");\r\n-                return;\r\n-              }\r\n-\r\n-              const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n-              routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n-            } catch (err) {\r\n-              alert(\"OSRM Error: \" + err.message);\r\n-              console.error(err);\r\n-            }\r\n+            \r\n               const { lat, lng } = e.latlng;\r\n               if (destMarker) map.removeLayer(destMarker);\r\n               if (routeLine) map.removeLayer(routeLine);\r\n               destMarker = L.marker([lat, lng]).addTo(map);\r\n"
                },
                {
                    "date": 1746366993167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,17 +50,36 @@\n \r\n             let destMarker = null;\r\n             let routeLine = null;\r\n \r\n-            map.on('click', function(e) {\r\n-            \r\n+            map.on('click', async function(e) {\r\n               const { lat, lng } = e.latlng;\r\n+\r\n               if (destMarker) map.removeLayer(destMarker);\r\n               if (routeLine) map.removeLayer(routeLine);\r\n+\r\n               destMarker = L.marker([lat, lng]).addTo(map);\r\n+\r\n+              try {\r\n+                const res = await fetch('${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n+                const data = await res.json();\r\n+\r\n+                if (data.code !== \"Ok\" || !data.routes || data.routes.length === 0) {\r\n+                  alert(\"OSRM: No route found.\");\r\n+                  return;\r\n+                }\r\n+\r\n+                const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n+                routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n+              } catch (err) {\r\n+                alert(\"OSRM Error: \" + err.message);\r\n+                console.error(err);\r\n+              }\r\n+\r\n               window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n             });\r\n \r\n+\r\n             window.addEventListener('message', async function(event) {\r\n               const msg = JSON.parse(event.data);\r\n               if (msg.type === 'drawRoute' && msg.destination) {\r\n                 const { latitude, longitude } = msg.destination;\r\n"
                },
                {
                    "date": 1746367141339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n \r\n               destMarker = L.marker([lat, lng]).addTo(map);\r\n \r\n               try {\r\n+                console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n                 const res = await fetch('${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n                 const data = await res.json();\r\n \r\n                 if (data.code !== \"Ok\" || !data.routes || data.routes.length === 0) {\r\n"
                },
                {
                    "date": 1746367164527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n   const [mapRef, setMapRef] = useState<WebViewType | null>(null);\r\n \r\n   useEffect(() => {\r\n     if (!location) return;\r\n+    console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n     const html = `\r\n       <!DOCTYPE html>\r\n       <html>\r\n@@ -59,9 +60,9 @@\n \r\n               destMarker = L.marker([lat, lng]).addTo(map);\r\n \r\n               try {\r\n-                console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n+                \r\n                 const res = await fetch('${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n                 const data = await res.json();\r\n \r\n                 if (data.code !== \"Ok\" || !data.routes || data.routes.length === 0) {\r\n"
                },
                {
                    "date": 1746367171333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,12 +23,12 @@\n   const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const [mapRef, setMapRef] = useState<WebViewType | null>(null);\r\n+  console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n   useEffect(() => {\r\n     if (!location) return;\r\n-    console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n     const html = `\r\n       <!DOCTYPE html>\r\n       <html>\r\n"
                },
                {
                    "date": 1746368039320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label + Route on BOOK NOW\r\n-\r\n import React, { useState, useEffect } from \"react\";\r\n import {\r\n   View,\r\n   Text,\r\n"
                },
                {
                    "date": 1746368312337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,13 +82,30 @@\n             window.addEventListener('message', async function(event) {\r\n               const msg = JSON.parse(event.data);\r\n               if (msg.type === 'drawRoute' && msg.destination) {\r\n                 const { latitude, longitude } = msg.destination;\r\n-                const res = await fetch('${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + longitude + ',' + latitude + '?geometries=geojson');\r\n-                const data = await res.json();\r\n-                const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n-                if (routeLine) map.removeLayer(routeLine);\r\n-                routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n+\r\n+                // 🔍 Add debug messages here:\r\n+                alert(\"Drawing route to: \" + latitude + \", \" + longitude);\r\n+                console.log(\"Drawing route to:\", latitude, longitude);\r\n+                console.log(\"Fetching from:\", '${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + longitude + ',' + latitude + '?geometries=geojson');\r\n+\r\n+                try {\r\n+                  const res = await fetch('${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + longitude + ',' + latitude + '?geometries=geojson');\r\n+                  const data = await res.json();\r\n+\r\n+                  if (!data.routes || data.routes.length === 0) {\r\n+                    alert(\"OSRM: No route found.\");\r\n+                    return;\r\n+                  }\r\n+\r\n+                  const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n+                  if (routeLine) map.removeLayer(routeLine);\r\n+                  routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n+                } catch (err) {\r\n+                  alert(\"OSRM Error in drawRoute: \" + err.message);\r\n+                  console.error(err);\r\n+                }\r\n               }\r\n             });\r\n           </script>\r\n         </body>\r\n"
                },
                {
                    "date": 1746368507665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,11 @@\n     if (destination && mapRef) {\r\n       mapRef.postMessage(\r\n         JSON.stringify({ type: \"drawRoute\", destination })\r\n       );\r\n+      console.log(\"📤 Sent drawRoute message to WebView:\", destination);\r\n+    } else {\r\n+      console.warn(\"❌ No destination or mapRef available.\");\r\n     }\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1746368631970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,10 @@\n         <body>\r\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n           <script>\r\n+            const userLat = ${location.latitude};\r\n+            const userLng = ${location.longitude};\r\n             const map = L.map('map').setView([${location.latitude}, ${location.longitude}], 15);\r\n             L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n               maxZoom: 19,\r\n               attribution: '© OpenStreetMap contributors'\r\n"
                },
                {
                    "date": 1746368785055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,60 +40,38 @@\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n           <script>\r\n             const userLat = ${location.latitude};\r\n             const userLng = ${location.longitude};\r\n-            const map = L.map('map').setView([${location.latitude}, ${location.longitude}], 15);\r\n+\r\n+            const map = L.map('map').setView([userLat, userLng], 15);\r\n             L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n               maxZoom: 19,\r\n               attribution: '© OpenStreetMap contributors'\r\n             }).addTo(map);\r\n \r\n-            const startMarker = L.marker([${location.latitude}, ${location.longitude}]).addTo(map);\r\n-\r\n+            const startMarker = L.marker([userLat, userLng]).addTo(map);\r\n             let destMarker = null;\r\n             let routeLine = null;\r\n \r\n             map.on('click', async function(e) {\r\n               const { lat, lng } = e.latlng;\r\n-\r\n               if (destMarker) map.removeLayer(destMarker);\r\n               if (routeLine) map.removeLayer(routeLine);\r\n \r\n               destMarker = L.marker([lat, lng]).addTo(map);\r\n-\r\n-              try {\r\n-                \r\n-                const res = await fetch('${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + lng + ',' + lat + '?geometries=geojson');\r\n-                const data = await res.json();\r\n-\r\n-                if (data.code !== \"Ok\" || !data.routes || data.routes.length === 0) {\r\n-                  alert(\"OSRM: No route found.\");\r\n-                  return;\r\n-                }\r\n-\r\n-                const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n-                routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n-              } catch (err) {\r\n-                alert(\"OSRM Error: \" + err.message);\r\n-                console.error(err);\r\n-              }\r\n-\r\n               window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n             });\r\n \r\n-\r\n             window.addEventListener('message', async function(event) {\r\n               const msg = JSON.parse(event.data);\r\n               if (msg.type === 'drawRoute' && msg.destination) {\r\n                 const { latitude, longitude } = msg.destination;\r\n \r\n-                // 🔍 Add debug messages here:\r\n-                alert(\"Drawing route to: \" + latitude + \", \" + longitude);\r\n-                console.log(\"Drawing route to:\", latitude, longitude);\r\n-                console.log(\"Fetching from:\", '${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + longitude + ',' + latitude + '?geometries=geojson');\r\n+                alert(\"📍 Drawing route to: \" + latitude + \", \" + longitude);\r\n+                console.log(\"Fetching from:\", '${OSRM_BASE_URL}/route/v1/driving/' + userLng + ',' + userLat + ';' + longitude + ',' + latitude + '?geometries=geojson');\r\n \r\n                 try {\r\n-                  const res = await fetch('${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};' + longitude + ',' + latitude + '?geometries=geojson');\r\n+                  const res = await fetch('${OSRM_BASE_URL}/route/v1/driving/' + userLng + ',' + userLat + ';' + longitude + ',' + latitude + '?geometries=geojson');\r\n                   const data = await res.json();\r\n \r\n                   if (!data.routes || data.routes.length === 0) {\r\n                     alert(\"OSRM: No route found.\");\r\n@@ -111,10 +89,11 @@\n             });\r\n           </script>\r\n         </body>\r\n       </html>\r\n-    `;\r\n+      `;\r\n \r\n+\r\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n   const handleBookNow = () => {\r\n"
                },
                {
                    "date": 1746368913629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,16 +97,22 @@\n   }, [location]);\r\n \r\n   const handleBookNow = () => {\r\n     if (destination && mapRef) {\r\n-      mapRef.postMessage(\r\n-        JSON.stringify({ type: \"drawRoute\", destination })\r\n-      );\r\n-      console.log(\"📤 Sent drawRoute message to WebView:\", destination);\r\n-    } else {\r\n-      console.warn(\"❌ No destination or mapRef available.\");\r\n+      const message = JSON.stringify({\r\n+        type: \"drawRoute\",\r\n+        destination,\r\n+      });\r\n+  \r\n+      console.log(\"📤 Sent drawRoute message to WebView:\", message);\r\n+  \r\n+      // Send after 300ms to ensure WebView loaded and message listener is ready\r\n+      setTimeout(() => {\r\n+        mapRef.postMessage(message);\r\n+      }, 300);\r\n     }\r\n   };\r\n+  \r\n \r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n"
                },
                {
                    "date": 1746369287728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label + Native Fetch on BOOK NOW\r\n+\r\n import React, { useState, useEffect } from \"react\";\r\n import {\r\n   View,\r\n   Text,\r\n@@ -6,24 +8,23 @@\n   Dimensions,\r\n   TouchableOpacity,\r\n   StatusBar,\r\n   TextInput,\r\n+  Alert,\r\n } from \"react-native\";\r\n-import { WebViewMessageEvent, WebView } from \"react-native-webview\";\r\n-import type { WebView as WebViewType } from \"react-native-webview\";\r\n+import { WebView } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n import { OSRM_BASE_URL } from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n-  const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n+  const [destination, setDestination] = useState(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n+  const [mapRef, setMapRef] = useState(null);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n-  const [mapRef, setMapRef] = useState<WebViewType | null>(null);\r\n-  console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n@@ -38,91 +39,74 @@\n         <body>\r\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n           <script>\r\n-            const userLat = ${location.latitude};\r\n-            const userLng = ${location.longitude};\r\n-\r\n-            const map = L.map('map').setView([userLat, userLng], 15);\r\n+            const map = L.map('map').setView([${location.latitude}, ${location.longitude}], 15);\r\n             L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n               maxZoom: 19,\r\n               attribution: '© OpenStreetMap contributors'\r\n             }).addTo(map);\r\n \r\n-            const startMarker = L.marker([userLat, userLng]).addTo(map);\r\n+            const startMarker = L.marker([${location.latitude}, ${location.longitude}]).addTo(map);\r\n+\r\n             let destMarker = null;\r\n             let routeLine = null;\r\n \r\n-            map.on('click', async function(e) {\r\n+            map.on('click', function(e) {\r\n               const { lat, lng } = e.latlng;\r\n               if (destMarker) map.removeLayer(destMarker);\r\n               if (routeLine) map.removeLayer(routeLine);\r\n-\r\n               destMarker = L.marker([lat, lng]).addTo(map);\r\n               window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n             });\r\n \r\n-            window.addEventListener('message', async function(event) {\r\n+            window.addEventListener('message', function(event) {\r\n               const msg = JSON.parse(event.data);\r\n-              if (msg.type === 'drawRoute' && msg.destination) {\r\n-                const { latitude, longitude } = msg.destination;\r\n-\r\n-                alert(\"📍 Drawing route to: \" + latitude + \", \" + longitude);\r\n-                console.log(\"Fetching from:\", '${OSRM_BASE_URL}/route/v1/driving/' + userLng + ',' + userLat + ';' + longitude + ',' + latitude + '?geometries=geojson');\r\n-\r\n-                try {\r\n-                  const res = await fetch('${OSRM_BASE_URL}/route/v1/driving/' + userLng + ',' + userLat + ';' + longitude + ',' + latitude + '?geometries=geojson');\r\n-                  const data = await res.json();\r\n-\r\n-                  if (!data.routes || data.routes.length === 0) {\r\n-                    alert(\"OSRM: No route found.\");\r\n-                    return;\r\n-                  }\r\n-\r\n-                  const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n-                  if (routeLine) map.removeLayer(routeLine);\r\n-                  routeLine = L.polyline(coords, { color: 'red' }).addTo(map);\r\n-                } catch (err) {\r\n-                  alert(\"OSRM Error in drawRoute: \" + err.message);\r\n-                  console.error(err);\r\n-                }\r\n+              if (msg.type === 'drawRoute' && msg.coords) {\r\n+                if (routeLine) map.removeLayer(routeLine);\r\n+                routeLine = L.polyline(msg.coords, { color: 'red' }).addTo(map);\r\n               }\r\n             });\r\n           </script>\r\n         </body>\r\n       </html>\r\n-      `;\r\n+    `;\r\n \r\n-\r\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n-  const handleBookNow = () => {\r\n-    if (destination && mapRef) {\r\n-      const message = JSON.stringify({\r\n-        type: \"drawRoute\",\r\n-        destination,\r\n-      });\r\n-  \r\n-      console.log(\"📤 Sent drawRoute message to WebView:\", message);\r\n-  \r\n-      // Send after 300ms to ensure WebView loaded and message listener is ready\r\n-      setTimeout(() => {\r\n-        mapRef.postMessage(message);\r\n-      }, 300);\r\n+  const handleBookNow = async () => {\r\n+    if (!location || !destination || !mapRef) {\r\n+      Alert.alert(\"Missing location info\");\r\n+      return;\r\n     }\r\n+\r\n+    try {\r\n+      const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${destination.longitude},${destination.latitude}?geometries=geojson`;\r\n+      const res = await fetch(url);\r\n+      const data = await res.json();\r\n+\r\n+      if (!data.routes || data.routes.length === 0) {\r\n+        Alert.alert(\"OSRM\", \"No route found\");\r\n+        return;\r\n+      }\r\n+\r\n+      const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n+      const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n+      mapRef.postMessage(message);\r\n+    } catch (err) {\r\n+      Alert.alert(\"OSRM Error\", err.message);\r\n+      console.error(\"OSRM fetch failed:\", err);\r\n+    }\r\n   };\r\n-  \r\n \r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n \r\n       {mapHtml && (\r\n         <WebView\r\n-          ref={(ref) => {\r\n-            if (ref && !mapRef) setMapRef(ref);\r\n-          }}\r\n+          ref={(ref) => setMapRef(ref)}\r\n           originWhitelist={[\"*\"]}\r\n           source={{ html: mapHtml }}\r\n           javaScriptEnabled\r\n           onMessage={(event) => {\r\n@@ -139,9 +123,9 @@\n \r\n           <TouchableOpacity style={styles.inputBox}>\r\n             <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n             <Text style={styles.inputText}>\r\n-              {destination && destination.latitude && destination.longitude\r\n+              {destination\r\n                 ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n                 : \"Saan ka papunta ngayon?\"}\r\n             </Text>\r\n             <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n"
                },
                {
                    "date": 1746369353849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,21 +10,23 @@\n   StatusBar,\r\n   TextInput,\r\n   Alert,\r\n } from \"react-native\";\r\n-import { WebView } from \"react-native-webview\";\r\n+import { WebViewMessageEvent, WebView } from \"react-native-webview\";\r\n+import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n import { OSRM_BASE_URL } from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n-  const [destination, setDestination] = useState(null);\r\n+  const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n-  const [mapRef, setMapRef] = useState(null);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n+  const [mapRef, setMapRef] = useState<WebViewType | null>(null);\r\n+  console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n"
                },
                {
                    "date": 1746369556182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,12 +91,12 @@\n         Alert.alert(\"OSRM\", \"No route found\");\r\n         return;\r\n       }\r\n \r\n-      const coords = data.routes[0].geometry.coordinates.map(p => [p[1], p[0]]);\r\n+      const coords = data.routes[0].geometry.coordinates.map((p: [number, number]) => [p[1], p[0]]);\r\n       const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n       mapRef.postMessage(message);\r\n-    } catch (err) {\r\n+    } catch (err: any) {\r\n       Alert.alert(\"OSRM Error\", err.message);\r\n       console.error(\"OSRM fetch failed:\", err);\r\n     }\r\n   };\r\n"
                },
                {
                    "date": 1746369933658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n-// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label + Native Fetch on BOOK NOW\r\n \r\n-import React, { useState, useEffect } from \"react\";\r\n+import React, { useState, useEffect, useRef } from \"react\";\r\n import {\r\n   View,\r\n   Text,\r\n   StyleSheet,\r\n@@ -23,9 +22,9 @@\n   const { location, loading } = useLocation();\r\n   const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n-  const [mapRef, setMapRef] = useState<WebViewType | null>(null);\r\n+  const mapRef = useRef<WebViewType | null>(null);\r\n   console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n   useEffect(() => {\r\n     if (!location) return;\r\n@@ -76,9 +75,9 @@\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n   const handleBookNow = async () => {\r\n-    if (!location || !destination || !mapRef) {\r\n+    if (!location || !destination || !mapRef.current) {\r\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n     }\r\n \r\n@@ -93,9 +92,9 @@\n       }\r\n \r\n       const coords = data.routes[0].geometry.coordinates.map((p: [number, number]) => [p[1], p[0]]);\r\n       const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n-      mapRef.postMessage(message);\r\n+      mapRef.current.postMessage(message);\r\n     } catch (err: any) {\r\n       Alert.alert(\"OSRM Error\", err.message);\r\n       console.error(\"OSRM fetch failed:\", err);\r\n     }\r\n@@ -106,9 +105,11 @@\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n \r\n       {mapHtml && (\r\n         <WebView\r\n-          ref={(ref) => setMapRef(ref)}\r\n+          ref={(ref) => {\r\n+            if (ref && !mapRef.current) mapRef.current = ref;\r\n+          }}\r\n           originWhitelist={[\"*\"]}\r\n           source={{ html: mapHtml }}\r\n           javaScriptEnabled\r\n           onMessage={(event) => {\r\n"
                },
                {
                    "date": 1746370946891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,14 @@\n     }\r\n \r\n     try {\r\n       const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${destination.longitude},${destination.latitude}?geometries=geojson`;\r\n+      console.log(\"📡 Fetching route from:\", url);\r\n       const res = await fetch(url);\r\n+      if (!res.ok) {\r\n+        const text = await res.text(); // Try to read response even if it's not JSON\r\n+        throw new Error(`HTTP ${res.status} ${res.statusText}: ${text}`);\r\n+      }\r\n       const data = await res.json();\r\n \r\n       if (!data.routes || data.routes.length === 0) {\r\n         Alert.alert(\"OSRM\", \"No route found\");\r\n"
                },
                {
                    "date": 1747044391168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,11 @@\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n   const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n+  const [notes, setNotes] = useState(\"\");\r\n+const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n+\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n   console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n"
                },
                {
                    "date": 1747044445727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,9 @@\n   const { location, loading } = useLocation();\r\n   const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [notes, setNotes] = useState(\"\");\r\n-const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n-\r\n+  const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n   console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n@@ -148,18 +147,21 @@\n             value={destinationLabel}\r\n             onChangeText={setDestinationLabel}\r\n           />\r\n \r\n-          <TouchableOpacity style={styles.inputBoxSimple}>\r\n-            <MaterialIcons name=\"edit\" size={20} color=\"#616161\" />\r\n-            <Text style={styles.inputText}>Notes sa driver</Text>\r\n-          </TouchableOpacity>\r\n+          <TextInput\r\n+            style={styles.inputBoxSimple}\r\n+            placeholder=\"Notes sa driver\"\r\n+            value={notes}\r\n+            onChangeText={setNotes}\r\n+          />\r\n \r\n-          <TouchableOpacity style={styles.inputBox}>\r\n-            <MaterialIcons name=\"payments\" size={20} color=\"#616161\" />\r\n-            <Text style={styles.inputText}>Paano ka magbabayad</Text>\r\n-            <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-          </TouchableOpacity>\r\n+          <TextInput\r\n+            style={styles.inputBox}\r\n+            placeholder=\"Paano ka magbabayad\"\r\n+            value={paymentMethod}\r\n+            onChangeText={setPaymentMethod}\r\n+          />\r\n \r\n           <View style={styles.totalFareContainer}>\r\n             <View style={styles.fareBox}>\r\n               <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n"
                },
                {
                    "date": 1747044477747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,36 +77,43 @@\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n   const handleBookNow = async () => {\r\n-    if (!location || !destination || !mapRef.current) {\r\n+    if (!location || !destination) {\r\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n     }\r\n-\r\n+  \r\n+    const bookingData = {\r\n+      currentLocation: location,\r\n+      destination,\r\n+      destinationLabel,\r\n+      notes,\r\n+      paymentMethod,\r\n+    };\r\n+  \r\n     try {\r\n-      const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${destination.longitude},${destination.latitude}?geometries=geojson`;\r\n-      console.log(\"📡 Fetching route from:\", url);\r\n-      const res = await fetch(url);\r\n-      if (!res.ok) {\r\n-        const text = await res.text(); // Try to read response even if it's not JSON\r\n-        throw new Error(`HTTP ${res.status} ${res.statusText}: ${text}`);\r\n+      const res = await fetch(\"https://your-backend-url.com/api/book\", {\r\n+        method: \"POST\",\r\n+        headers: {\r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+        body: JSON.stringify(bookingData),\r\n+      });\r\n+  \r\n+      const result = await res.json();\r\n+      if (res.ok) {\r\n+        Alert.alert(\"Success\", \"Booking submitted!\");\r\n+        console.log(\"Booking response:\", result);\r\n+      } else {\r\n+        Alert.alert(\"Failed\", result.message || \"Booking failed\");\r\n       }\r\n-      const data = await res.json();\r\n-\r\n-      if (!data.routes || data.routes.length === 0) {\r\n-        Alert.alert(\"OSRM\", \"No route found\");\r\n-        return;\r\n-      }\r\n-\r\n-      const coords = data.routes[0].geometry.coordinates.map((p: [number, number]) => [p[1], p[0]]);\r\n-      const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n-      mapRef.current.postMessage(message);\r\n     } catch (err: any) {\r\n-      Alert.alert(\"OSRM Error\", err.message);\r\n-      console.error(\"OSRM fetch failed:\", err);\r\n+      Alert.alert(\"Error\", err.message);\r\n+      console.error(\"Booking failed:\", err);\r\n     }\r\n   };\r\n+  \r\n \r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n"
                },
                {
                    "date": 1747044903231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label + Booking + Fare Calculation\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import {\r\n   View,\r\n@@ -23,8 +24,9 @@\n   const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [notes, setNotes] = useState(\"\");\r\n   const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n+  const [fare, setFare] = useState(0);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n   console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n@@ -77,43 +79,54 @@\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n   const handleBookNow = async () => {\r\n-    if (!location || !destination) {\r\n+    if (!location || !destination || !mapRef.current) {\r\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n     }\r\n-  \r\n-    const bookingData = {\r\n-      currentLocation: location,\r\n-      destination,\r\n-      destinationLabel,\r\n-      notes,\r\n-      paymentMethod,\r\n-    };\r\n-  \r\n+\r\n     try {\r\n-      const res = await fetch(\"https://your-backend-url.com/api/book\", {\r\n-        method: \"POST\",\r\n-        headers: {\r\n-          \"Content-Type\": \"application/json\",\r\n-        },\r\n-        body: JSON.stringify(bookingData),\r\n-      });\r\n-  \r\n-      const result = await res.json();\r\n-      if (res.ok) {\r\n-        Alert.alert(\"Success\", \"Booking submitted!\");\r\n-        console.log(\"Booking response:\", result);\r\n-      } else {\r\n-        Alert.alert(\"Failed\", result.message || \"Booking failed\");\r\n+      const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${destination.longitude},${destination.latitude}?geometries=geojson`;\r\n+      console.log(\"📡 Fetching route from:\", url);\r\n+      const res = await fetch(url);\r\n+      if (!res.ok) {\r\n+        const text = await res.text();\r\n+        throw new Error(`HTTP ${res.status} ${res.statusText}: ${text}`);\r\n       }\r\n+      const data = await res.json();\r\n+\r\n+      if (!data.routes || data.routes.length === 0) {\r\n+        Alert.alert(\"OSRM\", \"No route found\");\r\n+        return;\r\n+      }\r\n+\r\n+      const distanceKm = data.routes[0].distance / 1000;\r\n+      const calculatedFare = distanceKm <= 2 ? 20 : 20 + Math.ceil(distanceKm - 2) * 5;\r\n+      setFare(calculatedFare);\r\n+\r\n+      const coords = data.routes[0].geometry.coordinates.map((p: [number, number]) => [p[1], p[0]]);\r\n+      const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n+      mapRef.current.postMessage(message);\r\n+\r\n+      // Optional: send data to backend\r\n+      const bookingData = {\r\n+        currentLocation: location,\r\n+        destination,\r\n+        destinationLabel,\r\n+        notes,\r\n+        paymentMethod,\r\n+        fare: calculatedFare,\r\n+      };\r\n+\r\n+      console.log(\"📤 Sending booking:\", bookingData);\r\n+      // await fetch(\"https://your-backend-url.com/api/book\", {...})\r\n+\r\n     } catch (err: any) {\r\n-      Alert.alert(\"Error\", err.message);\r\n-      console.error(\"Booking failed:\", err);\r\n+      Alert.alert(\"OSRM Error\", err.message);\r\n+      console.error(\"OSRM fetch failed:\", err);\r\n     }\r\n   };\r\n-  \r\n \r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n@@ -170,9 +183,9 @@\n           />\r\n \r\n           <View style={styles.totalFareContainer}>\r\n             <View style={styles.fareBox}>\r\n-              <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n+              <Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text>\r\n             </View>\r\n             <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n               <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n             </TouchableOpacity>\r\n"
                },
                {
                    "date": 1747045454129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,31 @@\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n   console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n+  const calculateFare = async (dest: { latitude: number; longitude: number }) => {\r\n+    if (!location) return;\r\n+    try {\r\n+      const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${dest.longitude},${dest.latitude}?geometries=geojson`;\r\n+      console.log(\"📡 Fetching route from:\", url);\r\n+      const res = await fetch(url);\r\n+      if (!res.ok) throw new Error(\"Failed to fetch route\");\r\n+\r\n+      const data = await res.json();\r\n+      if (!data.routes || data.routes.length === 0) return;\r\n+\r\n+      const distanceKm = data.routes[0].distance / 1000;\r\n+      const calculatedFare = distanceKm <= 2 ? 20 : 20 + Math.ceil(distanceKm - 2) * 5;\r\n+      setFare(calculatedFare);\r\n+\r\n+      const coords = data.routes[0].geometry.coordinates.map((p: [number, number]) => [p[1], p[0]]);\r\n+      const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n+      mapRef.current?.postMessage(message);\r\n+    } catch (err) {\r\n+      console.error(\"Fare calculation error:\", err);\r\n+    }\r\n+  };\r\n+\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n@@ -78,54 +101,25 @@\n \r\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n-  const handleBookNow = async () => {\r\n+  const handleBookNow = () => {\r\n     if (!location || !destination || !mapRef.current) {\r\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n     }\r\n \r\n-    try {\r\n-      const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${destination.longitude},${destination.latitude}?geometries=geojson`;\r\n-      console.log(\"📡 Fetching route from:\", url);\r\n-      const res = await fetch(url);\r\n-      if (!res.ok) {\r\n-        const text = await res.text();\r\n-        throw new Error(`HTTP ${res.status} ${res.statusText}: ${text}`);\r\n-      }\r\n-      const data = await res.json();\r\n+    const bookingData = {\r\n+      currentLocation: location,\r\n+      destination,\r\n+      destinationLabel,\r\n+      notes,\r\n+      paymentMethod,\r\n+      fare,\r\n+    };\r\n \r\n-      if (!data.routes || data.routes.length === 0) {\r\n-        Alert.alert(\"OSRM\", \"No route found\");\r\n-        return;\r\n-      }\r\n-\r\n-      const distanceKm = data.routes[0].distance / 1000;\r\n-      const calculatedFare = distanceKm <= 2 ? 20 : 20 + Math.ceil(distanceKm - 2) * 5;\r\n-      setFare(calculatedFare);\r\n-\r\n-      const coords = data.routes[0].geometry.coordinates.map((p: [number, number]) => [p[1], p[0]]);\r\n-      const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n-      mapRef.current.postMessage(message);\r\n-\r\n-      // Optional: send data to backend\r\n-      const bookingData = {\r\n-        currentLocation: location,\r\n-        destination,\r\n-        destinationLabel,\r\n-        notes,\r\n-        paymentMethod,\r\n-        fare: calculatedFare,\r\n-      };\r\n-\r\n-      console.log(\"📤 Sending booking:\", bookingData);\r\n-      // await fetch(\"https://your-backend-url.com/api/book\", {...})\r\n-\r\n-    } catch (err: any) {\r\n-      Alert.alert(\"OSRM Error\", err.message);\r\n-      console.error(\"OSRM fetch failed:\", err);\r\n-    }\r\n+    console.log(\"📤 Sending booking:\", bookingData);\r\n+    // await fetch(\"https://your-backend-url.com/api/book\", {...})\r\n   };\r\n \r\n   return (\r\n     <View style={styles.container}>\r\n@@ -141,8 +135,9 @@\n           javaScriptEnabled\r\n           onMessage={(event) => {\r\n             const data = JSON.parse(event.nativeEvent.data);\r\n             setDestination(data);\r\n+            calculateFare(data);\r\n           }}\r\n           style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n         />\r\n       )}\r\n"
                },
                {
                    "date": 1747045661852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label + Booking + Fare Calculation\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import {\r\n   View,\r\n@@ -24,36 +23,12 @@\n   const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [notes, setNotes] = useState(\"\");\r\n   const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n-  const [fare, setFare] = useState(0);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n   console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n-  const calculateFare = async (dest: { latitude: number; longitude: number }) => {\r\n-    if (!location) return;\r\n-    try {\r\n-      const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${dest.longitude},${dest.latitude}?geometries=geojson`;\r\n-      console.log(\"📡 Fetching route from:\", url);\r\n-      const res = await fetch(url);\r\n-      if (!res.ok) throw new Error(\"Failed to fetch route\");\r\n-\r\n-      const data = await res.json();\r\n-      if (!data.routes || data.routes.length === 0) return;\r\n-\r\n-      const distanceKm = data.routes[0].distance / 1000;\r\n-      const calculatedFare = distanceKm <= 2 ? 20 : 20 + Math.ceil(distanceKm - 2) * 5;\r\n-      setFare(calculatedFare);\r\n-\r\n-      const coords = data.routes[0].geometry.coordinates.map((p: [number, number]) => [p[1], p[0]]);\r\n-      const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n-      mapRef.current?.postMessage(message);\r\n-    } catch (err) {\r\n-      console.error(\"Fare calculation error:\", err);\r\n-    }\r\n-  };\r\n-\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n@@ -101,26 +76,44 @@\n \r\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n-  const handleBookNow = () => {\r\n-    if (!location || !destination || !mapRef.current) {\r\n+  const handleBookNow = async () => {\r\n+    if (!location || !destination) {\r\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n     }\r\n-\r\n+  \r\n     const bookingData = {\r\n       currentLocation: location,\r\n       destination,\r\n       destinationLabel,\r\n       notes,\r\n       paymentMethod,\r\n-      fare,\r\n     };\r\n-\r\n-    console.log(\"📤 Sending booking:\", bookingData);\r\n-    // await fetch(\"https://your-backend-url.com/api/book\", {...})\r\n+  \r\n+    try {\r\n+      const res = await fetch(\"https://your-backend-url.com/api/book\", {\r\n+        method: \"POST\",\r\n+        headers: {\r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+        body: JSON.stringify(bookingData),\r\n+      });\r\n+  \r\n+      const result = await res.json();\r\n+      if (res.ok) {\r\n+        Alert.alert(\"Success\", \"Booking submitted!\");\r\n+        console.log(\"Booking response:\", result);\r\n+      } else {\r\n+        Alert.alert(\"Failed\", result.message || \"Booking failed\");\r\n+      }\r\n+    } catch (err: any) {\r\n+      Alert.alert(\"Error\", err.message);\r\n+      console.error(\"Booking failed:\", err);\r\n+    }\r\n   };\r\n+  \r\n \r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n@@ -135,9 +128,8 @@\n           javaScriptEnabled\r\n           onMessage={(event) => {\r\n             const data = JSON.parse(event.nativeEvent.data);\r\n             setDestination(data);\r\n-            calculateFare(data);\r\n           }}\r\n           style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n         />\r\n       )}\r\n@@ -178,9 +170,9 @@\n           />\r\n \r\n           <View style={styles.totalFareContainer}>\r\n             <View style={styles.fareBox}>\r\n-              <Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text>\r\n+              <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n             </View>\r\n             <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n               <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n             </TouchableOpacity>\r\n"
                },
                {
                    "date": 1747045695874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label + Booking + Fare Calculation\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import {\r\n   View,\r\n@@ -23,8 +24,9 @@\n   const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [notes, setNotes] = useState(\"\");\r\n   const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n+  const [fare, setFare] = useState(0);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n   console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n@@ -77,43 +79,54 @@\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n   const handleBookNow = async () => {\r\n-    if (!location || !destination) {\r\n+    if (!location || !destination || !mapRef.current) {\r\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n     }\r\n-  \r\n-    const bookingData = {\r\n-      currentLocation: location,\r\n-      destination,\r\n-      destinationLabel,\r\n-      notes,\r\n-      paymentMethod,\r\n-    };\r\n-  \r\n+\r\n     try {\r\n-      const res = await fetch(\"https://your-backend-url.com/api/book\", {\r\n-        method: \"POST\",\r\n-        headers: {\r\n-          \"Content-Type\": \"application/json\",\r\n-        },\r\n-        body: JSON.stringify(bookingData),\r\n-      });\r\n-  \r\n-      const result = await res.json();\r\n-      if (res.ok) {\r\n-        Alert.alert(\"Success\", \"Booking submitted!\");\r\n-        console.log(\"Booking response:\", result);\r\n-      } else {\r\n-        Alert.alert(\"Failed\", result.message || \"Booking failed\");\r\n+      const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${destination.longitude},${destination.latitude}?geometries=geojson`;\r\n+      console.log(\"📡 Fetching route from:\", url);\r\n+      const res = await fetch(url);\r\n+      if (!res.ok) {\r\n+        const text = await res.text();\r\n+        throw new Error(`HTTP ${res.status} ${res.statusText}: ${text}`);\r\n       }\r\n+      const data = await res.json();\r\n+\r\n+      if (!data.routes || data.routes.length === 0) {\r\n+        Alert.alert(\"OSRM\", \"No route found\");\r\n+        return;\r\n+      }\r\n+\r\n+      const distanceKm = data.routes[0].distance / 1000;\r\n+      const calculatedFare = distanceKm <= 2 ? 20 : 20 + Math.ceil(distanceKm - 2) * 5;\r\n+      setFare(calculatedFare);\r\n+\r\n+      const coords = data.routes[0].geometry.coordinates.map((p: [number, number]) => [p[1], p[0]]);\r\n+      const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n+      mapRef.current.postMessage(message);\r\n+\r\n+      // Optional: send data to backend\r\n+      const bookingData = {\r\n+        currentLocation: location,\r\n+        destination,\r\n+        destinationLabel,\r\n+        notes,\r\n+        paymentMethod,\r\n+        fare: calculatedFare,\r\n+      };\r\n+\r\n+      console.log(\"📤 Sending booking:\", bookingData);\r\n+      // await fetch(\"https://your-backend-url.com/api/book\", {...})\r\n+\r\n     } catch (err: any) {\r\n-      Alert.alert(\"Error\", err.message);\r\n-      console.error(\"Booking failed:\", err);\r\n+      Alert.alert(\"OSRM Error\", err.message);\r\n+      console.error(\"OSRM fetch failed:\", err);\r\n     }\r\n   };\r\n-  \r\n \r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n@@ -170,9 +183,9 @@\n           />\r\n \r\n           <View style={styles.totalFareContainer}>\r\n             <View style={styles.fareBox}>\r\n-              <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n+              <Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text>\r\n             </View>\r\n             <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n               <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n             </TouchableOpacity>\r\n"
                },
                {
                    "date": 1747045701806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,31 @@\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n   console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n+  const calculateFare = async (dest: { latitude: number; longitude: number }) => {\r\n+    if (!location) return;\r\n+    try {\r\n+      const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${dest.longitude},${dest.latitude}?geometries=geojson`;\r\n+      console.log(\"📡 Fetching route from:\", url);\r\n+      const res = await fetch(url);\r\n+      if (!res.ok) throw new Error(\"Failed to fetch route\");\r\n+\r\n+      const data = await res.json();\r\n+      if (!data.routes || data.routes.length === 0) return;\r\n+\r\n+      const distanceKm = data.routes[0].distance / 1000;\r\n+      const calculatedFare = distanceKm <= 2 ? 20 : 20 + Math.ceil(distanceKm - 2) * 5;\r\n+      setFare(calculatedFare);\r\n+\r\n+      const coords = data.routes[0].geometry.coordinates.map((p: [number, number]) => [p[1], p[0]]);\r\n+      const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n+      mapRef.current?.postMessage(message);\r\n+    } catch (err) {\r\n+      console.error(\"Fare calculation error:\", err);\r\n+    }\r\n+  };\r\n+\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n@@ -78,54 +101,25 @@\n \r\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n-  const handleBookNow = async () => {\r\n+  const handleBookNow = () => {\r\n     if (!location || !destination || !mapRef.current) {\r\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n     }\r\n \r\n-    try {\r\n-      const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${destination.longitude},${destination.latitude}?geometries=geojson`;\r\n-      console.log(\"📡 Fetching route from:\", url);\r\n-      const res = await fetch(url);\r\n-      if (!res.ok) {\r\n-        const text = await res.text();\r\n-        throw new Error(`HTTP ${res.status} ${res.statusText}: ${text}`);\r\n-      }\r\n-      const data = await res.json();\r\n+    const bookingData = {\r\n+      currentLocation: location,\r\n+      destination,\r\n+      destinationLabel,\r\n+      notes,\r\n+      paymentMethod,\r\n+      fare,\r\n+    };\r\n \r\n-      if (!data.routes || data.routes.length === 0) {\r\n-        Alert.alert(\"OSRM\", \"No route found\");\r\n-        return;\r\n-      }\r\n-\r\n-      const distanceKm = data.routes[0].distance / 1000;\r\n-      const calculatedFare = distanceKm <= 2 ? 20 : 20 + Math.ceil(distanceKm - 2) * 5;\r\n-      setFare(calculatedFare);\r\n-\r\n-      const coords = data.routes[0].geometry.coordinates.map((p: [number, number]) => [p[1], p[0]]);\r\n-      const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n-      mapRef.current.postMessage(message);\r\n-\r\n-      // Optional: send data to backend\r\n-      const bookingData = {\r\n-        currentLocation: location,\r\n-        destination,\r\n-        destinationLabel,\r\n-        notes,\r\n-        paymentMethod,\r\n-        fare: calculatedFare,\r\n-      };\r\n-\r\n-      console.log(\"📤 Sending booking:\", bookingData);\r\n-      // await fetch(\"https://your-backend-url.com/api/book\", {...})\r\n-\r\n-    } catch (err: any) {\r\n-      Alert.alert(\"OSRM Error\", err.message);\r\n-      console.error(\"OSRM fetch failed:\", err);\r\n-    }\r\n+    console.log(\"📤 Sending booking:\", bookingData);\r\n+    // await fetch(\"https://your-backend-url.com/api/book\", {...})\r\n   };\r\n \r\n   return (\r\n     <View style={styles.container}>\r\n@@ -141,8 +135,9 @@\n           javaScriptEnabled\r\n           onMessage={(event) => {\r\n             const data = JSON.parse(event.nativeEvent.data);\r\n             setDestination(data);\r\n+            calculateFare(data);\r\n           }}\r\n           style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n         />\r\n       )}\r\n"
                },
                {
                    "date": 1747045713361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label + Booking + Fare Calculation\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import {\r\n   View,\r\n@@ -24,36 +23,12 @@\n   const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [notes, setNotes] = useState(\"\");\r\n   const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n-  const [fare, setFare] = useState(0);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n   console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n-  const calculateFare = async (dest: { latitude: number; longitude: number }) => {\r\n-    if (!location) return;\r\n-    try {\r\n-      const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${dest.longitude},${dest.latitude}?geometries=geojson`;\r\n-      console.log(\"📡 Fetching route from:\", url);\r\n-      const res = await fetch(url);\r\n-      if (!res.ok) throw new Error(\"Failed to fetch route\");\r\n-\r\n-      const data = await res.json();\r\n-      if (!data.routes || data.routes.length === 0) return;\r\n-\r\n-      const distanceKm = data.routes[0].distance / 1000;\r\n-      const calculatedFare = distanceKm <= 2 ? 20 : 20 + Math.ceil(distanceKm - 2) * 5;\r\n-      setFare(calculatedFare);\r\n-\r\n-      const coords = data.routes[0].geometry.coordinates.map((p: [number, number]) => [p[1], p[0]]);\r\n-      const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n-      mapRef.current?.postMessage(message);\r\n-    } catch (err) {\r\n-      console.error(\"Fare calculation error:\", err);\r\n-    }\r\n-  };\r\n-\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n@@ -101,26 +76,44 @@\n \r\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n-  const handleBookNow = () => {\r\n-    if (!location || !destination || !mapRef.current) {\r\n+  const handleBookNow = async () => {\r\n+    if (!location || !destination) {\r\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n     }\r\n-\r\n+  \r\n     const bookingData = {\r\n       currentLocation: location,\r\n       destination,\r\n       destinationLabel,\r\n       notes,\r\n       paymentMethod,\r\n-      fare,\r\n     };\r\n-\r\n-    console.log(\"📤 Sending booking:\", bookingData);\r\n-    // await fetch(\"https://your-backend-url.com/api/book\", {...})\r\n+  \r\n+    try {\r\n+      const res = await fetch(\"https://your-backend-url.com/api/book\", {\r\n+        method: \"POST\",\r\n+        headers: {\r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+        body: JSON.stringify(bookingData),\r\n+      });\r\n+  \r\n+      const result = await res.json();\r\n+      if (res.ok) {\r\n+        Alert.alert(\"Success\", \"Booking submitted!\");\r\n+        console.log(\"Booking response:\", result);\r\n+      } else {\r\n+        Alert.alert(\"Failed\", result.message || \"Booking failed\");\r\n+      }\r\n+    } catch (err: any) {\r\n+      Alert.alert(\"Error\", err.message);\r\n+      console.error(\"Booking failed:\", err);\r\n+    }\r\n   };\r\n+  \r\n \r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n@@ -135,9 +128,8 @@\n           javaScriptEnabled\r\n           onMessage={(event) => {\r\n             const data = JSON.parse(event.nativeEvent.data);\r\n             setDestination(data);\r\n-            calculateFare(data);\r\n           }}\r\n           style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n         />\r\n       )}\r\n@@ -178,9 +170,9 @@\n           />\r\n \r\n           <View style={styles.totalFareContainer}>\r\n             <View style={styles.fareBox}>\r\n-              <Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text>\r\n+              <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n             </View>\r\n             <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n               <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n             </TouchableOpacity>\r\n"
                },
                {
                    "date": 1747046890413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label + Booking + Fare Calculation\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import {\r\n   View,\r\n@@ -23,12 +24,38 @@\n   const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [notes, setNotes] = useState(\"\");\r\n   const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n+  const [fare, setFare] = useState(0);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n   console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n+  const calculateFare = async (dest: { latitude: number; longitude: number }) => {\r\n+    if (!location) return;\r\n+    try {\r\n+      const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${dest.longitude},${dest.latitude}?geometries=geojson`;\r\n+      console.log(\"📡 Fetching route from:\", url);\r\n+      const res = await fetch(url);\r\n+      if (!res.ok) throw new Error(\"Failed to fetch route\");\r\n+\r\n+      const data = await res.json();\r\n+      if (!data.routes || data.routes.length === 0) return;\r\n+\r\n+      const distanceKm = data.routes[0].distance / 1000;\r\n+      console.log(distanceKm)\r\n+      const calculatedFare = distanceKm <= 2 ? 20 : 20 + Math.ceil(distanceKm - 2) * 5;\r\n+      console.log(calculatedFare)\r\n+      setFare(calculatedFare);\r\n+\r\n+      const coords = data.routes[0].geometry.coordinates.map((p: [number, number]) => [p[1], p[0]]);\r\n+      const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n+      mapRef.current?.postMessage(message);\r\n+    } catch (err) {\r\n+      console.error(\"Fare calculation error:\", err);\r\n+    }\r\n+  };\r\n+\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n@@ -76,44 +103,26 @@\n \r\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n-  const handleBookNow = async () => {\r\n-    if (!location || !destination) {\r\n+  const handleBookNow = () => {\r\n+    if (!location || !destination || !mapRef.current) {\r\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n     }\r\n-  \r\n+\r\n     const bookingData = {\r\n       currentLocation: location,\r\n       destination,\r\n       destinationLabel,\r\n       notes,\r\n       paymentMethod,\r\n+      fare,\r\n     };\r\n-  \r\n-    try {\r\n-      const res = await fetch(\"https://your-backend-url.com/api/book\", {\r\n-        method: \"POST\",\r\n-        headers: {\r\n-          \"Content-Type\": \"application/json\",\r\n-        },\r\n-        body: JSON.stringify(bookingData),\r\n-      });\r\n-  \r\n-      const result = await res.json();\r\n-      if (res.ok) {\r\n-        Alert.alert(\"Success\", \"Booking submitted!\");\r\n-        console.log(\"Booking response:\", result);\r\n-      } else {\r\n-        Alert.alert(\"Failed\", result.message || \"Booking failed\");\r\n-      }\r\n-    } catch (err: any) {\r\n-      Alert.alert(\"Error\", err.message);\r\n-      console.error(\"Booking failed:\", err);\r\n-    }\r\n+\r\n+    console.log(\"📤 Sending booking:\", bookingData);\r\n+    // await fetch(\"https://your-backend-url.com/api/book\", {...})\r\n   };\r\n-  \r\n \r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n@@ -128,8 +137,9 @@\n           javaScriptEnabled\r\n           onMessage={(event) => {\r\n             const data = JSON.parse(event.nativeEvent.data);\r\n             setDestination(data);\r\n+            calculateFare(data);\r\n           }}\r\n           style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n         />\r\n       )}\r\n@@ -170,9 +180,9 @@\n           />\r\n \r\n           <View style={styles.totalFareContainer}>\r\n             <View style={styles.fareBox}>\r\n-              <Text style={styles.totalFareText}>Total Fare: 9999</Text>\r\n+              <Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text>\r\n             </View>\r\n             <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n               <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n             </TouchableOpacity>\r\n"
                },
                {
                    "date": 1747228517579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [notes, setNotes] = useState(\"\");\r\n   const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n-  const [fare, setFare] = useState(0);\r\n+  const [fare, setFare] = useState(20);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n   console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n@@ -104,26 +104,29 @@\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n   const handleBookNow = () => {\r\n-    if (!location || !destination || !mapRef.current) {\r\n+    if (!location || !destination) {\r\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n     }\r\n \r\n-    const bookingData = {\r\n-      currentLocation: location,\r\n-      destination,\r\n-      destinationLabel,\r\n+    const simulatedBookingData = {\r\n+      pickupLat: location.latitude,\r\n+      pickupLng: location.longitude,\r\n+      destinationLat: destination.latitude,\r\n+      destinationLng: destination.longitude,\r\n+      fare: 20,\r\n+      paymentMethod: \"cash\",\r\n       notes,\r\n-      paymentMethod,\r\n-      fare,\r\n     };\r\n \r\n-    console.log(\"📤 Sending booking:\", bookingData);\r\n-    // await fetch(\"https://your-backend-url.com/api/book\", {...})\r\n+    console.log(\"📤 Simulated passenger booking sent to backend:\", simulatedBookingData);\r\n+\r\n+    Alert.alert(\"Booking Sent\", \"Booking data has been logged to console for backend testing.\");\r\n   };\r\n \r\n+\r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n \r\n"
                },
                {
                    "date": 1747228953073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n \r\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n-  const handleBookNow = () => {\r\n+  const handleBookNow = async () => {\r\n     if (!location || !destination) {\r\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n     }\r\n@@ -119,14 +119,28 @@\n       paymentMethod: \"cash\",\r\n       notes,\r\n     };\r\n \r\n-    console.log(\"📤 Simulated passenger booking sent to backend:\", simulatedBookingData);\r\n+    try {\r\n+      const res = await fetch(\"https://your-backend-url/api/book\", {\r\n+        method: \"POST\",\r\n+        headers: {\r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+        body: JSON.stringify(simulatedBookingData),\r\n+      });\r\n \r\n-    Alert.alert(\"Booking Sent\", \"Booking data has been logged to console for backend testing.\");\r\n+      const data = await res.json();\r\n+      console.log(\"✅ Backend response:\", data);\r\n+      Alert.alert(\"Success\", \"Booking sent successfully.\");\r\n+    } catch (error) {\r\n+      console.error(\"❌ Booking error:\", error);\r\n+      Alert.alert(\"Error\", \"Failed to send booking.\");\r\n+    }\r\n   };\r\n \r\n \r\n+\r\n   return (\r\n     <View style={styles.container}>\r\n       <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n \r\n"
                },
                {
                    "date": 1747229589238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-// 📍 Updated Passenger HomePage - phome.tsx using Leaflet + WebView + Destination Label + Booking + Fare Calculation\r\n-\r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import {\r\n   View,\r\n   Text,\r\n@@ -9,8 +7,13 @@\n   TouchableOpacity,\r\n   StatusBar,\r\n   TextInput,\r\n   Alert,\r\n+  KeyboardAvoidingView,\r\n+  Platform,\r\n+  ScrollView,\r\n+  TouchableWithoutFeedback,\r\n+  Keyboard,\r\n } from \"react-native\";\r\n import { WebViewMessageEvent, WebView } from \"react-native-webview\";\r\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n@@ -137,96 +140,106 @@\n       Alert.alert(\"Error\", \"Failed to send booking.\");\r\n     }\r\n   };\r\n \r\n+  if (loading || !location) {\r\n+    return <View style={{ flex: 1, backgroundColor: \"#fff\" }} />;\r\n+  }\r\n \r\n-\r\n   return (\r\n-    <View style={styles.container}>\r\n-      <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n+    <KeyboardAvoidingView\r\n+      style={{ flex: 1 }}\r\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : 30}\r\n+    >\r\n+      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n+        <View style={styles.container}>\r\n+          <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n \r\n-      {mapHtml && (\r\n-        <WebView\r\n-          ref={(ref) => {\r\n-            if (ref && !mapRef.current) mapRef.current = ref;\r\n-          }}\r\n-          originWhitelist={[\"*\"]}\r\n-          source={{ html: mapHtml }}\r\n-          javaScriptEnabled\r\n-          onMessage={(event) => {\r\n-            const data = JSON.parse(event.nativeEvent.data);\r\n-            setDestination(data);\r\n-            calculateFare(data);\r\n-          }}\r\n-          style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n-        />\r\n-      )}\r\n+          {mapHtml && (\r\n+            <WebView\r\n+              ref={(ref) => {\r\n+                if (ref && !mapRef.current) mapRef.current = ref;\r\n+              }}\r\n+              originWhitelist={[\"*\"]}\r\n+              source={{ html: mapHtml }}\r\n+              javaScriptEnabled\r\n+              onMessage={(event) => {\r\n+                const data = JSON.parse(event.nativeEvent.data);\r\n+                setDestination(data);\r\n+                calculateFare(data);\r\n+              }}\r\n+              style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n+            />\r\n+          )}\r\n \r\n-      <View style={styles.overlayContainer}>\r\n-        <View style={styles.card}>\r\n-          <View style={styles.cardHeader} />\r\n+          <View style={styles.overlayContainer}>\r\n+            <View style={styles.card}>\r\n+              <View style={styles.cardHeader} />\r\n \r\n-          <TouchableOpacity style={styles.inputBox}>\r\n-            <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-            <Text style={styles.inputText}>\r\n-              {destination\r\n-                ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n-                : \"Saan ka papunta ngayon?\"}\r\n-            </Text>\r\n-            <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-          </TouchableOpacity>\r\n+              <TouchableOpacity style={styles.inputBox}>\r\n+                <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n+                <Text style={styles.inputText}>\r\n+                  {destination\r\n+                    ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n+                    : \"Saan ka papunta ngayon?\"}\r\n+                </Text>\r\n+                <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+              </TouchableOpacity>\r\n \r\n-          <TextInput\r\n-            style={styles.inputBoxSimple}\r\n-            placeholder=\"Name this location (optional: Home, Work, etc.)\"\r\n-            value={destinationLabel}\r\n-            onChangeText={setDestinationLabel}\r\n-          />\r\n+              <TextInput\r\n+                style={styles.inputBoxSimple}\r\n+                placeholder=\"Name this location (optional: Home, Work, etc.)\"\r\n+                value={destinationLabel}\r\n+                onChangeText={setDestinationLabel}\r\n+              />\r\n \r\n-          <TextInput\r\n-            style={styles.inputBoxSimple}\r\n-            placeholder=\"Notes sa driver\"\r\n-            value={notes}\r\n-            onChangeText={setNotes}\r\n-          />\r\n+              <TextInput\r\n+                style={styles.inputBoxSimple}\r\n+                placeholder=\"Notes sa driver\"\r\n+                value={notes}\r\n+                onChangeText={setNotes}\r\n+              />\r\n \r\n-          <TextInput\r\n-            style={styles.inputBox}\r\n-            placeholder=\"Paano ka magbabayad\"\r\n-            value={paymentMethod}\r\n-            onChangeText={setPaymentMethod}\r\n-          />\r\n+              <TextInput\r\n+                style={styles.inputBox}\r\n+                placeholder=\"Paano ka magbabayad\"\r\n+                value={paymentMethod}\r\n+                onChangeText={setPaymentMethod}\r\n+              />\r\n \r\n-          <View style={styles.totalFareContainer}>\r\n-            <View style={styles.fareBox}>\r\n-              <Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text>\r\n+              <View style={styles.totalFareContainer}>\r\n+                <View style={styles.fareBox}>\r\n+                  <Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text>\r\n+                </View>\r\n+                <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n+                  <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n+                </TouchableOpacity>\r\n+              </View>\r\n             </View>\r\n-            <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n-              <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n-            </TouchableOpacity>\r\n+\r\n+            <View style={styles.bottomNav}>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"home\" size={30} color=\"black\" />\r\n+                <Text>Home</Text>\r\n+              </TouchableOpacity>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n+                <Text>History</Text>\r\n+              </TouchableOpacity>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n+                <Text>Chats</Text>\r\n+              </TouchableOpacity>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n+                <Text>Profile</Text>\r\n+              </TouchableOpacity>\r\n+            </View>\r\n           </View>\r\n         </View>\r\n-\r\n-        <View style={styles.bottomNav}>\r\n-          <TouchableOpacity>\r\n-            <Ionicons name=\"home\" size={30} color=\"black\" />\r\n-            <Text>Home</Text>\r\n-          </TouchableOpacity>\r\n-          <TouchableOpacity>\r\n-            <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n-            <Text>History</Text>\r\n-          </TouchableOpacity>\r\n-          <TouchableOpacity>\r\n-            <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n-            <Text>Chats</Text>\r\n-          </TouchableOpacity>\r\n-          <TouchableOpacity>\r\n-            <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n-            <Text>Profile</Text>\r\n-          </TouchableOpacity>\r\n-        </View>\r\n-      </View>\r\n-    </View>\r\n+      </TouchableWithoutFeedback>\r\n+    </KeyboardAvoidingView>\r\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n"
                },
                {
                    "date": 1747229742031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,35 +145,35 @@\n     return <View style={{ flex: 1, backgroundColor: \"#fff\" }} />;\r\n   }\r\n \r\n   return (\r\n-    <KeyboardAvoidingView\r\n-      style={{ flex: 1 }}\r\n-      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n-      keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : 30}\r\n-    >\r\n-      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n-        <View style={styles.container}>\r\n-          <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n+    <View style={styles.container}>\r\n+      <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n \r\n-          {mapHtml && (\r\n-            <WebView\r\n-              ref={(ref) => {\r\n-                if (ref && !mapRef.current) mapRef.current = ref;\r\n-              }}\r\n-              originWhitelist={[\"*\"]}\r\n-              source={{ html: mapHtml }}\r\n-              javaScriptEnabled\r\n-              onMessage={(event) => {\r\n-                const data = JSON.parse(event.nativeEvent.data);\r\n-                setDestination(data);\r\n-                calculateFare(data);\r\n-              }}\r\n-              style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n-            />\r\n-          )}\r\n+      {mapHtml && (\r\n+        <WebView\r\n+          ref={(ref) => {\r\n+            if (ref && !mapRef.current) mapRef.current = ref;\r\n+          }}\r\n+          originWhitelist={[\"*\"]}\r\n+          source={{ html: mapHtml }}\r\n+          javaScriptEnabled\r\n+          onMessage={(event) => {\r\n+            const data = JSON.parse(event.nativeEvent.data);\r\n+            setDestination(data);\r\n+            calculateFare(data);\r\n+          }}\r\n+          style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n+        />\r\n+      )}\r\n \r\n-          <View style={styles.overlayContainer}>\r\n+      <View style={styles.overlayContainer}>\r\n+        {/* Only this part is affected by the keyboard */}\r\n+        <KeyboardAvoidingView\r\n+          behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+          keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : 30}\r\n+        >\r\n+          <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n             <View style={styles.card}>\r\n               <View style={styles.cardHeader} />\r\n \r\n               <TouchableOpacity style={styles.inputBox}>\r\n@@ -215,32 +215,34 @@\n                   <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n                 </TouchableOpacity>\r\n               </View>\r\n             </View>\r\n+          </TouchableWithoutFeedback>\r\n+        </KeyboardAvoidingView>\r\n \r\n-            <View style={styles.bottomNav}>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"home\" size={30} color=\"black\" />\r\n-                <Text>Home</Text>\r\n-              </TouchableOpacity>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n-                <Text>History</Text>\r\n-              </TouchableOpacity>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n-                <Text>Chats</Text>\r\n-              </TouchableOpacity>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n-                <Text>Profile</Text>\r\n-              </TouchableOpacity>\r\n-            </View>\r\n-          </View>\r\n+        {/* Bottom nav stays fixed */}\r\n+        <View style={styles.bottomNav}>\r\n+          <TouchableOpacity>\r\n+            <Ionicons name=\"home\" size={30} color=\"black\" />\r\n+            <Text>Home</Text>\r\n+          </TouchableOpacity>\r\n+          <TouchableOpacity>\r\n+            <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n+            <Text>History</Text>\r\n+          </TouchableOpacity>\r\n+          <TouchableOpacity>\r\n+            <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n+            <Text>Chats</Text>\r\n+          </TouchableOpacity>\r\n+          <TouchableOpacity>\r\n+            <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n+            <Text>Profile</Text>\r\n+          </TouchableOpacity>\r\n         </View>\r\n-      </TouchableWithoutFeedback>\r\n-    </KeyboardAvoidingView>\r\n+      </View>\r\n+    </View>\r\n   );\r\n+\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n   container: {\r\n"
                },
                {
                    "date": 1747229824562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,35 +145,35 @@\n     return <View style={{ flex: 1, backgroundColor: \"#fff\" }} />;\r\n   }\r\n \r\n   return (\r\n-    <View style={styles.container}>\r\n-      <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n+    <KeyboardAvoidingView\r\n+      style={{ flex: 1 }}\r\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : 30}\r\n+    >\r\n+      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n+        <View style={styles.container}>\r\n+          <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n \r\n-      {mapHtml && (\r\n-        <WebView\r\n-          ref={(ref) => {\r\n-            if (ref && !mapRef.current) mapRef.current = ref;\r\n-          }}\r\n-          originWhitelist={[\"*\"]}\r\n-          source={{ html: mapHtml }}\r\n-          javaScriptEnabled\r\n-          onMessage={(event) => {\r\n-            const data = JSON.parse(event.nativeEvent.data);\r\n-            setDestination(data);\r\n-            calculateFare(data);\r\n-          }}\r\n-          style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n-        />\r\n-      )}\r\n+          {mapHtml && (\r\n+            <WebView\r\n+              ref={(ref) => {\r\n+                if (ref && !mapRef.current) mapRef.current = ref;\r\n+              }}\r\n+              originWhitelist={[\"*\"]}\r\n+              source={{ html: mapHtml }}\r\n+              javaScriptEnabled\r\n+              onMessage={(event) => {\r\n+                const data = JSON.parse(event.nativeEvent.data);\r\n+                setDestination(data);\r\n+                calculateFare(data);\r\n+              }}\r\n+              style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n+            />\r\n+          )}\r\n \r\n-      <View style={styles.overlayContainer}>\r\n-        {/* Only this part is affected by the keyboard */}\r\n-        <KeyboardAvoidingView\r\n-          behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n-          keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : 30}\r\n-        >\r\n-          <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n+          <View style={styles.overlayContainer}>\r\n             <View style={styles.card}>\r\n               <View style={styles.cardHeader} />\r\n \r\n               <TouchableOpacity style={styles.inputBox}>\r\n@@ -215,34 +215,32 @@\n                   <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n                 </TouchableOpacity>\r\n               </View>\r\n             </View>\r\n-          </TouchableWithoutFeedback>\r\n-        </KeyboardAvoidingView>\r\n \r\n-        {/* Bottom nav stays fixed */}\r\n-        <View style={styles.bottomNav}>\r\n-          <TouchableOpacity>\r\n-            <Ionicons name=\"home\" size={30} color=\"black\" />\r\n-            <Text>Home</Text>\r\n-          </TouchableOpacity>\r\n-          <TouchableOpacity>\r\n-            <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n-            <Text>History</Text>\r\n-          </TouchableOpacity>\r\n-          <TouchableOpacity>\r\n-            <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n-            <Text>Chats</Text>\r\n-          </TouchableOpacity>\r\n-          <TouchableOpacity>\r\n-            <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n-            <Text>Profile</Text>\r\n-          </TouchableOpacity>\r\n+            <View style={styles.bottomNav}>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"home\" size={30} color=\"black\" />\r\n+                <Text>Home</Text>\r\n+              </TouchableOpacity>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n+                <Text>History</Text>\r\n+              </TouchableOpacity>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n+                <Text>Chats</Text>\r\n+              </TouchableOpacity>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n+                <Text>Profile</Text>\r\n+              </TouchableOpacity>\r\n+            </View>\r\n+          </View>\r\n         </View>\r\n-      </View>\r\n-    </View>\r\n+      </TouchableWithoutFeedback>\r\n+    </KeyboardAvoidingView>\r\n   );\r\n-\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n   container: {\r\n"
                },
                {
                    "date": 1747229844726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n   return (\r\n     <KeyboardAvoidingView\r\n       style={{ flex: 1 }}\r\n       behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n-      keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : 30}\r\n+      keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : 0}\r\n     >\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n         <View style={styles.container}>\r\n           <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n"
                },
                {
                    "date": 1747230292089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,32 +32,32 @@\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n   console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n \r\n-  const calculateFare = async (dest: { latitude: number; longitude: number }) => {\r\n-    if (!location) return;\r\n-    try {\r\n-      const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${dest.longitude},${dest.latitude}?geometries=geojson`;\r\n-      console.log(\"📡 Fetching route from:\", url);\r\n-      const res = await fetch(url);\r\n-      if (!res.ok) throw new Error(\"Failed to fetch route\");\r\n+  // const calculateFare = async (dest: { latitude: number; longitude: number }) => {\r\n+  //   if (!location) return;\r\n+  //   try {\r\n+  //     const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${dest.longitude},${dest.latitude}?geometries=geojson`;\r\n+  //     console.log(\"📡 Fetching route from:\", url);\r\n+  //     const res = await fetch(url);\r\n+  //     if (!res.ok) throw new Error(\"Failed to fetch route\");\r\n \r\n-      const data = await res.json();\r\n-      if (!data.routes || data.routes.length === 0) return;\r\n+  //     const data = await res.json();\r\n+  //     if (!data.routes || data.routes.length === 0) return;\r\n \r\n-      const distanceKm = data.routes[0].distance / 1000;\r\n-      console.log(distanceKm)\r\n-      const calculatedFare = distanceKm <= 2 ? 20 : 20 + Math.ceil(distanceKm - 2) * 5;\r\n-      console.log(calculatedFare)\r\n-      setFare(calculatedFare);\r\n+  //     const distanceKm = data.routes[0].distance / 1000;\r\n+  //     console.log(distanceKm)\r\n+  //     const calculatedFare = distanceKm <= 2 ? 20 : 20 + Math.ceil(distanceKm - 2) * 5;\r\n+  //     console.log(calculatedFare)\r\n+  //     setFare(calculatedFare);\r\n \r\n-      const coords = data.routes[0].geometry.coordinates.map((p: [number, number]) => [p[1], p[0]]);\r\n-      const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n-      mapRef.current?.postMessage(message);\r\n-    } catch (err) {\r\n-      console.error(\"Fare calculation error:\", err);\r\n-    }\r\n-  };\r\n+  //     const coords = data.routes[0].geometry.coordinates.map((p: [number, number]) => [p[1], p[0]]);\r\n+  //     const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n+  //     mapRef.current?.postMessage(message);\r\n+  //   } catch (err) {\r\n+  //     console.error(\"Fare calculation error:\", err);\r\n+  //   }\r\n+  // };\r\n \r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n@@ -165,9 +165,8 @@\n               javaScriptEnabled\r\n               onMessage={(event) => {\r\n                 const data = JSON.parse(event.nativeEvent.data);\r\n                 setDestination(data);\r\n-                calculateFare(data);\r\n               }}\r\n               style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n             />\r\n           )}\r\n"
                },
                {
                    "date": 1747230482125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n   return (\r\n     <KeyboardAvoidingView\r\n       style={{ flex: 1 }}\r\n       behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n-      keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : 0}\r\n+      keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : -300}\r\n     >\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n         <View style={styles.container}>\r\n           <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n"
                },
                {
                    "date": 1747230489023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n   return (\r\n     <KeyboardAvoidingView\r\n       style={{ flex: 1 }}\r\n       behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n-      keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : -300}\r\n+      keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : -30}\r\n     >\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n         <View style={styles.container}>\r\n           <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n"
                },
                {
                    "date": 1747230503072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n   return (\r\n     <KeyboardAvoidingView\r\n       style={{ flex: 1 }}\r\n       behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n-      keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : -30}\r\n+      keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : -31}\r\n     >\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n         <View style={styles.container}>\r\n           <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n"
                },
                {
                    "date": 1747230541223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n   return (\r\n     <KeyboardAvoidingView\r\n       style={{ flex: 1 }}\r\n       behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n-      keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : -31}\r\n+      keyboardVerticalOffset={0}\r\n     >\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n         <View style={styles.container}>\r\n           <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n"
                },
                {
                    "date": 1747230949637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,30 +214,29 @@\n                   <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n                 </TouchableOpacity>\r\n               </View>\r\n             </View>\r\n-\r\n-            <View style={styles.bottomNav}>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"home\" size={30} color=\"black\" />\r\n-                <Text>Home</Text>\r\n-              </TouchableOpacity>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n-                <Text>History</Text>\r\n-              </TouchableOpacity>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n-                <Text>Chats</Text>\r\n-              </TouchableOpacity>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n-                <Text>Profile</Text>\r\n-              </TouchableOpacity>\r\n-            </View>\r\n           </View>\r\n         </View>\r\n       </TouchableWithoutFeedback>\r\n+      <View style={styles.bottomNav}>\r\n+        <TouchableOpacity>\r\n+          <Ionicons name=\"home\" size={30} color=\"black\" />\r\n+          <Text>Home</Text>\r\n+        </TouchableOpacity>\r\n+        <TouchableOpacity>\r\n+          <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n+          <Text>History</Text>\r\n+        </TouchableOpacity>\r\n+        <TouchableOpacity>\r\n+          <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n+          <Text>Chats</Text>\r\n+        </TouchableOpacity>\r\n+        <TouchableOpacity>\r\n+          <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n+          <Text>Profile</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n     </KeyboardAvoidingView>\r\n   );\r\n }\r\n \r\n"
                },
                {
                    "date": 1747230968225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,29 +214,30 @@\n                   <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n                 </TouchableOpacity>\r\n               </View>\r\n             </View>\r\n+\r\n+            <View style={styles.bottomNav}>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"home\" size={30} color=\"black\" />\r\n+                <Text>Home</Text>\r\n+              </TouchableOpacity>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n+                <Text>History</Text>\r\n+              </TouchableOpacity>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n+                <Text>Chats</Text>\r\n+              </TouchableOpacity>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n+                <Text>Profile</Text>\r\n+              </TouchableOpacity>\r\n+            </View>\r\n           </View>\r\n         </View>\r\n       </TouchableWithoutFeedback>\r\n-      <View style={styles.bottomNav}>\r\n-        <TouchableOpacity>\r\n-          <Ionicons name=\"home\" size={30} color=\"black\" />\r\n-          <Text>Home</Text>\r\n-        </TouchableOpacity>\r\n-        <TouchableOpacity>\r\n-          <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n-          <Text>History</Text>\r\n-        </TouchableOpacity>\r\n-        <TouchableOpacity>\r\n-          <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n-          <Text>Chats</Text>\r\n-        </TouchableOpacity>\r\n-        <TouchableOpacity>\r\n-          <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n-          <Text>Profile</Text>\r\n-        </TouchableOpacity>\r\n-      </View>\r\n     </KeyboardAvoidingView>\r\n   );\r\n }\r\n \r\n"
                },
                {
                    "date": 1747231021794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,8 @@\n   return (\r\n     <KeyboardAvoidingView\r\n       style={{ flex: 1 }}\r\n       behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n-      keyboardVerticalOffset={0}\r\n     >\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n         <View style={styles.container}>\r\n           <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n"
                },
                {
                    "date": 1747231765941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,8 +148,9 @@\n   return (\r\n     <KeyboardAvoidingView\r\n       style={{ flex: 1 }}\r\n       behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      keyboardVerticalOffset={Platform.OS === \"ios\" ? -31 : 0}\r\n     >\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n         <View style={styles.container}>\r\n           <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n"
                },
                {
                    "date": 1747231791909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n   return (\r\n     <KeyboardAvoidingView\r\n       style={{ flex: 1 }}\r\n       behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n-      keyboardVerticalOffset={Platform.OS === \"ios\" ? -31 : 0}\r\n+      keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : 30}\r\n     >\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n         <View style={styles.container}>\r\n           <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n"
                },
                {
                    "date": 1747231810086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n   return (\r\n     <KeyboardAvoidingView\r\n       style={{ flex: 1 }}\r\n       behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n-      keyboardVerticalOffset={Platform.OS === \"ios\" ? 0 : 30}\r\n+      keyboardVerticalOffset={0}\r\n     >\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n         <View style={styles.container}>\r\n           <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n"
                },
                {
                    "date": 1747231829717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,11 @@\n   const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n   const [fare, setFare] = useState(20);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n-  console.log(\"OSRM_BASE_URL is\", OSRM_BASE_URL);\r\n+  const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n \r\n+\r\n   // const calculateFare = async (dest: { latitude: number; longitude: number }) => {\r\n   //   if (!location) return;\r\n   //   try {\r\n   //     const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${dest.longitude},${dest.latitude}?geometries=geojson`;\r\n"
                },
                {
                    "date": 1747231852829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,24 @@\n       console.error(\"❌ Booking error:\", error);\r\n       Alert.alert(\"Error\", \"Failed to send booking.\");\r\n     }\r\n   };\r\n+  \r\n+  useEffect(() => {\r\n+    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n+      setKeyboardOffset(0); // or positive value if needed\r\n+    });\r\n+    const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n+      setKeyboardOffset(-30); // adjust to neutralize bottom nav padding\r\n+    });\r\n \r\n+    return () => {\r\n+      showSub.remove();\r\n+      hideSub.remove();\r\n+    };\r\n+  }, []);\r\n+\r\n+\r\n   if (loading || !location) {\r\n     return <View style={{ flex: 1, backgroundColor: \"#fff\" }} />;\r\n   }\r\n \r\n"
                },
                {
                    "date": 1747231875763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n       console.error(\"❌ Booking error:\", error);\r\n       Alert.alert(\"Error\", \"Failed to send booking.\");\r\n     }\r\n   };\r\n-  \r\n+\r\n   useEffect(() => {\r\n     const showSub = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n       setKeyboardOffset(0); // or positive value if needed\r\n     });\r\n@@ -164,9 +164,9 @@\n   return (\r\n     <KeyboardAvoidingView\r\n       style={{ flex: 1 }}\r\n       behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n-      keyboardVerticalOffset={0}\r\n+      keyboardVerticalOffset={keyboardOffset}\r\n     >\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n         <View style={styles.container}>\r\n           <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n"
                },
                {
                    "date": 1747231891664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n     const showSub = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n       setKeyboardOffset(0); // or positive value if needed\r\n     });\r\n     const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n-      setKeyboardOffset(-30); // adjust to neutralize bottom nav padding\r\n+      setKeyboardOffset(-31); // adjust to neutralize bottom nav padding\r\n     });\r\n \r\n     return () => {\r\n       showSub.remove();\r\n"
                },
                {
                    "date": 1747231898505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n     const showSub = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n       setKeyboardOffset(0); // or positive value if needed\r\n     });\r\n     const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n-      setKeyboardOffset(-31); // adjust to neutralize bottom nav padding\r\n+      setKeyboardOffset(-35); // adjust to neutralize bottom nav padding\r\n     });\r\n \r\n     return () => {\r\n       showSub.remove();\r\n"
                },
                {
                    "date": 1747231917906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,14 +142,16 @@\n     }\r\n   };\r\n \r\n   useEffect(() => {\r\n+    const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n+      setKeyboardOffset(-35); // adjust to neutralize bottom nav padding\r\n+    });\r\n+    \r\n     const showSub = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n       setKeyboardOffset(0); // or positive value if needed\r\n     });\r\n-    const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n-      setKeyboardOffset(-35); // adjust to neutralize bottom nav padding\r\n-    });\r\n+    \r\n \r\n     return () => {\r\n       showSub.remove();\r\n       hideSub.remove();\r\n"
                },
                {
                    "date": 1747232023056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,10 @@\n   Platform,\r\n   ScrollView,\r\n   TouchableWithoutFeedback,\r\n   Keyboard,\r\n+  Animated,\r\n+  Easing,\r\n } from \"react-native\";\r\n import { WebViewMessageEvent, WebView } from \"react-native-webview\";\r\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n@@ -30,8 +32,9 @@\n   const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n   const [fare, setFare] = useState(20);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n+  const animatedOffset = useRef(new Animated.Value(0)).current;\r\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n \r\n \r\n   // const calculateFare = async (dest: { latitude: number; longitude: number }) => {\r\n@@ -145,14 +148,13 @@\n   useEffect(() => {\r\n     const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n       setKeyboardOffset(-35); // adjust to neutralize bottom nav padding\r\n     });\r\n-    \r\n+\r\n     const showSub = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n       setKeyboardOffset(0); // or positive value if needed\r\n     });\r\n     \r\n-\r\n     return () => {\r\n       showSub.remove();\r\n       hideSub.remove();\r\n     };\r\n"
                },
                {
                    "date": 1747232048221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,23 +145,34 @@\n     }\r\n   };\r\n \r\n   useEffect(() => {\r\n+    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n+      Animated.timing(animatedOffset, {\r\n+        toValue: 0, // adjust if needed\r\n+        duration: 200,\r\n+        useNativeDriver: false,\r\n+        easing: Easing.out(Easing.ease),\r\n+      }).start();\r\n+    });\r\n+\r\n     const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n-      setKeyboardOffset(-35); // adjust to neutralize bottom nav padding\r\n+      Animated.timing(animatedOffset, {\r\n+        toValue: -30, // or whatever offset you need to fix nav gap\r\n+        duration: 200,\r\n+        useNativeDriver: false,\r\n+        easing: Easing.inOut(Easing.ease),\r\n+      }).start();\r\n     });\r\n \r\n-    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n-      setKeyboardOffset(0); // or positive value if needed\r\n-    });\r\n-    \r\n     return () => {\r\n       showSub.remove();\r\n       hideSub.remove();\r\n     };\r\n   }, []);\r\n \r\n \r\n+\r\n   if (loading || !location) {\r\n     return <View style={{ flex: 1, backgroundColor: \"#fff\" }} />;\r\n   }\r\n \r\n"
                },
                {
                    "date": 1747232102757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,92 +182,94 @@\n       behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n       keyboardVerticalOffset={keyboardOffset}\r\n     >\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n-        <View style={styles.container}>\r\n-          <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n+        <Animated.View style={[styles.card, { marginBottom: animatedOffset }]}>\r\n+          <View style={styles.container}>\r\n+            <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n \r\n-          {mapHtml && (\r\n-            <WebView\r\n-              ref={(ref) => {\r\n-                if (ref && !mapRef.current) mapRef.current = ref;\r\n-              }}\r\n-              originWhitelist={[\"*\"]}\r\n-              source={{ html: mapHtml }}\r\n-              javaScriptEnabled\r\n-              onMessage={(event) => {\r\n-                const data = JSON.parse(event.nativeEvent.data);\r\n-                setDestination(data);\r\n-              }}\r\n-              style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n-            />\r\n-          )}\r\n+            {mapHtml && (\r\n+              <WebView\r\n+                ref={(ref) => {\r\n+                  if (ref && !mapRef.current) mapRef.current = ref;\r\n+                }}\r\n+                originWhitelist={[\"*\"]}\r\n+                source={{ html: mapHtml }}\r\n+                javaScriptEnabled\r\n+                onMessage={(event) => {\r\n+                  const data = JSON.parse(event.nativeEvent.data);\r\n+                  setDestination(data);\r\n+                }}\r\n+                style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n+              />\r\n+            )}\r\n \r\n-          <View style={styles.overlayContainer}>\r\n-            <View style={styles.card}>\r\n-              <View style={styles.cardHeader} />\r\n+            <View style={styles.overlayContainer}>\r\n+              <View style={styles.card}>\r\n+                <View style={styles.cardHeader} />\r\n \r\n-              <TouchableOpacity style={styles.inputBox}>\r\n-                <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-                <Text style={styles.inputText}>\r\n-                  {destination\r\n-                    ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n-                    : \"Saan ka papunta ngayon?\"}\r\n-                </Text>\r\n-                <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-              </TouchableOpacity>\r\n+                <TouchableOpacity style={styles.inputBox}>\r\n+                  <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n+                  <Text style={styles.inputText}>\r\n+                    {destination\r\n+                      ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n+                      : \"Saan ka papunta ngayon?\"}\r\n+                  </Text>\r\n+                  <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+                </TouchableOpacity>\r\n \r\n-              <TextInput\r\n-                style={styles.inputBoxSimple}\r\n-                placeholder=\"Name this location (optional: Home, Work, etc.)\"\r\n-                value={destinationLabel}\r\n-                onChangeText={setDestinationLabel}\r\n-              />\r\n+                <TextInput\r\n+                  style={styles.inputBoxSimple}\r\n+                  placeholder=\"Name this location (optional: Home, Work, etc.)\"\r\n+                  value={destinationLabel}\r\n+                  onChangeText={setDestinationLabel}\r\n+                />\r\n \r\n-              <TextInput\r\n-                style={styles.inputBoxSimple}\r\n-                placeholder=\"Notes sa driver\"\r\n-                value={notes}\r\n-                onChangeText={setNotes}\r\n-              />\r\n+                <TextInput\r\n+                  style={styles.inputBoxSimple}\r\n+                  placeholder=\"Notes sa driver\"\r\n+                  value={notes}\r\n+                  onChangeText={setNotes}\r\n+                />\r\n \r\n-              <TextInput\r\n-                style={styles.inputBox}\r\n-                placeholder=\"Paano ka magbabayad\"\r\n-                value={paymentMethod}\r\n-                onChangeText={setPaymentMethod}\r\n-              />\r\n+                <TextInput\r\n+                  style={styles.inputBox}\r\n+                  placeholder=\"Paano ka magbabayad\"\r\n+                  value={paymentMethod}\r\n+                  onChangeText={setPaymentMethod}\r\n+                />\r\n \r\n-              <View style={styles.totalFareContainer}>\r\n-                <View style={styles.fareBox}>\r\n-                  <Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text>\r\n+                <View style={styles.totalFareContainer}>\r\n+                  <View style={styles.fareBox}>\r\n+                    <Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text>\r\n+                  </View>\r\n+                  <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n+                    <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n+                  </TouchableOpacity>\r\n                 </View>\r\n-                <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n-                  <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n+              </View>\r\n+\r\n+              <View style={styles.bottomNav}>\r\n+                <TouchableOpacity>\r\n+                  <Ionicons name=\"home\" size={30} color=\"black\" />\r\n+                  <Text>Home</Text>\r\n                 </TouchableOpacity>\r\n+                <TouchableOpacity>\r\n+                  <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n+                  <Text>History</Text>\r\n+                </TouchableOpacity>\r\n+                <TouchableOpacity>\r\n+                  <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n+                  <Text>Chats</Text>\r\n+                </TouchableOpacity>\r\n+                <TouchableOpacity>\r\n+                  <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n+                  <Text>Profile</Text>\r\n+                </TouchableOpacity>\r\n               </View>\r\n             </View>\r\n-\r\n-            <View style={styles.bottomNav}>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"home\" size={30} color=\"black\" />\r\n-                <Text>Home</Text>\r\n-              </TouchableOpacity>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n-                <Text>History</Text>\r\n-              </TouchableOpacity>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n-                <Text>Chats</Text>\r\n-              </TouchableOpacity>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n-                <Text>Profile</Text>\r\n-              </TouchableOpacity>\r\n-            </View>\r\n           </View>\r\n-        </View>\r\n+        </Animated.View>\r\n       </TouchableWithoutFeedback>\r\n     </KeyboardAvoidingView>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1747232133712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,94 +182,92 @@\n       behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n       keyboardVerticalOffset={keyboardOffset}\r\n     >\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n-        <Animated.View style={[styles.card, { marginBottom: animatedOffset }]}>\r\n-          <View style={styles.container}>\r\n-            <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n+        <View style={styles.container}>\r\n+          <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n \r\n-            {mapHtml && (\r\n-              <WebView\r\n-                ref={(ref) => {\r\n-                  if (ref && !mapRef.current) mapRef.current = ref;\r\n-                }}\r\n-                originWhitelist={[\"*\"]}\r\n-                source={{ html: mapHtml }}\r\n-                javaScriptEnabled\r\n-                onMessage={(event) => {\r\n-                  const data = JSON.parse(event.nativeEvent.data);\r\n-                  setDestination(data);\r\n-                }}\r\n-                style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n-              />\r\n-            )}\r\n+          {mapHtml && (\r\n+            <WebView\r\n+              ref={(ref) => {\r\n+                if (ref && !mapRef.current) mapRef.current = ref;\r\n+              }}\r\n+              originWhitelist={[\"*\"]}\r\n+              source={{ html: mapHtml }}\r\n+              javaScriptEnabled\r\n+              onMessage={(event) => {\r\n+                const data = JSON.parse(event.nativeEvent.data);\r\n+                setDestination(data);\r\n+              }}\r\n+              style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n+            />\r\n+          )}\r\n \r\n-            <View style={styles.overlayContainer}>\r\n-              <View style={styles.card}>\r\n-                <View style={styles.cardHeader} />\r\n+          <View style={styles.overlayContainer}>\r\n+            <View style={styles.card}>\r\n+              <View style={styles.cardHeader} />\r\n \r\n-                <TouchableOpacity style={styles.inputBox}>\r\n-                  <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-                  <Text style={styles.inputText}>\r\n-                    {destination\r\n-                      ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n-                      : \"Saan ka papunta ngayon?\"}\r\n-                  </Text>\r\n-                  <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-                </TouchableOpacity>\r\n+              <TouchableOpacity style={styles.inputBox}>\r\n+                <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n+                <Text style={styles.inputText}>\r\n+                  {destination\r\n+                    ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n+                    : \"Saan ka papunta ngayon?\"}\r\n+                </Text>\r\n+                <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+              </TouchableOpacity>\r\n \r\n-                <TextInput\r\n-                  style={styles.inputBoxSimple}\r\n-                  placeholder=\"Name this location (optional: Home, Work, etc.)\"\r\n-                  value={destinationLabel}\r\n-                  onChangeText={setDestinationLabel}\r\n-                />\r\n+              <TextInput\r\n+                style={styles.inputBoxSimple}\r\n+                placeholder=\"Name this location (optional: Home, Work, etc.)\"\r\n+                value={destinationLabel}\r\n+                onChangeText={setDestinationLabel}\r\n+              />\r\n \r\n-                <TextInput\r\n-                  style={styles.inputBoxSimple}\r\n-                  placeholder=\"Notes sa driver\"\r\n-                  value={notes}\r\n-                  onChangeText={setNotes}\r\n-                />\r\n+              <TextInput\r\n+                style={styles.inputBoxSimple}\r\n+                placeholder=\"Notes sa driver\"\r\n+                value={notes}\r\n+                onChangeText={setNotes}\r\n+              />\r\n \r\n-                <TextInput\r\n-                  style={styles.inputBox}\r\n-                  placeholder=\"Paano ka magbabayad\"\r\n-                  value={paymentMethod}\r\n-                  onChangeText={setPaymentMethod}\r\n-                />\r\n+              <TextInput\r\n+                style={styles.inputBox}\r\n+                placeholder=\"Paano ka magbabayad\"\r\n+                value={paymentMethod}\r\n+                onChangeText={setPaymentMethod}\r\n+              />\r\n \r\n-                <View style={styles.totalFareContainer}>\r\n-                  <View style={styles.fareBox}>\r\n-                    <Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text>\r\n-                  </View>\r\n-                  <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n-                    <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n-                  </TouchableOpacity>\r\n+              <View style={styles.totalFareContainer}>\r\n+                <View style={styles.fareBox}>\r\n+                  <Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text>\r\n                 </View>\r\n-              </View>\r\n-\r\n-              <View style={styles.bottomNav}>\r\n-                <TouchableOpacity>\r\n-                  <Ionicons name=\"home\" size={30} color=\"black\" />\r\n-                  <Text>Home</Text>\r\n+                <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n+                  <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n                 </TouchableOpacity>\r\n-                <TouchableOpacity>\r\n-                  <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n-                  <Text>History</Text>\r\n-                </TouchableOpacity>\r\n-                <TouchableOpacity>\r\n-                  <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n-                  <Text>Chats</Text>\r\n-                </TouchableOpacity>\r\n-                <TouchableOpacity>\r\n-                  <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n-                  <Text>Profile</Text>\r\n-                </TouchableOpacity>\r\n               </View>\r\n             </View>\r\n+\r\n+            <View style={styles.bottomNav}>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"home\" size={30} color=\"black\" />\r\n+                <Text>Home</Text>\r\n+              </TouchableOpacity>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n+                <Text>History</Text>\r\n+              </TouchableOpacity>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n+                <Text>Chats</Text>\r\n+              </TouchableOpacity>\r\n+              <TouchableOpacity>\r\n+                <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n+                <Text>Profile</Text>\r\n+              </TouchableOpacity>\r\n+            </View>\r\n           </View>\r\n-        </Animated.View>\r\n+        </View>\r\n       </TouchableWithoutFeedback>\r\n     </KeyboardAvoidingView>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1747232163442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,8 @@\n   Platform,\r\n   ScrollView,\r\n   TouchableWithoutFeedback,\r\n   Keyboard,\r\n-  Animated,\r\n-  Easing,\r\n } from \"react-native\";\r\n import { WebViewMessageEvent, WebView } from \"react-native-webview\";\r\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n@@ -32,9 +30,8 @@\n   const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n   const [fare, setFare] = useState(20);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n-  const animatedOffset = useRef(new Animated.Value(0)).current;\r\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n \r\n \r\n   // const calculateFare = async (dest: { latitude: number; longitude: number }) => {\r\n@@ -145,34 +142,23 @@\n     }\r\n   };\r\n \r\n   useEffect(() => {\r\n-    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n-      Animated.timing(animatedOffset, {\r\n-        toValue: 0, // adjust if needed\r\n-        duration: 200,\r\n-        useNativeDriver: false,\r\n-        easing: Easing.out(Easing.ease),\r\n-      }).start();\r\n+    const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n+      setKeyboardOffset(-35); // adjust to neutralize bottom nav padding\r\n     });\r\n \r\n-    const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n-      Animated.timing(animatedOffset, {\r\n-        toValue: -30, // or whatever offset you need to fix nav gap\r\n-        duration: 200,\r\n-        useNativeDriver: false,\r\n-        easing: Easing.inOut(Easing.ease),\r\n-      }).start();\r\n+    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n+      setKeyboardOffset(0); // or positive value if needed\r\n     });\r\n-\r\n+    \r\n     return () => {\r\n       showSub.remove();\r\n       hideSub.remove();\r\n     };\r\n   }, []);\r\n \r\n \r\n-\r\n   if (loading || !location) {\r\n     return <View style={{ flex: 1, backgroundColor: \"#fff\" }} />;\r\n   }\r\n \r\n"
                },
                {
                    "date": 1747234017537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,10 @@\n   Platform,\r\n   ScrollView,\r\n   TouchableWithoutFeedback,\r\n   Keyboard,\r\n+  Animated, \r\n+  Easing\r\n } from \"react-native\";\r\n import { WebViewMessageEvent, WebView } from \"react-native-webview\";\r\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n@@ -31,8 +33,9 @@\n   const [fare, setFare] = useState(20);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n+  const animatedOffset = useRef(new Animated.Value(0)).current;\r\n \r\n \r\n   // const calculateFare = async (dest: { latitude: number; longitude: number }) => {\r\n   //   if (!location) return;\r\n@@ -142,33 +145,40 @@\n     }\r\n   };\r\n \r\n   useEffect(() => {\r\n+    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n+      Animated.timing(animatedOffset, {\r\n+        toValue: 0,\r\n+        duration: 200,\r\n+        easing: Easing.out(Easing.ease),\r\n+        useNativeDriver: false,\r\n+      }).start();\r\n+    });\r\n+\r\n     const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n-      setKeyboardOffset(-35); // adjust to neutralize bottom nav padding\r\n+      Animated.timing(animatedOffset, {\r\n+        toValue: -35,\r\n+        duration: 200,\r\n+        easing: Easing.out(Easing.ease),\r\n+        useNativeDriver: false,\r\n+      }).start();\r\n     });\r\n \r\n-    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n-      setKeyboardOffset(0); // or positive value if needed\r\n-    });\r\n-    \r\n     return () => {\r\n       showSub.remove();\r\n       hideSub.remove();\r\n     };\r\n   }, []);\r\n \r\n \r\n+\r\n   if (loading || !location) {\r\n     return <View style={{ flex: 1, backgroundColor: \"#fff\" }} />;\r\n   }\r\n \r\n   return (\r\n-    <KeyboardAvoidingView\r\n-      style={{ flex: 1 }}\r\n-      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n-      keyboardVerticalOffset={keyboardOffset}\r\n-    >\r\n+    <View style={[styles.overlayContainer, { marginBottom: animatedOffset }]}>\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n         <View style={styles.container}>\r\n           <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n \r\n@@ -253,9 +263,9 @@\n             </View>\r\n           </View>\r\n         </View>\r\n       </TouchableWithoutFeedback>\r\n-    </KeyboardAvoidingView>\r\n+    </View>\r\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n"
                },
                {
                    "date": 1747234246717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,12 @@\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n   const animatedOffset = useRef(new Animated.Value(0)).current;\r\n+  const cardOffsetAnim = useRef(new Animated.Value(0)).current;\r\n \r\n \r\n+\r\n   // const calculateFare = async (dest: { latitude: number; longitude: number }) => {\r\n   //   if (!location) return;\r\n   //   try {\r\n   //     const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${dest.longitude},${dest.latitude}?geometries=geojson`;\r\n@@ -145,34 +147,33 @@\n     }\r\n   };\r\n \r\n   useEffect(() => {\r\n-    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n-      Animated.timing(animatedOffset, {\r\n-        toValue: 0,\r\n+    const show = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n+      Animated.timing(cardOffsetAnim, {\r\n+        toValue: 35, // move card up\r\n         duration: 200,\r\n-        easing: Easing.out(Easing.ease),\r\n         useNativeDriver: false,\r\n       }).start();\r\n     });\r\n \r\n-    const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n-      Animated.timing(animatedOffset, {\r\n-        toValue: -35,\r\n+    const hide = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n+      Animated.timing(cardOffsetAnim, {\r\n+        toValue: 0, // move card back down\r\n         duration: 200,\r\n-        easing: Easing.out(Easing.ease),\r\n         useNativeDriver: false,\r\n       }).start();\r\n     });\r\n \r\n     return () => {\r\n-      showSub.remove();\r\n-      hideSub.remove();\r\n+      show.remove();\r\n+      hide.remove();\r\n     };\r\n   }, []);\r\n \r\n \r\n \r\n+\r\n   if (loading || !location) {\r\n     return <View style={{ flex: 1, backgroundColor: \"#fff\" }} />;\r\n   }\r\n \r\n@@ -198,9 +199,9 @@\n             />\r\n           )}\r\n \r\n           <View style={styles.overlayContainer}>\r\n-            <View style={styles.card}>\r\n+            <Animated.View style={[styles.card, { bottom: 75 + cardOffsetAnim }]}>\r\n               <View style={styles.cardHeader} />\r\n \r\n               <TouchableOpacity style={styles.inputBox}>\r\n                 <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n@@ -240,9 +241,9 @@\n                 <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n                   <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n                 </TouchableOpacity>\r\n               </View>\r\n-            </View>\r\n+            </Animated.View>\r\n \r\n             <View style={styles.bottomNav}>\r\n               <TouchableOpacity>\r\n                 <Ionicons name=\"home\" size={30} color=\"black\" />\r\n"
                },
                {
                    "date": 1747234309069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,8 @@\n   Platform,\r\n   ScrollView,\r\n   TouchableWithoutFeedback,\r\n   Keyboard,\r\n-  Animated, \r\n-  Easing\r\n } from \"react-native\";\r\n import { WebViewMessageEvent, WebView } from \"react-native-webview\";\r\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n@@ -33,13 +31,10 @@\n   const [fare, setFare] = useState(20);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType | null>(null);\r\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n-  const animatedOffset = useRef(new Animated.Value(0)).current;\r\n-  const cardOffsetAnim = useRef(new Animated.Value(0)).current;\r\n \r\n \r\n-\r\n   // const calculateFare = async (dest: { latitude: number; longitude: number }) => {\r\n   //   if (!location) return;\r\n   //   try {\r\n   //     const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${dest.longitude},${dest.latitude}?geometries=geojson`;\r\n@@ -147,39 +142,33 @@\n     }\r\n   };\r\n \r\n   useEffect(() => {\r\n-    const show = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n-      Animated.timing(cardOffsetAnim, {\r\n-        toValue: 35, // move card up\r\n-        duration: 200,\r\n-        useNativeDriver: false,\r\n-      }).start();\r\n+    const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n+      setKeyboardOffset(-35); // adjust to neutralize bottom nav padding\r\n     });\r\n \r\n-    const hide = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n-      Animated.timing(cardOffsetAnim, {\r\n-        toValue: 0, // move card back down\r\n-        duration: 200,\r\n-        useNativeDriver: false,\r\n-      }).start();\r\n+    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n+      setKeyboardOffset(0); // or positive value if needed\r\n     });\r\n-\r\n+    \r\n     return () => {\r\n-      show.remove();\r\n-      hide.remove();\r\n+      showSub.remove();\r\n+      hideSub.remove();\r\n     };\r\n   }, []);\r\n \r\n \r\n-\r\n-\r\n   if (loading || !location) {\r\n     return <View style={{ flex: 1, backgroundColor: \"#fff\" }} />;\r\n   }\r\n \r\n   return (\r\n-    <View style={[styles.overlayContainer, { marginBottom: animatedOffset }]}>\r\n+    <KeyboardAvoidingView\r\n+      style={{ flex: 1 }}\r\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      keyboardVerticalOffset={keyboardOffset}\r\n+    >\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n         <View style={styles.container}>\r\n           <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n \r\n@@ -199,9 +188,9 @@\n             />\r\n           )}\r\n \r\n           <View style={styles.overlayContainer}>\r\n-            <Animated.View style={[styles.card, { bottom: 75 + cardOffsetAnim }]}>\r\n+            <View style={styles.card}>\r\n               <View style={styles.cardHeader} />\r\n \r\n               <TouchableOpacity style={styles.inputBox}>\r\n                 <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n@@ -241,9 +230,9 @@\n                 <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n                   <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n                 </TouchableOpacity>\r\n               </View>\r\n-            </Animated.View>\r\n+            </View>\r\n \r\n             <View style={styles.bottomNav}>\r\n               <TouchableOpacity>\r\n                 <Ionicons name=\"home\" size={30} color=\"black\" />\r\n@@ -264,9 +253,9 @@\n             </View>\r\n           </View>\r\n         </View>\r\n       </TouchableWithoutFeedback>\r\n-    </View>\r\n+    </KeyboardAvoidingView>\r\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n"
                },
                {
                    "date": 1747234369502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,9 @@\n \r\n   return (\r\n     <KeyboardAvoidingView\r\n       style={{ flex: 1 }}\r\n-      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : undefined}\r\n       keyboardVerticalOffset={keyboardOffset}\r\n     >\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n         <View style={styles.container}>\r\n"
                },
                {
                    "date": 1747234553648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,54 +186,57 @@\n               }}\r\n               style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n             />\r\n           )}\r\n-\r\n           <View style={styles.overlayContainer}>\r\n-            <View style={styles.card}>\r\n-              <View style={styles.cardHeader} />\r\n+            <ScrollView\r\n+              contentContainerStyle={{ flexGrow: 1 }}\r\n+              keyboardShouldPersistTaps=\"handled\"\r\n+            >\r\n+              <View style={styles.card}>\r\n+                <View style={styles.cardHeader} />\r\n \r\n-              <TouchableOpacity style={styles.inputBox}>\r\n-                <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-                <Text style={styles.inputText}>\r\n-                  {destination\r\n-                    ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n-                    : \"Saan ka papunta ngayon?\"}\r\n-                </Text>\r\n-                <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-              </TouchableOpacity>\r\n+                <TouchableOpacity style={styles.inputBox}>\r\n+                  <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n+                  <Text style={styles.inputText}>\r\n+                    {destination\r\n+                      ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n+                      : \"Saan ka papunta ngayon?\"}\r\n+                  </Text>\r\n+                  <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+                </TouchableOpacity>\r\n \r\n-              <TextInput\r\n-                style={styles.inputBoxSimple}\r\n-                placeholder=\"Name this location (optional: Home, Work, etc.)\"\r\n-                value={destinationLabel}\r\n-                onChangeText={setDestinationLabel}\r\n-              />\r\n+                <TextInput\r\n+                  style={styles.inputBoxSimple}\r\n+                  placeholder=\"Name this location (optional: Home, Work, etc.)\"\r\n+                  value={destinationLabel}\r\n+                  onChangeText={setDestinationLabel}\r\n+                />\r\n \r\n-              <TextInput\r\n-                style={styles.inputBoxSimple}\r\n-                placeholder=\"Notes sa driver\"\r\n-                value={notes}\r\n-                onChangeText={setNotes}\r\n-              />\r\n+                <TextInput\r\n+                  style={styles.inputBoxSimple}\r\n+                  placeholder=\"Notes sa driver\"\r\n+                  value={notes}\r\n+                  onChangeText={setNotes}\r\n+                />\r\n \r\n-              <TextInput\r\n-                style={styles.inputBox}\r\n-                placeholder=\"Paano ka magbabayad\"\r\n-                value={paymentMethod}\r\n-                onChangeText={setPaymentMethod}\r\n-              />\r\n+                <TextInput\r\n+                  style={styles.inputBox}\r\n+                  placeholder=\"Paano ka magbabayad\"\r\n+                  value={paymentMethod}\r\n+                  onChangeText={setPaymentMethod}\r\n+                />\r\n \r\n-              <View style={styles.totalFareContainer}>\r\n-                <View style={styles.fareBox}>\r\n-                  <Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text>\r\n+                <View style={styles.totalFareContainer}>\r\n+                  <View style={styles.fareBox}>\r\n+                    <Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text>\r\n+                  </View>\r\n+                  <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n+                    <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n+                  </TouchableOpacity>\r\n                 </View>\r\n-                <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n-                  <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n-                </TouchableOpacity>\r\n               </View>\r\n-            </View>\r\n-\r\n+            </ScrollView>            \r\n             <View style={styles.bottomNav}>\r\n               <TouchableOpacity>\r\n                 <Ionicons name=\"home\" size={30} color=\"black\" />\r\n                 <Text>Home</Text>\r\n"
                },
                {
                    "date": 1747234575252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,8 +190,9 @@\n           <View style={styles.overlayContainer}>\r\n             <ScrollView\r\n               contentContainerStyle={{ flexGrow: 1 }}\r\n               keyboardShouldPersistTaps=\"handled\"\r\n+              \r\n             >\r\n               <View style={styles.card}>\r\n                 <View style={styles.cardHeader} />\r\n \r\n@@ -266,8 +267,9 @@\n     flex: 1,\r\n     backgroundColor: \"#fff\",\r\n   },\r\n   overlayContainer: {\r\n+    paddingBottom: Platform.OS === \"android\" ? 20 : 0,\r\n     position: \"absolute\",\r\n     bottom: 0,\r\n     width: \"100%\",\r\n     alignItems: \"center\",\r\n"
                },
                {
                    "date": 1747234601403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,9 @@\n   }, []);\r\n \r\n \r\n   if (loading || !location) {\r\n-    return <View style={{ flex: 1, backgroundColor: \"#fff\" }} />;\r\n+    return null;\r\n   }\r\n \r\n   return (\r\n     <KeyboardAvoidingView\r\n@@ -190,9 +190,8 @@\n           <View style={styles.overlayContainer}>\r\n             <ScrollView\r\n               contentContainerStyle={{ flexGrow: 1 }}\r\n               keyboardShouldPersistTaps=\"handled\"\r\n-              \r\n             >\r\n               <View style={styles.card}>\r\n                 <View style={styles.cardHeader} />\r\n \r\n"
                },
                {
                    "date": 1747234617788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,12 +187,8 @@\n               style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n             />\r\n           )}\r\n           <View style={styles.overlayContainer}>\r\n-            <ScrollView\r\n-              contentContainerStyle={{ flexGrow: 1 }}\r\n-              keyboardShouldPersistTaps=\"handled\"\r\n-            >\r\n               <View style={styles.card}>\r\n                 <View style={styles.cardHeader} />\r\n \r\n                 <TouchableOpacity style={styles.inputBox}>\r\n@@ -233,10 +229,9 @@\n                   <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n                     <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n                   </TouchableOpacity>\r\n                 </View>\r\n-              </View>\r\n-            </ScrollView>            \r\n+              </View>          \r\n             <View style={styles.bottomNav}>\r\n               <TouchableOpacity>\r\n                 <Ionicons name=\"home\" size={30} color=\"black\" />\r\n                 <Text>Home</Text>\r\n"
                },
                {
                    "date": 1747235946746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n import { OSRM_BASE_URL } from \"../../config\";\r\n+import { API_BASE_URL } from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n"
                },
                {
                    "date": 1747236015860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n       notes,\r\n     };\r\n \r\n     try {\r\n-      const res = await fetch(\"https://your-backend-url/api/book\", {\r\n+      const res = await fetch(\"${API_BASE_URL}/api/book\", {\r\n         method: \"POST\",\r\n         headers: {\r\n           \"Content-Type\": \"application/json\",\r\n         },\r\n"
                },
                {
                    "date": 1747236033680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n       notes,\r\n     };\r\n \r\n     try {\r\n-      const res = await fetch(\"${API_BASE_URL}/api/book\", {\r\n+      const res = await fetch(\"https://your-backend-url/api/book\", {\r\n         method: \"POST\",\r\n         headers: {\r\n           \"Content-Type\": \"application/json\",\r\n         },\r\n"
                },
                {
                    "date": 1747236194635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,36 +114,42 @@\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n     }\r\n \r\n-    const simulatedBookingData = {\r\n+    const bookingData = {\r\n       pickupLat: location.latitude,\r\n       pickupLng: location.longitude,\r\n       destinationLat: destination.latitude,\r\n       destinationLng: destination.longitude,\r\n-      fare: 20,\r\n-      paymentMethod: \"cash\",\r\n+      fare: 20, // static fare for now\r\n+      paymentMethod: \"cash\", // assuming default\r\n       notes,\r\n     };\r\n \r\n     try {\r\n-      const res = await fetch(\"https://your-backend-url/api/book\", {\r\n+      const response = await fetch(`${API_BASE_URL}/api/book`, {\r\n         method: \"POST\",\r\n         headers: {\r\n           \"Content-Type\": \"application/json\",\r\n         },\r\n-        body: JSON.stringify(simulatedBookingData),\r\n+        body: JSON.stringify(bookingData),\r\n       });\r\n \r\n-      const data = await res.json();\r\n-      console.log(\"✅ Backend response:\", data);\r\n+      const result = await response.json();\r\n+\r\n+      if (!response.ok) {\r\n+        throw new Error(result.message || \"Something went wrong\");\r\n+      }\r\n+\r\n+      console.log(\"✅ Booking sent:\", result);\r\n       Alert.alert(\"Success\", \"Booking sent successfully.\");\r\n     } catch (error) {\r\n       console.error(\"❌ Booking error:\", error);\r\n-      Alert.alert(\"Error\", \"Failed to send booking.\");\r\n+      Alert.alert(\"Error\", \"Failed to send booking. Please try again.\");\r\n     }\r\n   };\r\n \r\n+\r\n   useEffect(() => {\r\n     const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n       setKeyboardOffset(-35); // adjust to neutralize bottom nav padding\r\n     });\r\n"
                },
                {
                    "date": 1747246718004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,58 +9,32 @@\n   TextInput,\r\n   Alert,\r\n   KeyboardAvoidingView,\r\n   Platform,\r\n-  ScrollView,\r\n   TouchableWithoutFeedback,\r\n   Keyboard,\r\n } from \"react-native\";\r\n-import { WebViewMessageEvent, WebView } from \"react-native-webview\";\r\n+import { WebView } from \"react-native-webview\";\r\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n-import { OSRM_BASE_URL } from \"../../config\";\r\n-import { API_BASE_URL } from \"../../config\";\r\n+import { OSRM_BASE_URL, API_BASE_URL } from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n-  const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n+  const [destination, setDestination] = useState(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [notes, setNotes] = useState(\"\");\r\n   const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n   const [fare, setFare] = useState(20);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n-  const mapRef = useRef<WebViewType | null>(null);\r\n+  const mapRef = useRef(null);\r\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n+  const [matchedDriver, setMatchedDriver] = useState(null);\r\n+  const [bookingId, setBookingId] = useState(null);\r\n \r\n-\r\n-  // const calculateFare = async (dest: { latitude: number; longitude: number }) => {\r\n-  //   if (!location) return;\r\n-  //   try {\r\n-  //     const url = `${OSRM_BASE_URL}/route/v1/driving/${location.longitude},${location.latitude};${dest.longitude},${dest.latitude}?geometries=geojson`;\r\n-  //     console.log(\"📡 Fetching route from:\", url);\r\n-  //     const res = await fetch(url);\r\n-  //     if (!res.ok) throw new Error(\"Failed to fetch route\");\r\n-\r\n-  //     const data = await res.json();\r\n-  //     if (!data.routes || data.routes.length === 0) return;\r\n-\r\n-  //     const distanceKm = data.routes[0].distance / 1000;\r\n-  //     console.log(distanceKm)\r\n-  //     const calculatedFare = distanceKm <= 2 ? 20 : 20 + Math.ceil(distanceKm - 2) * 5;\r\n-  //     console.log(calculatedFare)\r\n-  //     setFare(calculatedFare);\r\n-\r\n-  //     const coords = data.routes[0].geometry.coordinates.map((p: [number, number]) => [p[1], p[0]]);\r\n-  //     const message = JSON.stringify({ type: \"drawRoute\", coords });\r\n-  //     mapRef.current?.postMessage(message);\r\n-  //   } catch (err) {\r\n-  //     console.error(\"Fare calculation error:\", err);\r\n-  //   }\r\n-  // };\r\n-\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n@@ -119,10 +93,10 @@\n       pickupLat: location.latitude,\r\n       pickupLng: location.longitude,\r\n       destinationLat: destination.latitude,\r\n       destinationLng: destination.longitude,\r\n-      fare: 20, // static fare for now\r\n-      paymentMethod: \"cash\", // assuming default\r\n+      fare: 20,\r\n+      paymentMethod: \"cash\",\r\n       notes,\r\n     };\r\n \r\n     try {\r\n@@ -134,128 +108,112 @@\n         body: JSON.stringify(bookingData),\r\n       });\r\n \r\n       const result = await response.json();\r\n-\r\n-      if (!response.ok) {\r\n-        throw new Error(result.message || \"Something went wrong\");\r\n-      }\r\n-\r\n-      console.log(\"✅ Booking sent:\", result);\r\n+      if (!response.ok) throw new Error(result.message || \"Something went wrong\");\r\n+      setBookingId(result.booking.id);\r\n       Alert.alert(\"Success\", \"Booking sent successfully.\");\r\n     } catch (error) {\r\n       console.error(\"❌ Booking error:\", error);\r\n       Alert.alert(\"Error\", \"Failed to send booking. Please try again.\");\r\n     }\r\n   };\r\n \r\n-\r\n   useEffect(() => {\r\n-    const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => {\r\n-      setKeyboardOffset(-35); // adjust to neutralize bottom nav padding\r\n-    });\r\n-\r\n-    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => {\r\n-      setKeyboardOffset(0); // or positive value if needed\r\n-    });\r\n-    \r\n+    const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => setKeyboardOffset(-35));\r\n+    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => setKeyboardOffset(0));\r\n     return () => {\r\n       showSub.remove();\r\n       hideSub.remove();\r\n     };\r\n   }, []);\r\n \r\n+  useEffect(() => {\r\n+    let interval;\r\n+    const pollForDriverMatch = async () => {\r\n+      if (!bookingId) return;\r\n+      try {\r\n+        const res = await fetch(`${API_BASE_URL}/api/bookings`);\r\n+        const allBookings = await res.json();\r\n+        const myBooking = allBookings.find(b => b.id === bookingId);\r\n+        if (myBooking && myBooking.status === \"accepted\" && !myBooking.passengerConfirmed) {\r\n+          setMatchedDriver(myBooking);\r\n+        }\r\n+      } catch (err) {\r\n+        console.error(\"❌ Poll error:\", err);\r\n+      }\r\n+    };\r\n+    interval = setInterval(pollForDriverMatch, 4000);\r\n+    return () => clearInterval(interval);\r\n+  }, [bookingId]);\r\n \r\n-  if (loading || !location) {\r\n-    return null;\r\n-  }\r\n+  if (loading || !location) return null;\r\n \r\n   return (\r\n-    <KeyboardAvoidingView\r\n-      style={{ flex: 1 }}\r\n-      behavior={Platform.OS === \"ios\" ? \"padding\" : undefined}\r\n-      keyboardVerticalOffset={keyboardOffset}\r\n-    >\r\n+    <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === \"ios\" ? \"padding\" : undefined} keyboardVerticalOffset={keyboardOffset}>\r\n       <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n         <View style={styles.container}>\r\n-          <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\r\n-\r\n+          <StatusBar barStyle=\"light-content\" translucent backgroundColor=\"black\" />\r\n           {mapHtml && (\r\n             <WebView\r\n-              ref={(ref) => {\r\n-                if (ref && !mapRef.current) mapRef.current = ref;\r\n-              }}\r\n+              ref={(ref) => ref && !mapRef.current && (mapRef.current = ref)}\r\n               originWhitelist={[\"*\"]}\r\n               source={{ html: mapHtml }}\r\n               javaScriptEnabled\r\n-              onMessage={(event) => {\r\n-                const data = JSON.parse(event.nativeEvent.data);\r\n-                setDestination(data);\r\n-              }}\r\n+              onMessage={(event) => setDestination(JSON.parse(event.nativeEvent.data))}\r\n               style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n             />\r\n           )}\r\n+\r\n           <View style={styles.overlayContainer}>\r\n-              <View style={styles.card}>\r\n-                <View style={styles.cardHeader} />\r\n-\r\n-                <TouchableOpacity style={styles.inputBox}>\r\n-                  <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-                  <Text style={styles.inputText}>\r\n-                    {destination\r\n-                      ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}`\r\n-                      : \"Saan ka papunta ngayon?\"}\r\n-                  </Text>\r\n-                  <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-                </TouchableOpacity>\r\n-\r\n-                <TextInput\r\n-                  style={styles.inputBoxSimple}\r\n-                  placeholder=\"Name this location (optional: Home, Work, etc.)\"\r\n-                  value={destinationLabel}\r\n-                  onChangeText={setDestinationLabel}\r\n-                />\r\n-\r\n-                <TextInput\r\n-                  style={styles.inputBoxSimple}\r\n-                  placeholder=\"Notes sa driver\"\r\n-                  value={notes}\r\n-                  onChangeText={setNotes}\r\n-                />\r\n-\r\n-                <TextInput\r\n-                  style={styles.inputBox}\r\n-                  placeholder=\"Paano ka magbabayad\"\r\n-                  value={paymentMethod}\r\n-                  onChangeText={setPaymentMethod}\r\n-                />\r\n-\r\n-                <View style={styles.totalFareContainer}>\r\n-                  <View style={styles.fareBox}>\r\n-                    <Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text>\r\n-                  </View>\r\n-                  <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}>\r\n-                    <Text style={styles.bookNowText}>BOOK NOW</Text>\r\n+            <View style={styles.card}>\r\n+              <View style={styles.cardHeader} />\r\n+              <TouchableOpacity style={styles.inputBox}>\r\n+                <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n+                <Text style={styles.inputText}>\r\n+                  {destination ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}` : \"Saan ka papunta ngayon?\"}\r\n+                </Text>\r\n+                <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+              </TouchableOpacity>\r\n+              <TextInput style={styles.inputBoxSimple} placeholder=\"Name this location (optional: Home, Work, etc.)\" value={destinationLabel} onChangeText={setDestinationLabel} />\r\n+              <TextInput style={styles.inputBoxSimple} placeholder=\"Notes sa driver\" value={notes} onChangeText={setNotes} />\r\n+              <TextInput style={styles.inputBox} placeholder=\"Paano ka magbabayad\" value={paymentMethod} onChangeText={setPaymentMethod} />\r\n+              <View style={styles.totalFareContainer}>\r\n+                <View style={styles.fareBox}><Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text></View>\r\n+                <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}><Text style={styles.bookNowText}>BOOK NOW</Text></TouchableOpacity>\r\n+              </View>\r\n+              {matchedDriver && (\r\n+                <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+                  <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n+                  <Text>Driver ID: {matchedDriver.driverId}</Text>\r\n+                  <TouchableOpacity\r\n+                    onPress={async () => {\r\n+                      try {\r\n+                        const res = await fetch(`${API_BASE_URL}/api/confirm-driver`, {\r\n+                          method: \"POST\",\r\n+                          headers: { \"Content-Type\": \"application/json\" },\r\n+                          body: JSON.stringify({ bookingId }),\r\n+                        });\r\n+                        const data = await res.json();\r\n+                        Alert.alert(\"Confirmed\", \"You accepted the driver!\");\r\n+                        setMatchedDriver(null);\r\n+                      } catch (error) {\r\n+                        console.error(\"❌ Confirm error:\", error);\r\n+                      }\r\n+                    }}\r\n+                    style={{ backgroundColor: \"#3cba54\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+                  >\r\n+                    <Text style={{ color: \"white\", textAlign: \"center\" }}>CONFIRM DRIVER</Text>\r\n                   </TouchableOpacity>\r\n                 </View>\r\n-              </View>          \r\n+              )}\r\n+            </View>\r\n+\r\n             <View style={styles.bottomNav}>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"home\" size={30} color=\"black\" />\r\n-                <Text>Home</Text>\r\n-              </TouchableOpacity>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"document-text-outline\" size={30} color=\"black\" />\r\n-                <Text>History</Text>\r\n-              </TouchableOpacity>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" />\r\n-                <Text>Chats</Text>\r\n-              </TouchableOpacity>\r\n-              <TouchableOpacity>\r\n-                <Ionicons name=\"person-outline\" size={30} color=\"black\" />\r\n-                <Text>Profile</Text>\r\n-              </TouchableOpacity>\r\n+              <TouchableOpacity><Ionicons name=\"home\" size={30} color=\"black\" /><Text>Home</Text></TouchableOpacity>\r\n+              <TouchableOpacity><Ionicons name=\"document-text-outline\" size={30} color=\"black\" /><Text>History</Text></TouchableOpacity>\r\n+              <TouchableOpacity><Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" /><Text>Chats</Text></TouchableOpacity>\r\n+              <TouchableOpacity><Ionicons name=\"person-outline\" size={30} color=\"black\" /><Text>Profile</Text></TouchableOpacity>\r\n             </View>\r\n           </View>\r\n         </View>\r\n       </TouchableWithoutFeedback>\r\n@@ -263,89 +221,18 @@\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n-  container: {\r\n-    flex: 1,\r\n-    backgroundColor: \"#fff\",\r\n-  },\r\n-  overlayContainer: {\r\n-    paddingBottom: Platform.OS === \"android\" ? 20 : 0,\r\n-    position: \"absolute\",\r\n-    bottom: 0,\r\n-    width: \"100%\",\r\n-    alignItems: \"center\",\r\n-  },\r\n-  card: {\r\n-    position: \"absolute\",\r\n-    bottom: 75,\r\n-    backgroundColor: \"#81C3E1\",\r\n-    width: width * 0.95,\r\n-    alignSelf: \"center\",\r\n-    borderRadius: 10,\r\n-    padding: 10,\r\n-  },\r\n-  cardHeader: {\r\n-    width: 150,\r\n-    height: 4,\r\n-    backgroundColor: \"black\",\r\n-    alignSelf: \"center\",\r\n-    borderRadius: 5,\r\n-    marginBottom: 10,\r\n-  },\r\n-  inputBox: {\r\n-    backgroundColor: \"white\",\r\n-    borderRadius: 8,\r\n-    flexDirection: \"row\",\r\n-    alignItems: \"center\",\r\n-    justifyContent: \"space-between\",\r\n-    paddingHorizontal: 10,\r\n-    height: 40,\r\n-    marginBottom: 5,\r\n-  },\r\n-  inputBoxSimple: {\r\n-    backgroundColor: \"white\",\r\n-    borderRadius: 8,\r\n-    flexDirection: \"row\",\r\n-    alignItems: \"center\",\r\n-    paddingHorizontal: 10,\r\n-    height: 40,\r\n-    marginBottom: 5,\r\n-  },\r\n+  container: { flex: 1, backgroundColor: \"#fff\" },\r\n+  overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n+  card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n+  cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n+  inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n+  inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n   inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n   totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n-  fareBox: {\r\n-    flex: 1,\r\n-    borderRadius: 3,\r\n-    backgroundColor: \"white\",\r\n-    justifyContent: \"center\",\r\n-    paddingHorizontal: 5,\r\n-    marginRight: 5,\r\n-    width: '50%',\r\n-  },\r\n+  fareBox: { flex: 1, borderRadius: 3, backgroundColor: \"white\", justifyContent: \"center\", paddingHorizontal: 5, marginRight: 5, width: '50%' },\r\n   totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n-  bookNowButton: {\r\n-    flex: 1,\r\n-    backgroundColor: \"white\",\r\n-    borderRadius: 8,\r\n-    alignItems: \"center\",\r\n-    justifyContent: \"center\",\r\n-    padding: 5,\r\n-    marginLeft: 5,\r\n-    width: '50%',\r\n-  },\r\n+  bookNowButton: { flex: 1, backgroundColor: \"white\", borderRadius: 8, alignItems: \"center\", justifyContent: \"center\", padding: 5, marginLeft: 5, width: '50%' },\r\n   bookNowText: { fontSize: 16 },\r\n-  bottomNav: {\r\n-    position: \"absolute\",\r\n-    bottom: 0,\r\n-    flexDirection: \"row\",\r\n-    justifyContent: \"space-around\",\r\n-    width: width,\r\n-    height: 70,\r\n-    backgroundColor: \"white\",\r\n-    borderTopLeftRadius: 30,\r\n-    borderTopRightRadius: 30,\r\n-    alignItems: \"center\",\r\n-    borderWidth: 1,\r\n-    borderColor: \"black\",\r\n-  },\r\n+  bottomNav: { position: \"absolute\", bottom: 0, flexDirection: \"row\", justifyContent: \"space-around\", width: width, height: 70, backgroundColor: \"white\", borderTopLeftRadius: 30, borderTopRightRadius: 30, alignItems: \"center\", borderWidth: 1, borderColor: \"black\" },\r\n });\r\n"
                },
                {
                    "date": 1747247186770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n-  const [destination, setDestination] = useState(null);\r\n+  const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n   const [notes, setNotes] = useState(\"\");\r\n   const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n   const [fare, setFare] = useState(20);\r\n@@ -133,9 +133,9 @@\n       if (!bookingId) return;\r\n       try {\r\n         const res = await fetch(`${API_BASE_URL}/api/bookings`);\r\n         const allBookings = await res.json();\r\n-        const myBooking = allBookings.find(b => b.id === bookingId);\r\n+        const myBooking = allBookings.find((b: any) => b && b.id === bookingId);\r\n         if (myBooking && myBooking.status === \"accepted\" && !myBooking.passengerConfirmed) {\r\n           setMatchedDriver(myBooking);\r\n         }\r\n       } catch (err) {\r\n@@ -154,9 +154,11 @@\n         <View style={styles.container}>\r\n           <StatusBar barStyle=\"light-content\" translucent backgroundColor=\"black\" />\r\n           {mapHtml && (\r\n             <WebView\r\n-              ref={(ref) => ref && !mapRef.current && (mapRef.current = ref)}\r\n+              ref={(ref) => {\r\n+                if (ref && !mapRef.current) mapRef.current = ref;\r\n+              }}\r\n               originWhitelist={[\"*\"]}\r\n               source={{ html: mapHtml }}\r\n               javaScriptEnabled\r\n               onMessage={(event) => setDestination(JSON.parse(event.nativeEvent.data))}\r\n@@ -183,9 +185,9 @@\n               </View>\r\n               {matchedDriver && (\r\n                 <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n                   <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n-                  <Text>Driver ID: {matchedDriver.driverId}</Text>\r\n+                  <Text>Driver ID: {matchedDriver?.driverId}</Text>\r\n                   <TouchableOpacity\r\n                     onPress={async () => {\r\n                       try {\r\n                         const res = await fetch(`${API_BASE_URL}/api/confirm-driver`, {\r\n"
                },
                {
                    "date": 1747247543146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n   const [notes, setNotes] = useState(\"\");\r\n   const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n   const [fare, setFare] = useState(20);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n-  const mapRef = useRef(null);\r\n+  const mapRef = useRef<WebViewType>(null);\r\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n   const [matchedDriver, setMatchedDriver] = useState(null);\r\n   const [bookingId, setBookingId] = useState(null);\r\n \r\n@@ -155,9 +155,11 @@\n           <StatusBar barStyle=\"light-content\" translucent backgroundColor=\"black\" />\r\n           {mapHtml && (\r\n             <WebView\r\n               ref={(ref) => {\r\n-                if (ref && !mapRef.current) mapRef.current = ref;\r\n+                if (ref && !mapRef.current) {\r\n+                  mapRef.current = ref;\r\n+                }\r\n               }}\r\n               originWhitelist={[\"*\"]}\r\n               source={{ html: mapHtml }}\r\n               javaScriptEnabled\r\n"
                },
                {
                    "date": 1747247754703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,16 +109,23 @@\n       });\r\n \r\n       const result = await response.json();\r\n       if (!response.ok) throw new Error(result.message || \"Something went wrong\");\r\n+\r\n+      // ⬇️ Save booking ID for polling\r\n       setBookingId(result.booking.id);\r\n+\r\n+      // ⬇️ Manually attach driverId (this is the key fix)\r\n+      setMatchedDriver({ ...result.booking, driverId: result.matchedDriverId });\r\n+\r\n       Alert.alert(\"Success\", \"Booking sent successfully.\");\r\n     } catch (error) {\r\n       console.error(\"❌ Booking error:\", error);\r\n       Alert.alert(\"Error\", \"Failed to send booking. Please try again.\");\r\n     }\r\n   };\r\n \r\n+\r\n   useEffect(() => {\r\n     const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => setKeyboardOffset(-35));\r\n     const showSub = Keyboard.addListener(\"keyboardDidShow\", () => setKeyboardOffset(0));\r\n     return () => {\r\n"
                },
                {
                    "date": 1747248648487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n   const [fare, setFare] = useState(20);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType>(null);\r\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n-  const [matchedDriver, setMatchedDriver] = useState(null);\r\n+  const [matchedDriver, setMatchedDriver] = useState<{ driverId: string } | null>(null);\r\n   const [bookingId, setBookingId] = useState(null);\r\n \r\n   useEffect(() => {\r\n     if (!location) return;\r\n"
                },
                {
                    "date": 1747251726198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,8 @@\n               </View>\r\n               {matchedDriver && (\r\n                 <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n                   <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n-                  <Text>Driver ID: {matchedDriver?.driverId}</Text>\r\n                   <TouchableOpacity\r\n                     onPress={async () => {\r\n                       try {\r\n                         const res = await fetch(`${API_BASE_URL}/api/confirm-driver`, {\r\n"
                },
                {
                    "date": 1747252019158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n   const [fare, setFare] = useState(20);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType>(null);\r\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n-  const [matchedDriver, setMatchedDriver] = useState<{ driverId: string } | null>(null);\r\n+  const [matchedDriver, setMatchedDriver] = useState<{ driverName: string } | null>(null);\r\n   const [bookingId, setBookingId] = useState(null);\r\n \r\n   useEffect(() => {\r\n     if (!location) return;\r\n@@ -194,8 +194,9 @@\n               </View>\r\n               {matchedDriver && (\r\n                 <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n                   <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n+                  <Text> Name: {matchedDriver?.driverName}</Text>\r\n                   <TouchableOpacity\r\n                     onPress={async () => {\r\n                       try {\r\n                         const res = await fetch(`${API_BASE_URL}/api/confirm-driver`, {\r\n"
                },
                {
                    "date": 1747252114361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,10 @@\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n   const [matchedDriver, setMatchedDriver] = useState<{ driverName: string } | null>(null);\r\n   const [bookingId, setBookingId] = useState(null);\r\n \r\n+  console.log(matchedDriver?.driverName)\r\n+\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n@@ -195,8 +197,9 @@\n               {matchedDriver && (\r\n                 <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n                   <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n                   <Text> Name: {matchedDriver?.driverName}</Text>\r\n+                  \r\n                   <TouchableOpacity\r\n                     onPress={async () => {\r\n                       try {\r\n                         const res = await fetch(`${API_BASE_URL}/api/confirm-driver`, {\r\n"
                },
                {
                    "date": 1747252568360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n import { OSRM_BASE_URL, API_BASE_URL } from \"../../config\";\r\n+import AsyncStorage from '@react-native-async-storage/async-storage';\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n@@ -30,13 +31,11 @@\n   const [fare, setFare] = useState(20);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType>(null);\r\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n-  const [matchedDriver, setMatchedDriver] = useState<{ driverName: string } | null>(null);\r\n+  const [matchedDriver, setMatchedDriver] = useState(null);\r\n   const [bookingId, setBookingId] = useState(null);\r\n \r\n-  console.log(matchedDriver?.driverName)\r\n-\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n@@ -83,8 +82,14 @@\n     `;\r\n \r\n     setMapHtml(html);\r\n   }, [location]);\r\n+  try {\r\n+    const driverId = await AsyncStorage.getItem(\"driverId\");\r\n+    const driverName = await AsyncStorage.getItem(\"driverName\");\r\n+  } catch (error) {\r\n+    console.error(\"❌ Failed to update driver status:\", error);\r\n+  }\r\n \r\n   const handleBookNow = async () => {\r\n     if (!location || !destination) {\r\n       Alert.alert(\"Missing location info\");\r\n"
                },
                {
                    "date": 1747252892464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,8 @@\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n import { OSRM_BASE_URL, API_BASE_URL } from \"../../config\";\r\n-import AsyncStorage from '@react-native-async-storage/async-storage';\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n@@ -31,11 +30,13 @@\n   const [fare, setFare] = useState(20);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType>(null);\r\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n-  const [matchedDriver, setMatchedDriver] = useState(null);\r\n+  const [matchedDriver, setMatchedDriver] = useState<{ driverName: string } | null>(null);\r\n   const [bookingId, setBookingId] = useState(null);\r\n \r\n+  console.log(matchedDriver?.driverName)\r\n+\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n@@ -82,14 +83,8 @@\n     `;\r\n \r\n     setMapHtml(html);\r\n   }, [location]);\r\n-  try {\r\n-    const driverId = await AsyncStorage.getItem(\"driverId\");\r\n-    const driverName = await AsyncStorage.getItem(\"driverName\");\r\n-  } catch (error) {\r\n-    console.error(\"❌ Failed to update driver status:\", error);\r\n-  }\r\n \r\n   const handleBookNow = async () => {\r\n     if (!location || !destination) {\r\n       Alert.alert(\"Missing location info\");\r\n"
                },
                {
                    "date": 1747408380173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,259 @@\n+import React, { useState, useEffect, useRef } from \"react\";\r\n+import {\r\n+  View,\r\n+  Text,\r\n+  StyleSheet,\r\n+  Dimensions,\r\n+  TouchableOpacity,\r\n+  StatusBar,\r\n+  TextInput,\r\n+  Alert,\r\n+  KeyboardAvoidingView,\r\n+  Platform,\r\n+  TouchableWithoutFeedback,\r\n+  Keyboard,\r\n+} from \"react-native\";\r\n+import { WebView } from \"react-native-webview\";\r\n+import type { WebView as WebViewType } from \"react-native-webview\";\r\n+import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n+import { useLocation } from \"../location/GlobalLocation\";\r\n+import { OSRM_BASE_URL, API_BASE_URL } from \"../../config\";\r\n+\r\n+const { width, height } = Dimensions.get(\"window\");\r\n+\r\n+export default function PHome() {\r\n+  const { location, loading } = useLocation();\r\n+  const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n+  const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n+  const [notes, setNotes] = useState(\"\");\r\n+  const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n+  const [fare, setFare] = useState(20);\r\n+  const [mapHtml, setMapHtml] = useState(\"\");\r\n+  const mapRef = useRef<WebViewType>(null);\r\n+  const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n+  const [matchedDriver, setMatchedDriver] = useState<{ driverName: string } | null>(null);\r\n+  const [bookingId, setBookingId] = useState(null);\r\n+\r\n+  useEffect(() => {\r\n+    if (!location) return;\r\n+\r\n+    const html = `\r\n+      <!DOCTYPE html>\r\n+      <html>\r\n+        <head>\r\n+          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n+          <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n+          <style> html, body, #map { height: 100%; margin: 0; padding: 0; } </style>\r\n+        </head>\r\n+        <body>\r\n+          <div id=\"map\"></div>\r\n+          <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n+          <script>\r\n+            const map = L.map('map').setView([${location.latitude}, ${location.longitude}], 15);\r\n+            L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n+              maxZoom: 19,\r\n+              attribution: '© OpenStreetMap contributors'\r\n+            }).addTo(map);\r\n+\r\n+            const startMarker = L.marker([${location.latitude}, ${location.longitude}]).addTo(map);\r\n+\r\n+            let destMarker = null;\r\n+            let routeLine = null;\r\n+\r\n+            map.on('click', function(e) {\r\n+              const { lat, lng } = e.latlng;\r\n+              if (destMarker) map.removeLayer(destMarker);\r\n+              if (routeLine) map.removeLayer(routeLine);\r\n+              destMarker = L.marker([lat, lng]).addTo(map);\r\n+              window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n+            });\r\n+\r\n+            window.addEventListener('message', function(event) {\r\n+              const msg = JSON.parse(event.data);\r\n+              if (msg.type === 'drawRoute' && msg.coords) {\r\n+                if (routeLine) map.removeLayer(routeLine);\r\n+                routeLine = L.polyline(msg.coords, { color: 'red' }).addTo(map);\r\n+              }\r\n+            });\r\n+          </script>\r\n+        </body>\r\n+      </html>\r\n+    `;\r\n+\r\n+    setMapHtml(html);\r\n+  }, [location]);\r\n+\r\n+  \r\n+\r\n+  const handleBookNow = async () => {\r\n+    if (!location || !destination) {\r\n+      Alert.alert(\"Missing location info\");\r\n+      return;\r\n+    }\r\n+\r\n+    const bookingData = {\r\n+      pickupLat: location.latitude,\r\n+      pickupLng: location.longitude,\r\n+      destinationLat: destination.latitude,\r\n+      destinationLng: destination.longitude,\r\n+      fare: 20,\r\n+      paymentMethod: \"cash\",\r\n+      notes,\r\n+    };\r\n+\r\n+    try {\r\n+      const response = await fetch(`${API_BASE_URL}/api/book`, {\r\n+        method: \"POST\",\r\n+        headers: {\r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+        body: JSON.stringify(bookingData),\r\n+      });\r\n+\r\n+      const result = await response.json();\r\n+      if (!response.ok) throw new Error(result.message || \"Something went wrong\");\r\n+\r\n+      // ⬇️ Save booking ID for polling\r\n+      setBookingId(result.booking.id);\r\n+\r\n+      // ⬇️ Manually attach driverId (this is the key fix)\r\n+      setMatchedDriver({ ...result.booking, driverId: result.matchedDriverId });\r\n+\r\n+      Alert.alert(\"Success\", \"Booking sent successfully.\");\r\n+    } catch (error) {\r\n+      console.error(\"❌ Booking error:\", error);\r\n+      Alert.alert(\"Error\", \"Failed to send booking. Please try again.\");\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => setKeyboardOffset(-35));\r\n+    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => setKeyboardOffset(0));\r\n+    return () => {\r\n+      showSub.remove();\r\n+      hideSub.remove();\r\n+    };\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    let interval;\r\n+    const pollForDriverMatch = async () => {\r\n+      if (!bookingId) return;\r\n+      try {\r\n+        const res = await fetch(`${API_BASE_URL}/api/bookings`);\r\n+        const allBookings = await res.json();\r\n+        const myBooking = allBookings.find((b: any) => b && b.id === bookingId);\r\n+        if (myBooking && myBooking.status === \"accepted\" && !myBooking.passengerConfirmed) {\r\n+          setMatchedDriver(myBooking);\r\n+        }\r\n+      } catch (err) {\r\n+        console.error(\"❌ Poll error:\", err);\r\n+      }\r\n+    };\r\n+    interval = setInterval(pollForDriverMatch, 4000);\r\n+    return () => clearInterval(interval);\r\n+  }, [bookingId]);\r\n+\r\n+  useEffect(() => {\r\n+    if (matchedDriver) {\r\n+      console.log(\"🎯 Matched driver name (from state):\", matchedDriver.driverName);\r\n+    }\r\n+  }, [matchedDriver]);\r\n+\r\n+\r\n+  if (loading || !location) return null;\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === \"ios\" ? \"padding\" : undefined} keyboardVerticalOffset={keyboardOffset}>\r\n+      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n+        <View style={styles.container}>\r\n+          <StatusBar barStyle=\"light-content\" translucent backgroundColor=\"black\" />\r\n+          {mapHtml && (\r\n+            <WebView\r\n+              ref={(ref) => {\r\n+                if (ref && !mapRef.current) {\r\n+                  mapRef.current = ref;\r\n+                }\r\n+              }}\r\n+              originWhitelist={[\"*\"]}\r\n+              source={{ html: mapHtml }}\r\n+              javaScriptEnabled\r\n+              onMessage={(event) => setDestination(JSON.parse(event.nativeEvent.data))}\r\n+              style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n+            />\r\n+          )}\r\n+\r\n+          <View style={styles.overlayContainer}>\r\n+            <View style={styles.card}>\r\n+              <View style={styles.cardHeader} />\r\n+              <TouchableOpacity style={styles.inputBox}>\r\n+                <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n+                <Text style={styles.inputText}>\r\n+                  {destination ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}` : \"Saan ka papunta ngayon?\"}\r\n+                </Text>\r\n+                <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+              </TouchableOpacity>\r\n+              <TextInput style={styles.inputBoxSimple} placeholder=\"Name this location (optional: Home, Work, etc.)\" value={destinationLabel} onChangeText={setDestinationLabel} />\r\n+              <TextInput style={styles.inputBoxSimple} placeholder=\"Notes sa driver\" value={notes} onChangeText={setNotes} />\r\n+              <TextInput style={styles.inputBox} placeholder=\"Paano ka magbabayad\" value={paymentMethod} onChangeText={setPaymentMethod} />\r\n+              <View style={styles.totalFareContainer}>\r\n+                <View style={styles.fareBox}><Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text></View>\r\n+                <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}><Text style={styles.bookNowText}>BOOK NOW</Text></TouchableOpacity>\r\n+              </View>\r\n+              {matchedDriver && (\r\n+                <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+                  <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n+                  <Text> Name: {matchedDriver?.driverName}</Text>\r\n+                  \r\n+                  <TouchableOpacity\r\n+                    onPress={async () => {\r\n+                      try {\r\n+                        const res = await fetch(`${API_BASE_URL}/api/confirm-driver`, {\r\n+                          method: \"POST\",\r\n+                          headers: { \"Content-Type\": \"application/json\" },\r\n+                          body: JSON.stringify({ bookingId }),\r\n+                        });\r\n+                        const data = await res.json();\r\n+                        Alert.alert(\"Confirmed\", \"You accepted the driver!\");\r\n+                        setMatchedDriver(null);\r\n+                      } catch (error) {\r\n+                        console.error(\"❌ Confirm error:\", error);\r\n+                      }\r\n+                    }}\r\n+                    style={{ backgroundColor: \"#3cba54\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+                  >\r\n+                    <Text style={{ color: \"white\", textAlign: \"center\" }}>CONFIRM DRIVER</Text>\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+              )}\r\n+            </View>\r\n+\r\n+            <View style={styles.bottomNav}>\r\n+              <TouchableOpacity><Ionicons name=\"home\" size={30} color=\"black\" /><Text>Home</Text></TouchableOpacity>\r\n+              <TouchableOpacity><Ionicons name=\"document-text-outline\" size={30} color=\"black\" /><Text>History</Text></TouchableOpacity>\r\n+              <TouchableOpacity><Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" /><Text>Chats</Text></TouchableOpacity>\r\n+              <TouchableOpacity><Ionicons name=\"person-outline\" size={30} color=\"black\" /><Text>Profile</Text></TouchableOpacity>\r\n+            </View>\r\n+          </View>\r\n+        </View>\r\n+      </TouchableWithoutFeedback>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n+\r\n+const styles = StyleSheet.create({\r\n+  container: { flex: 1, backgroundColor: \"#fff\" },\r\n+  overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n+  card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n+  cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n+  inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n+  inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n+  inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n+  totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n+  fareBox: { flex: 1, borderRadius: 3, backgroundColor: \"white\", justifyContent: \"center\", paddingHorizontal: 5, marginRight: 5, width: '50%' },\r\n+  totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n+  bookNowButton: { flex: 1, backgroundColor: \"white\", borderRadius: 8, alignItems: \"center\", justifyContent: \"center\", padding: 5, marginLeft: 5, width: '50%' },\r\n+  bookNowText: { fontSize: 16 },\r\n+  bottomNav: { position: \"absolute\", bottom: 0, flexDirection: \"row\", justifyContent: \"space-around\", width: width, height: 70, backgroundColor: \"white\", borderTopLeftRadius: 30, borderTopRightRadius: 30, alignItems: \"center\", borderWidth: 1, borderColor: \"black\" },\r\n+});\r\n"
                },
                {
                    "date": 1747410096323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n   const [fare, setFare] = useState(20);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType>(null);\r\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n-  const [matchedDriver, setMatchedDriver] = useState<{ driverName: string } | null>(null);\r\n+  const [matchedDriver, setMatchedDriver] = useState<{ driverName: string; driverId:string} | null>(null);\r\n   const [bookingId, setBookingId] = useState(null);\r\n \r\n   useEffect(() => {\r\n     if (!location) return;\r\n@@ -156,8 +156,9 @@\n   }, [bookingId]);\r\n \r\n   useEffect(() => {\r\n     if (matchedDriver) {\r\n+      console.log(\"🎯 Matched driver name (from state):\", matchedId.driverName);\r\n       console.log(\"🎯 Matched driver name (from state):\", matchedDriver.driverName);\r\n     }\r\n   }, [matchedDriver]);\r\n \r\n@@ -256,256 +257,4 @@\n   bookNowButton: { flex: 1, backgroundColor: \"white\", borderRadius: 8, alignItems: \"center\", justifyContent: \"center\", padding: 5, marginLeft: 5, width: '50%' },\r\n   bookNowText: { fontSize: 16 },\r\n   bottomNav: { position: \"absolute\", bottom: 0, flexDirection: \"row\", justifyContent: \"space-around\", width: width, height: 70, backgroundColor: \"white\", borderTopLeftRadius: 30, borderTopRightRadius: 30, alignItems: \"center\", borderWidth: 1, borderColor: \"black\" },\r\n });\r\n-import React, { useState, useEffect, useRef } from \"react\";\r\n-import {\r\n-  View,\r\n-  Text,\r\n-  StyleSheet,\r\n-  Dimensions,\r\n-  TouchableOpacity,\r\n-  StatusBar,\r\n-  TextInput,\r\n-  Alert,\r\n-  KeyboardAvoidingView,\r\n-  Platform,\r\n-  TouchableWithoutFeedback,\r\n-  Keyboard,\r\n-} from \"react-native\";\r\n-import { WebView } from \"react-native-webview\";\r\n-import type { WebView as WebViewType } from \"react-native-webview\";\r\n-import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n-import { useLocation } from \"../location/GlobalLocation\";\r\n-import { OSRM_BASE_URL, API_BASE_URL } from \"../../config\";\r\n-\r\n-const { width, height } = Dimensions.get(\"window\");\r\n-\r\n-export default function PHome() {\r\n-  const { location, loading } = useLocation();\r\n-  const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n-  const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n-  const [notes, setNotes] = useState(\"\");\r\n-  const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n-  const [fare, setFare] = useState(20);\r\n-  const [mapHtml, setMapHtml] = useState(\"\");\r\n-  const mapRef = useRef<WebViewType>(null);\r\n-  const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n-  const [matchedDriver, setMatchedDriver] = useState<{ driverName: string } | null>(null);\r\n-  const [bookingId, setBookingId] = useState(null);\r\n-\r\n-  console.log(matchedDriver?.driverName)\r\n-\r\n-  useEffect(() => {\r\n-    if (!location) return;\r\n-\r\n-    const html = `\r\n-      <!DOCTYPE html>\r\n-      <html>\r\n-        <head>\r\n-          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n-          <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n-          <style> html, body, #map { height: 100%; margin: 0; padding: 0; } </style>\r\n-        </head>\r\n-        <body>\r\n-          <div id=\"map\"></div>\r\n-          <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n-          <script>\r\n-            const map = L.map('map').setView([${location.latitude}, ${location.longitude}], 15);\r\n-            L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n-              maxZoom: 19,\r\n-              attribution: '© OpenStreetMap contributors'\r\n-            }).addTo(map);\r\n-\r\n-            const startMarker = L.marker([${location.latitude}, ${location.longitude}]).addTo(map);\r\n-\r\n-            let destMarker = null;\r\n-            let routeLine = null;\r\n-\r\n-            map.on('click', function(e) {\r\n-              const { lat, lng } = e.latlng;\r\n-              if (destMarker) map.removeLayer(destMarker);\r\n-              if (routeLine) map.removeLayer(routeLine);\r\n-              destMarker = L.marker([lat, lng]).addTo(map);\r\n-              window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n-            });\r\n-\r\n-            window.addEventListener('message', function(event) {\r\n-              const msg = JSON.parse(event.data);\r\n-              if (msg.type === 'drawRoute' && msg.coords) {\r\n-                if (routeLine) map.removeLayer(routeLine);\r\n-                routeLine = L.polyline(msg.coords, { color: 'red' }).addTo(map);\r\n-              }\r\n-            });\r\n-          </script>\r\n-        </body>\r\n-      </html>\r\n-    `;\r\n-\r\n-    setMapHtml(html);\r\n-  }, [location]);\r\n-\r\n-  const handleBookNow = async () => {\r\n-    if (!location || !destination) {\r\n-      Alert.alert(\"Missing location info\");\r\n-      return;\r\n-    }\r\n-\r\n-    const bookingData = {\r\n-      pickupLat: location.latitude,\r\n-      pickupLng: location.longitude,\r\n-      destinationLat: destination.latitude,\r\n-      destinationLng: destination.longitude,\r\n-      fare: 20,\r\n-      paymentMethod: \"cash\",\r\n-      notes,\r\n-    };\r\n-\r\n-    try {\r\n-      const response = await fetch(`${API_BASE_URL}/api/book`, {\r\n-        method: \"POST\",\r\n-        headers: {\r\n-          \"Content-Type\": \"application/json\",\r\n-        },\r\n-        body: JSON.stringify(bookingData),\r\n-      });\r\n-\r\n-      const result = await response.json();\r\n-      if (!response.ok) throw new Error(result.message || \"Something went wrong\");\r\n-\r\n-      // ⬇️ Save booking ID for polling\r\n-      setBookingId(result.booking.id);\r\n-\r\n-      // ⬇️ Manually attach driverId (this is the key fix)\r\n-      setMatchedDriver({ ...result.booking, driverId: result.matchedDriverId });\r\n-\r\n-      Alert.alert(\"Success\", \"Booking sent successfully.\");\r\n-    } catch (error) {\r\n-      console.error(\"❌ Booking error:\", error);\r\n-      Alert.alert(\"Error\", \"Failed to send booking. Please try again.\");\r\n-    }\r\n-  };\r\n-\r\n-\r\n-  useEffect(() => {\r\n-    const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => setKeyboardOffset(-35));\r\n-    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => setKeyboardOffset(0));\r\n-    return () => {\r\n-      showSub.remove();\r\n-      hideSub.remove();\r\n-    };\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    let interval;\r\n-    const pollForDriverMatch = async () => {\r\n-      if (!bookingId) return;\r\n-      try {\r\n-        const res = await fetch(`${API_BASE_URL}/api/bookings`);\r\n-        const allBookings = await res.json();\r\n-        const myBooking = allBookings.find((b: any) => b && b.id === bookingId);\r\n-        if (myBooking && myBooking.status === \"accepted\" && !myBooking.passengerConfirmed) {\r\n-          setMatchedDriver(myBooking);\r\n-        }\r\n-      } catch (err) {\r\n-        console.error(\"❌ Poll error:\", err);\r\n-      }\r\n-    };\r\n-    interval = setInterval(pollForDriverMatch, 4000);\r\n-    return () => clearInterval(interval);\r\n-  }, [bookingId]);\r\n-\r\n-  if (loading || !location) return null;\r\n-\r\n-  return (\r\n-    <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === \"ios\" ? \"padding\" : undefined} keyboardVerticalOffset={keyboardOffset}>\r\n-      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n-        <View style={styles.container}>\r\n-          <StatusBar barStyle=\"light-content\" translucent backgroundColor=\"black\" />\r\n-          {mapHtml && (\r\n-            <WebView\r\n-              ref={(ref) => {\r\n-                if (ref && !mapRef.current) {\r\n-                  mapRef.current = ref;\r\n-                }\r\n-              }}\r\n-              originWhitelist={[\"*\"]}\r\n-              source={{ html: mapHtml }}\r\n-              javaScriptEnabled\r\n-              onMessage={(event) => setDestination(JSON.parse(event.nativeEvent.data))}\r\n-              style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n-            />\r\n-          )}\r\n-\r\n-          <View style={styles.overlayContainer}>\r\n-            <View style={styles.card}>\r\n-              <View style={styles.cardHeader} />\r\n-              <TouchableOpacity style={styles.inputBox}>\r\n-                <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-                <Text style={styles.inputText}>\r\n-                  {destination ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}` : \"Saan ka papunta ngayon?\"}\r\n-                </Text>\r\n-                <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-              </TouchableOpacity>\r\n-              <TextInput style={styles.inputBoxSimple} placeholder=\"Name this location (optional: Home, Work, etc.)\" value={destinationLabel} onChangeText={setDestinationLabel} />\r\n-              <TextInput style={styles.inputBoxSimple} placeholder=\"Notes sa driver\" value={notes} onChangeText={setNotes} />\r\n-              <TextInput style={styles.inputBox} placeholder=\"Paano ka magbabayad\" value={paymentMethod} onChangeText={setPaymentMethod} />\r\n-              <View style={styles.totalFareContainer}>\r\n-                <View style={styles.fareBox}><Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text></View>\r\n-                <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}><Text style={styles.bookNowText}>BOOK NOW</Text></TouchableOpacity>\r\n-              </View>\r\n-              {matchedDriver && (\r\n-                <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n-                  <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n-                  <Text> Name: {matchedDriver?.driverName}</Text>\r\n-                  \r\n-                  <TouchableOpacity\r\n-                    onPress={async () => {\r\n-                      try {\r\n-                        const res = await fetch(`${API_BASE_URL}/api/confirm-driver`, {\r\n-                          method: \"POST\",\r\n-                          headers: { \"Content-Type\": \"application/json\" },\r\n-                          body: JSON.stringify({ bookingId }),\r\n-                        });\r\n-                        const data = await res.json();\r\n-                        Alert.alert(\"Confirmed\", \"You accepted the driver!\");\r\n-                        setMatchedDriver(null);\r\n-                      } catch (error) {\r\n-                        console.error(\"❌ Confirm error:\", error);\r\n-                      }\r\n-                    }}\r\n-                    style={{ backgroundColor: \"#3cba54\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n-                  >\r\n-                    <Text style={{ color: \"white\", textAlign: \"center\" }}>CONFIRM DRIVER</Text>\r\n-                  </TouchableOpacity>\r\n-                </View>\r\n-              )}\r\n-            </View>\r\n-\r\n-            <View style={styles.bottomNav}>\r\n-              <TouchableOpacity><Ionicons name=\"home\" size={30} color=\"black\" /><Text>Home</Text></TouchableOpacity>\r\n-              <TouchableOpacity><Ionicons name=\"document-text-outline\" size={30} color=\"black\" /><Text>History</Text></TouchableOpacity>\r\n-              <TouchableOpacity><Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" /><Text>Chats</Text></TouchableOpacity>\r\n-              <TouchableOpacity><Ionicons name=\"person-outline\" size={30} color=\"black\" /><Text>Profile</Text></TouchableOpacity>\r\n-            </View>\r\n-          </View>\r\n-        </View>\r\n-      </TouchableWithoutFeedback>\r\n-    </KeyboardAvoidingView>\r\n-  );\r\n-}\r\n-\r\n-const styles = StyleSheet.create({\r\n-  container: { flex: 1, backgroundColor: \"#fff\" },\r\n-  overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n-  card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n-  cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n-  inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n-  inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n-  inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n-  totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n-  fareBox: { flex: 1, borderRadius: 3, backgroundColor: \"white\", justifyContent: \"center\", paddingHorizontal: 5, marginRight: 5, width: '50%' },\r\n-  totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n-  bookNowButton: { flex: 1, backgroundColor: \"white\", borderRadius: 8, alignItems: \"center\", justifyContent: \"center\", padding: 5, marginLeft: 5, width: '50%' },\r\n-  bookNowText: { fontSize: 16 },\r\n-  bottomNav: { position: \"absolute\", bottom: 0, flexDirection: \"row\", justifyContent: \"space-around\", width: width, height: 70, backgroundColor: \"white\", borderTopLeftRadius: 30, borderTopRightRadius: 30, alignItems: \"center\", borderWidth: 1, borderColor: \"black\" },\r\n-});\r\n"
                },
                {
                    "date": 1747410113524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n   }, [bookingId]);\r\n \r\n   useEffect(() => {\r\n     if (matchedDriver) {\r\n-      console.log(\"🎯 Matched driver name (from state):\", matchedId.driverName);\r\n+      console.log(\"🎯 Matched driver name (from state):\", matchedDriver.driverId);\r\n       console.log(\"🎯 Matched driver name (from state):\", matchedDriver.driverName);\r\n     }\r\n   }, [matchedDriver]);\r\n \r\n"
                },
                {
                    "date": 1747412546631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,9 +204,9 @@\n               </View>\r\n               {matchedDriver && (\r\n                 <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n                   <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n-                  <Text> Name: {matchedDriver?.driverName}</Text>\r\n+                  <Text>Name: {matchedDriver?.driverName}</Text>\r\n                   \r\n                   <TouchableOpacity\r\n                     onPress={async () => {\r\n                       try {\r\n"
                },
                {
                    "date": 1747412742102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,14 +112,17 @@\n \r\n       const result = await response.json();\r\n       if (!response.ok) throw new Error(result.message || \"Something went wrong\");\r\n \r\n-      // ⬇️ Save booking ID for polling\r\n-      setBookingId(result.booking.id);\r\n+      setBookingId(result.booking.id); \r\n+      setMatchedDriver(result.booking.driverId);\r\n \r\n-      // ⬇️ Manually attach driverId (this is the key fix)\r\n-      setMatchedDriver({ ...result.booking, driverId: result.matchedDriverId });\r\n+      // Fetch full driver info using the returned driverId\r\n+      const res = await fetch(`${API_BASE_URL}/api/driver/${result.booking.driverId}`);\r\n+      const data = await res.json();\r\n+      setMatchedDriver(data.driver); \r\n \r\n+\r\n       Alert.alert(\"Success\", \"Booking sent successfully.\");\r\n     } catch (error) {\r\n       console.error(\"❌ Booking error:\", error);\r\n       Alert.alert(\"Error\", \"Failed to send booking. Please try again.\");\r\n"
                },
                {
                    "date": 1747412803051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,42 +95,43 @@\n       pickupLat: location.latitude,\r\n       pickupLng: location.longitude,\r\n       destinationLat: destination.latitude,\r\n       destinationLng: destination.longitude,\r\n-      fare: 20,\r\n-      paymentMethod: \"cash\",\r\n+      fare,\r\n+      paymentMethod,\r\n       notes,\r\n+      passengerName: \"Anonymous\", // or retrieve from storage if needed\r\n     };\r\n \r\n     try {\r\n       const response = await fetch(`${API_BASE_URL}/api/book`, {\r\n         method: \"POST\",\r\n-        headers: {\r\n-          \"Content-Type\": \"application/json\",\r\n-        },\r\n+        headers: { \"Content-Type\": \"application/json\" },\r\n         body: JSON.stringify(bookingData),\r\n       });\r\n \r\n       const result = await response.json();\r\n-      if (!response.ok) throw new Error(result.message || \"Something went wrong\");\r\n \r\n-      setBookingId(result.booking.id); \r\n+      if (!response.ok) {\r\n+        throw new Error(result.message || \"Something went wrong\");\r\n+      }\r\n+\r\n+      setBookingId(result.booking.id);\r\n       setMatchedDriver(result.booking.driverId);\r\n \r\n-      // Fetch full driver info using the returned driverId\r\n       const res = await fetch(`${API_BASE_URL}/api/driver/${result.booking.driverId}`);\r\n       const data = await res.json();\r\n-      setMatchedDriver(data.driver); \r\n+      setMatchedDriver(data.driver);\r\n \r\n-\r\n       Alert.alert(\"Success\", \"Booking sent successfully.\");\r\n     } catch (error) {\r\n       console.error(\"❌ Booking error:\", error);\r\n       Alert.alert(\"Error\", \"Failed to send booking. Please try again.\");\r\n     }\r\n   };\r\n \r\n \r\n+\r\n   useEffect(() => {\r\n     const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => setKeyboardOffset(-35));\r\n     const showSub = Keyboard.addListener(\"keyboardDidShow\", () => setKeyboardOffset(0));\r\n     return () => {\r\n"
                },
                {
                    "date": 1747415641348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,11 @@\n   const mapRef = useRef<WebViewType>(null);\r\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n   const [matchedDriver, setMatchedDriver] = useState<{ driverName: string; driverId:string} | null>(null);\r\n   const [bookingId, setBookingId] = useState(null);\r\n+  const [showBookingForm, setShowBookingForm] = useState(false);\r\n \r\n+\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n"
                },
                {
                    "date": 1747415750874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,52 +191,70 @@\n             />\r\n           )}\r\n \r\n           <View style={styles.overlayContainer}>\r\n-            <View style={styles.card}>\r\n-              <View style={styles.cardHeader} />\r\n-              <TouchableOpacity style={styles.inputBox}>\r\n-                <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-                <Text style={styles.inputText}>\r\n-                  {destination ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}` : \"Saan ka papunta ngayon?\"}\r\n-                </Text>\r\n-                <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-              </TouchableOpacity>\r\n-              <TextInput style={styles.inputBoxSimple} placeholder=\"Name this location (optional: Home, Work, etc.)\" value={destinationLabel} onChangeText={setDestinationLabel} />\r\n-              <TextInput style={styles.inputBoxSimple} placeholder=\"Notes sa driver\" value={notes} onChangeText={setNotes} />\r\n-              <TextInput style={styles.inputBox} placeholder=\"Paano ka magbabayad\" value={paymentMethod} onChangeText={setPaymentMethod} />\r\n-              <View style={styles.totalFareContainer}>\r\n-                <View style={styles.fareBox}><Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text></View>\r\n-                <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}><Text style={styles.bookNowText}>BOOK NOW</Text></TouchableOpacity>\r\n+            {showBookingForm && (\r\n+              <View style={styles.card}>\r\n+                <View style={styles.cardHeader} />\r\n+                <TouchableOpacity style={styles.inputBox}>\r\n+                  <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n+                  <Text style={styles.inputText}>\r\n+                    {destination ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}` : \"Saan ka papunta ngayon?\"}\r\n+                  </Text>\r\n+                  <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+                </TouchableOpacity>\r\n+                <TextInput style={styles.inputBoxSimple} placeholder=\"Name this location (optional: Home, Work, etc.)\" value={destinationLabel} onChangeText={setDestinationLabel} />\r\n+                <TextInput style={styles.inputBoxSimple} placeholder=\"Notes sa driver\" value={notes} onChangeText={setNotes} />\r\n+                <TextInput style={styles.inputBox} placeholder=\"Paano ka magbabayad\" value={paymentMethod} onChangeText={setPaymentMethod} />\r\n+                <View style={styles.totalFareContainer}>\r\n+                  <View style={styles.fareBox}><Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text></View>\r\n+                  <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}><Text style={styles.bookNowText}>BOOK NOW</Text></TouchableOpacity>\r\n+                </View>\r\n+                {matchedDriver && (\r\n+                  <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+                    <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n+                    <Text>Name: {matchedDriver?.driverName}</Text>\r\n+                    \r\n+                    <TouchableOpacity\r\n+                      onPress={async () => {\r\n+                        try {\r\n+                          const res = await fetch(`${API_BASE_URL}/api/confirm-driver`, {\r\n+                            method: \"POST\",\r\n+                            headers: { \"Content-Type\": \"application/json\" },\r\n+                            body: JSON.stringify({ bookingId }),\r\n+                          });\r\n+                          const data = await res.json();\r\n+                          Alert.alert(\"Confirmed\", \"You accepted the driver!\");\r\n+                          setMatchedDriver(null);\r\n+                        } catch (error) {\r\n+                          console.error(\"❌ Confirm error:\", error);\r\n+                        }\r\n+                      }}\r\n+                      style={{ backgroundColor: \"#3cba54\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+                    >\r\n+                      <Text style={{ color: \"white\", textAlign: \"center\" }}>CONFIRM DRIVER</Text>\r\n+                    </TouchableOpacity>\r\n+                  </View>\r\n+                )}\r\n               </View>\r\n-              {matchedDriver && (\r\n-                <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n-                  <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n-                  <Text>Name: {matchedDriver?.driverName}</Text>\r\n-                  \r\n-                  <TouchableOpacity\r\n-                    onPress={async () => {\r\n-                      try {\r\n-                        const res = await fetch(`${API_BASE_URL}/api/confirm-driver`, {\r\n-                          method: \"POST\",\r\n-                          headers: { \"Content-Type\": \"application/json\" },\r\n-                          body: JSON.stringify({ bookingId }),\r\n-                        });\r\n-                        const data = await res.json();\r\n-                        Alert.alert(\"Confirmed\", \"You accepted the driver!\");\r\n-                        setMatchedDriver(null);\r\n-                      } catch (error) {\r\n-                        console.error(\"❌ Confirm error:\", error);\r\n-                      }\r\n-                    }}\r\n-                    style={{ backgroundColor: \"#3cba54\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n-                  >\r\n-                    <Text style={{ color: \"white\", textAlign: \"center\" }}>CONFIRM DRIVER</Text>\r\n-                  </TouchableOpacity>\r\n-                </View>\r\n-              )}\r\n-            </View>\r\n+            )}\r\n \r\n+            {!showBookingForm && (\r\n+              <TouchableOpacity\r\n+                onPress={() => setShowBookingForm(true)}\r\n+                style={{\r\n+                  position: \"absolute\",\r\n+                  bottom: 85,\r\n+                  backgroundColor: \"#81C3E1\",\r\n+                  padding: 10,\r\n+                  borderRadius: 8,\r\n+                }}\r\n+              >\r\n+                <Text style={{ fontWeight: \"bold\", fontSize: 16, color: \"white\" }}>START BOOKING</Text>\r\n+              </TouchableOpacity>\r\n+            )}\r\n+\r\n+\r\n             <View style={styles.bottomNav}>\r\n               <TouchableOpacity><Ionicons name=\"home\" size={30} color=\"black\" /><Text>Home</Text></TouchableOpacity>\r\n               <TouchableOpacity><Ionicons name=\"document-text-outline\" size={30} color=\"black\" /><Text>History</Text></TouchableOpacity>\r\n               <TouchableOpacity><Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" /><Text>Chats</Text></TouchableOpacity>\r\n"
                },
                {
                    "date": 1747415853376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,10 +56,23 @@\n               maxZoom: 19,\r\n               attribution: '© OpenStreetMap contributors'\r\n             }).addTo(map);\r\n \r\n-            const startMarker = L.marker([${location.latitude}, ${location.longitude}]).addTo(map);\r\n+            const map = L.map('map', {\r\n+              zoomControl: false, // we'll reposition it manually\r\n+              dragging: true,\r\n+              scrollWheelZoom: true,\r\n+              touchZoom: true,\r\n+              doubleClickZoom: true,\r\n+              boxZoom: true,\r\n+            }).setView([${location.latitude}, ${location.longitude}], 15);\r\n \r\n+            L.control.zoom({\r\n+              position: 'topleft' // or 'topright', adjust based on UI\r\n+            }).addTo(map);\r\n+\r\n+\r\n+\r\n             let destMarker = null;\r\n             let routeLine = null;\r\n \r\n             map.on('click', function(e) {\r\n"
                },
                {
                    "date": 1747415906632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,42 +55,9 @@\n             L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n               maxZoom: 19,\r\n               attribution: '© OpenStreetMap contributors'\r\n             }).addTo(map);\r\n-\r\n-            const map = L.map('map', {\r\n-              zoomControl: false, // we'll reposition it manually\r\n-              dragging: true,\r\n-              scrollWheelZoom: true,\r\n-              touchZoom: true,\r\n-              doubleClickZoom: true,\r\n-              boxZoom: true,\r\n-            }).setView([${location.latitude}, ${location.longitude}], 15);\r\n-\r\n-            L.control.zoom({\r\n-              position: 'topleft' // or 'topright', adjust based on UI\r\n-            }).addTo(map);\r\n-\r\n-\r\n-\r\n-            let destMarker = null;\r\n-            let routeLine = null;\r\n-\r\n-            map.on('click', function(e) {\r\n-              const { lat, lng } = e.latlng;\r\n-              if (destMarker) map.removeLayer(destMarker);\r\n-              if (routeLine) map.removeLayer(routeLine);\r\n-              destMarker = L.marker([lat, lng]).addTo(map);\r\n-              window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n-            });\r\n-\r\n-            window.addEventListener('message', function(event) {\r\n-              const msg = JSON.parse(event.data);\r\n-              if (msg.type === 'drawRoute' && msg.coords) {\r\n-                if (routeLine) map.removeLayer(routeLine);\r\n-                routeLine = L.polyline(msg.coords, { color: 'red' }).addTo(map);\r\n-              }\r\n-            });\r\n+            L.marker([${location.latitude}, ${location.longitude}]).addTo(map);\r\n           </script>\r\n         </body>\r\n       </html>\r\n     `;\r\n"
                },
                {
                    "date": 1747415959391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,8 @@\n               originWhitelist={[\"*\"]}\r\n               source={{ html: mapHtml }}\r\n               javaScriptEnabled\r\n               onMessage={(event) => setDestination(JSON.parse(event.nativeEvent.data))}\r\n-              style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n             />\r\n           )}\r\n \r\n           <View style={styles.overlayContainer}>\r\n"
                },
                {
                    "date": 1747416023267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,16 +158,14 @@\n           <StatusBar barStyle=\"light-content\" translucent backgroundColor=\"black\" />\r\n           {mapHtml && (\r\n             <WebView\r\n               ref={(ref) => {\r\n-                if (ref && !mapRef.current) {\r\n-                  mapRef.current = ref;\r\n-                }\r\n+                if (ref && !mapRef.current) mapRef.current = ref;\r\n               }}\r\n               originWhitelist={[\"*\"]}\r\n               source={{ html: mapHtml }}\r\n               javaScriptEnabled\r\n-              onMessage={(event) => setDestination(JSON.parse(event.nativeEvent.data))}\r\n+              style={styles.map}\r\n             />\r\n           )}\r\n \r\n           <View style={styles.overlayContainer}>\r\n@@ -246,8 +244,9 @@\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n+  map: { width: width, height: height, position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0,},\r\n   container: { flex: 1, backgroundColor: \"#fff\" },\r\n   overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n   card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n   cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n"
                },
                {
                    "date": 1747416144925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,14 @@\n       <html>\r\n         <head>\r\n           <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n           <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n-          <style> html, body, #map { height: 100%; margin: 0; padding: 0; } </style>\r\n+          <style>\r\n+            html, body { height: 100%; margin: 0; padding: 0; overflow: hidden; }\r\n+            #map { height: 100vh; width: 100vw; position: relative; }\r\n+            .leaflet-control-zoom { top: 10px !important; left: 10px !important; }\r\n+          </style>\r\n+\r\n         </head>\r\n         <body>\r\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n@@ -55,9 +60,42 @@\n             L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n               maxZoom: 19,\r\n               attribution: '© OpenStreetMap contributors'\r\n             }).addTo(map);\r\n-            L.marker([${location.latitude}, ${location.longitude}]).addTo(map);\r\n+\r\n+            const map = L.map('map', {\r\n+              zoomControl: false, // we'll reposition it manually\r\n+              dragging: true,\r\n+              scrollWheelZoom: true,\r\n+              touchZoom: true,\r\n+              doubleClickZoom: true,\r\n+              boxZoom: true,\r\n+            }).setView([${location.latitude}, ${location.longitude}], 15);\r\n+\r\n+            L.control.zoom({\r\n+              position: 'topleft' // or 'topright', adjust based on UI\r\n+            }).addTo(map);\r\n+\r\n+\r\n+\r\n+            let destMarker = null;\r\n+            let routeLine = null;\r\n+\r\n+            map.on('click', function(e) {\r\n+              const { lat, lng } = e.latlng;\r\n+              if (destMarker) map.removeLayer(destMarker);\r\n+              if (routeLine) map.removeLayer(routeLine);\r\n+              destMarker = L.marker([lat, lng]).addTo(map);\r\n+              window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n+            });\r\n+\r\n+            window.addEventListener('message', function(event) {\r\n+              const msg = JSON.parse(event.data);\r\n+              if (msg.type === 'drawRoute' && msg.coords) {\r\n+                if (routeLine) map.removeLayer(routeLine);\r\n+                routeLine = L.polyline(msg.coords, { color: 'red' }).addTo(map);\r\n+              }\r\n+            });\r\n           </script>\r\n         </body>\r\n       </html>\r\n     `;\r\n@@ -158,14 +196,17 @@\n           <StatusBar barStyle=\"light-content\" translucent backgroundColor=\"black\" />\r\n           {mapHtml && (\r\n             <WebView\r\n               ref={(ref) => {\r\n-                if (ref && !mapRef.current) mapRef.current = ref;\r\n+                if (ref && !mapRef.current) {\r\n+                  mapRef.current = ref;\r\n+                }\r\n               }}\r\n               originWhitelist={[\"*\"]}\r\n               source={{ html: mapHtml }}\r\n               javaScriptEnabled\r\n-              style={styles.map}\r\n+              onMessage={(event) => setDestination(JSON.parse(event.nativeEvent.data))}\r\n+              style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n             />\r\n           )}\r\n \r\n           <View style={styles.overlayContainer}>\r\n@@ -244,9 +285,8 @@\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n-  map: { width: width, height: height, position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0,},\r\n   container: { flex: 1, backgroundColor: \"#fff\" },\r\n   overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n   card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n   cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n"
                },
                {
                    "date": 1747416219642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,35 +49,31 @@\n             html, body { height: 100%; margin: 0; padding: 0; overflow: hidden; }\r\n             #map { height: 100vh; width: 100vw; position: relative; }\r\n             .leaflet-control-zoom { top: 10px !important; left: 10px !important; }\r\n           </style>\r\n-\r\n         </head>\r\n         <body>\r\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n           <script>\r\n-            const map = L.map('map').setView([${location.latitude}, ${location.longitude}], 15);\r\n-            L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n-              maxZoom: 19,\r\n-              attribution: '© OpenStreetMap contributors'\r\n-            }).addTo(map);\r\n-\r\n             const map = L.map('map', {\r\n-              zoomControl: false, // we'll reposition it manually\r\n+              zoomControl: false,\r\n               dragging: true,\r\n               scrollWheelZoom: true,\r\n               touchZoom: true,\r\n               doubleClickZoom: true,\r\n               boxZoom: true,\r\n             }).setView([${location.latitude}, ${location.longitude}], 15);\r\n \r\n-            L.control.zoom({\r\n-              position: 'topleft' // or 'topright', adjust based on UI\r\n+            L.control.zoom({ position: 'topleft' }).addTo(map);\r\n+\r\n+            L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n+              maxZoom: 19,\r\n+              attribution: '© OpenStreetMap contributors'\r\n             }).addTo(map);\r\n \r\n+            const startMarker = L.marker([${location.latitude}, ${location.longitude}]).addTo(map);\r\n \r\n-\r\n             let destMarker = null;\r\n             let routeLine = null;\r\n \r\n             map.on('click', function(e) {\r\n@@ -99,8 +95,9 @@\n         </body>\r\n       </html>\r\n     `;\r\n \r\n+\r\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n   \r\n"
                },
                {
                    "date": 1747416297539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,16 @@\n           <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n           <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n           <style>\r\n             html, body { height: 100%; margin: 0; padding: 0; overflow: hidden; }\r\n-            #map { height: 100vh; width: 100vw; position: relative; }\r\n+            #map {\r\n+              height: 100vh;\r\n+              width: 100vw;\r\n+              position: relative;\r\n+              padding-top: 40px;   /* Top padding for zoom controls */\r\n+              padding-bottom: 80px; /* Bottom padding for booking panel */\r\n+              box-sizing: border-box;\r\n+            }\r\n             .leaflet-control-zoom { top: 10px !important; left: 10px !important; }\r\n           </style>\r\n         </head>\r\n         <body>\r\n"
                },
                {
                    "date": 1747416328443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -289,9 +289,9 @@\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n-  container: { flex: 1, backgroundColor: \"#fff\" },\r\n+  container: {paddingTop: 10,flex: 1, backgroundColor: \"#fff\" },\r\n   overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n   card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n   cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n   inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n"
                },
                {
                    "date": 1747416337837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -289,9 +289,9 @@\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n-  container: {paddingTop: 10,flex: 1, backgroundColor: \"#fff\" },\r\n+  container: {paddingTop: 30 ,flex: 1, backgroundColor: \"#fff\" },\r\n   overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n   card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n   cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n   inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n"
                },
                {
                    "date": 1747416587447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,14 +206,30 @@\n                 }\r\n               }}\r\n               originWhitelist={[\"*\"]}\r\n               source={{ html: mapHtml }}\r\n-              javaScriptEnabled\r\n+              javaScriptEnabled={true}\r\n+              scrollEnabled={false} // Let the map handle scrolling\r\n+              allowsFullscreenVideo={true}\r\n+              androidHardwareAccelerationDisabled={false}\r\n+              androidLayerType=\"hardware\"\r\n+              mixedContentMode=\"always\"\r\n+              overScrollMode=\"never\"\r\n+              setSupportMultipleWindows={false}\r\n+              allowUniversalAccessFromFileURLs={true}\r\n+              style={{\r\n+                position: \"absolute\",\r\n+                top: 0,\r\n+                left: 0,\r\n+                right: 0,\r\n+                bottom: 0,\r\n+                zIndex: 0,\r\n+              }}\r\n               onMessage={(event) => setDestination(JSON.parse(event.nativeEvent.data))}\r\n-              style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}\r\n             />\r\n           )}\r\n \r\n+\r\n           <View style={styles.overlayContainer}>\r\n             {showBookingForm && (\r\n               <View style={styles.card}>\r\n                 <View style={styles.cardHeader} />\r\n"
                },
                {
                    "date": 1747416874637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,9 +210,9 @@\n               javaScriptEnabled={true}\r\n               scrollEnabled={false} // Let the map handle scrolling\r\n               allowsFullscreenVideo={true}\r\n               androidHardwareAccelerationDisabled={false}\r\n-              androidLayerType=\"hardware\"\r\n+              androidLayerType=\"none\"\r\n               mixedContentMode=\"always\"\r\n               overScrollMode=\"never\"\r\n               setSupportMultipleWindows={false}\r\n               allowUniversalAccessFromFileURLs={true}\r\n"
                },
                {
                    "date": 1747416908977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,9 @@\n               scrollWheelZoom: true,\r\n               touchZoom: true,\r\n               doubleClickZoom: true,\r\n               boxZoom: true,\r\n+              gestureHandling: true,\r\n             }).setView([${location.latitude}, ${location.longitude}], 15);\r\n \r\n             L.control.zoom({ position: 'topleft' }).addTo(map);\r\n \r\n"
                },
                {
                    "date": 1747417070024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,16 @@\n         <head>\r\n           <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n           <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n           <style>\r\n-            html, body { height: 100%; margin: 0; padding: 0; overflow: hidden; }\r\n+            html, body, #map {\r\n+              height: 100%;\r\n+              margin: 0;\r\n+              padding: 0;\r\n+              overflow: hidden;\r\n+              touch-action: auto;\r\n+            }\r\n+\r\n             #map {\r\n               height: 100vh;\r\n               width: 100vw;\r\n               position: relative;\r\n"
                },
                {
                    "date": 1747417130842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,17 +52,8 @@\n               padding: 0;\r\n               overflow: hidden;\r\n               touch-action: auto;\r\n             }\r\n-\r\n-            #map {\r\n-              height: 100vh;\r\n-              width: 100vw;\r\n-              position: relative;\r\n-              padding-top: 40px;   /* Top padding for zoom controls */\r\n-              padding-bottom: 80px; /* Bottom padding for booking panel */\r\n-              box-sizing: border-box;\r\n-            }\r\n             .leaflet-control-zoom { top: 10px !important; left: 10px !important; }\r\n           </style>\r\n         </head>\r\n         <body>\r\n@@ -215,16 +206,8 @@\n               }}\r\n               originWhitelist={[\"*\"]}\r\n               source={{ html: mapHtml }}\r\n               javaScriptEnabled={true}\r\n-              scrollEnabled={false} // Let the map handle scrolling\r\n-              allowsFullscreenVideo={true}\r\n-              androidHardwareAccelerationDisabled={false}\r\n-              androidLayerType=\"none\"\r\n-              mixedContentMode=\"always\"\r\n-              overScrollMode=\"never\"\r\n-              setSupportMultipleWindows={false}\r\n-              allowUniversalAccessFromFileURLs={true}\r\n               style={{\r\n                 position: \"absolute\",\r\n                 top: 0,\r\n                 left: 0,\r\n"
                },
                {
                    "date": 1747417169592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,9 @@\n           </style>\r\n         </head>\r\n         <body>\r\n           <div id=\"map\"></div>\r\n+          <script src=\"https://unpkg.com/leaflet-gesture-handling\"></script>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n           <script>\r\n             const map = L.map('map', {\r\n               zoomControl: false,\r\n@@ -66,9 +67,8 @@\n               scrollWheelZoom: true,\r\n               touchZoom: true,\r\n               doubleClickZoom: true,\r\n               boxZoom: true,\r\n-              gestureHandling: true,\r\n             }).setView([${location.latitude}, ${location.longitude}], 15);\r\n \r\n             L.control.zoom({ position: 'topleft' }).addTo(map);\r\n \r\n"
                },
                {
                    "date": 1747417384216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,8 @@\n import { WebView } from \"react-native-webview\";\r\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n-import { OSRM_BASE_URL, API_BASE_URL } from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n"
                },
                {
                    "date": 1747417407252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n import { WebView } from \"react-native-webview\";\r\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n+import { OSRM_BASE_URL, API_BASE_URL } from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n"
                },
                {
                    "date": 1747417583265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,13 @@\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n   const [matchedDriver, setMatchedDriver] = useState<{ driverName: string; driverId:string} | null>(null);\r\n   const [bookingId, setBookingId] = useState(null);\r\n   const [showBookingForm, setShowBookingForm] = useState(false);\r\n+  const [searching, setSearching] = useState(false);\r\n+  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n \r\n \r\n+\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n"
                },
                {
                    "date": 1747417605669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,35 +124,56 @@\n       destinationLng: destination.longitude,\r\n       fare,\r\n       paymentMethod,\r\n       notes,\r\n-      passengerName: \"Anonymous\", // or retrieve from storage if needed\r\n+      passengerName: \"Anonymous\",\r\n     };\r\n \r\n     try {\r\n+      setShowBookingForm(false); // hide form\r\n+      setSearching(true);        // show searching state\r\n+\r\n       const response = await fetch(`${API_BASE_URL}/api/book`, {\r\n         method: \"POST\",\r\n         headers: { \"Content-Type\": \"application/json\" },\r\n         body: JSON.stringify(bookingData),\r\n       });\r\n \r\n       const result = await response.json();\r\n+      if (!response.ok) throw new Error(result.message || \"Something went wrong\");\r\n \r\n-      if (!response.ok) {\r\n-        throw new Error(result.message || \"Something went wrong\");\r\n-      }\r\n-\r\n       setBookingId(result.booking.id);\r\n-      setMatchedDriver(result.booking.driverId);\r\n \r\n-      const res = await fetch(`${API_BASE_URL}/api/driver/${result.booking.driverId}`);\r\n-      const data = await res.json();\r\n-      setMatchedDriver(data.driver);\r\n+      // Start polling for driver for up to 10 minutes\r\n+      const maxWaitTime = 10 * 60 * 1000; // 10 minutes\r\n+      const startTime = Date.now();\r\n \r\n-      Alert.alert(\"Success\", \"Booking sent successfully.\");\r\n+      const poll = async () => {\r\n+        try {\r\n+          const res = await fetch(`${API_BASE_URL}/api/driver/${result.booking.driverId}`);\r\n+          const data = await res.json();\r\n+          if (data?.driver) {\r\n+            setMatchedDriver(data.driver);\r\n+            setSearching(false);\r\n+            return;\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(\"⏳ Still waiting for driver...\");\r\n+        }\r\n+\r\n+        if (Date.now() - startTime < maxWaitTime) {\r\n+          searchTimeoutRef.current = setTimeout(poll, 5000); // try again in 5 sec\r\n+        } else {\r\n+          setSearching(false); // stop searching silently\r\n+          console.log(\"❌ No driver found within 10 minutes.\");\r\n+        }\r\n+      };\r\n+\r\n+      poll(); // start polling\r\n     } catch (error) {\r\n       console.error(\"❌ Booking error:\", error);\r\n       Alert.alert(\"Error\", \"Failed to send booking. Please try again.\");\r\n+      setSearching(false);\r\n     }\r\n   };\r\n \r\n \r\n"
                },
                {
                    "date": 1747417775334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,31 +261,42 @@\n                 <View style={styles.totalFareContainer}>\r\n                   <View style={styles.fareBox}><Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text></View>\r\n                   <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}><Text style={styles.bookNowText}>BOOK NOW</Text></TouchableOpacity>\r\n                 </View>\r\n+                {searching && (\r\n+                  <View style={{ backgroundColor: \"#fff3cd\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+                    <Text style={{ fontWeight: \"bold\" }}>🔍 Finding a driver...</Text>\r\n+                    <TouchableOpacity\r\n+                      onPress={() => {\r\n+                        setSearching(false);\r\n+                        setBookingId(null);\r\n+                        if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                      }}\r\n+                      style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+                    >\r\n+                      <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n+                    </TouchableOpacity>\r\n+                  </View>\r\n+                )}\r\n+\r\n+                {/* ✅ Show this if driver is found */}\r\n                 {matchedDriver && (\r\n                   <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n                     <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n-                    <Text>Name: {matchedDriver?.driverName}</Text>\r\n-                    \r\n+                    <Text>Name: {matchedDriver.driverName}</Text>\r\n+                    <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n+                    <Text>Experience: {matchedDriver.experienceYears ?? \"N/A\"} years</Text>\r\n+\r\n                     <TouchableOpacity\r\n-                      onPress={async () => {\r\n-                        try {\r\n-                          const res = await fetch(`${API_BASE_URL}/api/confirm-driver`, {\r\n-                            method: \"POST\",\r\n-                            headers: { \"Content-Type\": \"application/json\" },\r\n-                            body: JSON.stringify({ bookingId }),\r\n-                          });\r\n-                          const data = await res.json();\r\n-                          Alert.alert(\"Confirmed\", \"You accepted the driver!\");\r\n-                          setMatchedDriver(null);\r\n-                        } catch (error) {\r\n-                          console.error(\"❌ Confirm error:\", error);\r\n-                        }\r\n+                      onPress={() => {\r\n+                        setMatchedDriver(null);\r\n+                        setBookingId(null);\r\n+                        setSearching(false);\r\n+                        if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n                       }}\r\n-                      style={{ backgroundColor: \"#3cba54\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+                      style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n                     >\r\n-                      <Text style={{ color: \"white\", textAlign: \"center\" }}>CONFIRM DRIVER</Text>\r\n+                      <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n                     </TouchableOpacity>\r\n                   </View>\r\n                 )}\r\n               </View>\r\n"
                },
                {
                    "date": 1747417849184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,12 +34,13 @@\n   const [matchedDriver, setMatchedDriver] = useState<{ driverName: string; driverId:string} | null>(null);\r\n   const [bookingId, setBookingId] = useState(null);\r\n   const [showBookingForm, setShowBookingForm] = useState(false);\r\n   const [searching, setSearching] = useState(false);\r\n-  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n+  const searchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n \r\n \r\n \r\n+\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n"
                },
                {
                    "date": 1747417906362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -284,10 +284,9 @@\n                   <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n                     <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n                     <Text>Name: {matchedDriver.driverName}</Text>\r\n                     <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n-                    <Text>Experience: {matchedDriver.experienceYears ?? \"N/A\"} years</Text>\r\n-\r\n+                    <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n                     <TouchableOpacity\r\n                       onPress={() => {\r\n                         setMatchedDriver(null);\r\n                         setBookingId(null);\r\n"
                },
                {
                    "date": 1747418004496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,14 @@\n   const [fare, setFare] = useState(20);\r\n   const [mapHtml, setMapHtml] = useState(\"\");\r\n   const mapRef = useRef<WebViewType>(null);\r\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n-  const [matchedDriver, setMatchedDriver] = useState<{ driverName: string; driverId:string} | null>(null);\r\n+  const [matchedDriver, setMatchedDriver] = useState<{\r\n+    driverName: string;\r\n+    driverId: string;\r\n+    franchiseNumber?: string;\r\n+    experienceYears?: string;\r\n+  } | null>(null);\r\n   const [bookingId, setBookingId] = useState(null);\r\n   const [showBookingForm, setShowBookingForm] = useState(false);\r\n   const [searching, setSearching] = useState(false);\r\n   const searchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n"
                },
                {
                    "date": 1747418177696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,8 @@\n           </style>\r\n         </head>\r\n         <body>\r\n           <div id=\"map\"></div>\r\n-          <script src=\"https://unpkg.com/leaflet-gesture-handling\"></script>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n           <script>\r\n             const map = L.map('map', {\r\n               zoomControl: false,\r\n@@ -85,37 +84,63 @@\n               maxZoom: 19,\r\n               attribution: '© OpenStreetMap contributors'\r\n             }).addTo(map);\r\n \r\n-            const startMarker = L.marker([${location.latitude}, ${location.longitude}]).addTo(map);\r\n+            const currentMarker = L.marker([${location.latitude}, ${location.longitude}], {\r\n+              icon: L.icon({\r\n+                iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png',\r\n+                iconSize: [30, 30],\r\n+              })\r\n+            }).addTo(map);\r\n \r\n             let destMarker = null;\r\n-            let routeLine = null;\r\n+            let driverMarker = null;\r\n \r\n             map.on('click', function(e) {\r\n               const { lat, lng } = e.latlng;\r\n               if (destMarker) map.removeLayer(destMarker);\r\n-              if (routeLine) map.removeLayer(routeLine);\r\n-              destMarker = L.marker([lat, lng]).addTo(map);\r\n+              destMarker = L.marker([lat, lng], {\r\n+                icon: L.icon({\r\n+                  iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n+                  iconSize: [30, 30],\r\n+                })\r\n+              }).addTo(map);\r\n               window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n             });\r\n \r\n             window.addEventListener('message', function(event) {\r\n               const msg = JSON.parse(event.data);\r\n-              if (msg.type === 'drawRoute' && msg.coords) {\r\n-                if (routeLine) map.removeLayer(routeLine);\r\n-                routeLine = L.polyline(msg.coords, { color: 'red' }).addTo(map);\r\n+              if (msg.type === 'setMarkers') {\r\n+                if (destMarker) map.removeLayer(destMarker);\r\n+                if (msg.destination) {\r\n+                  destMarker = L.marker([msg.destination.latitude, msg.destination.longitude], {\r\n+                    icon: L.icon({\r\n+                      iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n+                      iconSize: [30, 30],\r\n+                    })\r\n+                  }).addTo(map);\r\n+                }\r\n+\r\n+                if (driverMarker) map.removeLayer(driverMarker);\r\n+                if (msg.driver) {\r\n+                  driverMarker = L.marker([msg.driver.latitude, msg.driver.longitude], {\r\n+                    icon: L.icon({\r\n+                      iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n+                      iconSize: [30, 30],\r\n+                    })\r\n+                  }).addTo(map);\r\n+                }\r\n               }\r\n             });\r\n           </script>\r\n         </body>\r\n       </html>\r\n     `;\r\n \r\n-\r\n     setMapHtml(html);\r\n   }, [location]);\r\n \r\n+\r\n   \r\n \r\n   const handleBookNow = async () => {\r\n     if (!location || !destination) {\r\n"
                },
                {
                    "date": 1747418210427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,13 +136,29 @@\n       </html>\r\n     `;\r\n \r\n     setMapHtml(html);\r\n-  }, [location]);\r\n+    }, [location]);\r\n \r\n+    useEffect(() => {\r\n+    if (!mapRef.current) return;\r\n \r\n-  \r\n+    const driverCoords = matchedDriver?.location\r\n+      ? {\r\n+          latitude: matchedDriver.location.latitude,\r\n+          longitude: matchedDriver.location.longitude,\r\n+        }\r\n+      : null;\r\n \r\n+    mapRef.current.postMessage(\r\n+      JSON.stringify({\r\n+        type: \"setMarkers\",\r\n+        destination,\r\n+        driver: driverCoords,\r\n+      })\r\n+    );\r\n+  }, [destination, matchedDriver]);\r\n+\r\n   const handleBookNow = async () => {\r\n     if (!location || !destination) {\r\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n"
                },
                {
                    "date": 1747418338797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,10 @@\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n   const [matchedDriver, setMatchedDriver] = useState<{\r\n     driverName: string;\r\n     driverId: string;\r\n-    franchiseNumber?: string;\r\n-    experienceYears?: string;\r\n+    franchiseNumber: string;\r\n+    experienceYears: string;\r\n   } | null>(null);\r\n   const [bookingId, setBookingId] = useState(null);\r\n   const [showBookingForm, setShowBookingForm] = useState(false);\r\n   const [searching, setSearching] = useState(false);\r\n"
                },
                {
                    "date": 1747418443121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,11 +33,13 @@\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n   const [matchedDriver, setMatchedDriver] = useState<{\r\n     driverName: string;\r\n     driverId: string;\r\n-    franchiseNumber: string;\r\n-    experienceYears: string;\r\n+    franchiseNumber?: string;\r\n+    experienceYears?: string;\r\n+    location?: { latitude: number; longitude: number }; \r\n   } | null>(null);\r\n+\r\n   const [bookingId, setBookingId] = useState(null);\r\n   const [showBookingForm, setShowBookingForm] = useState(false);\r\n   const [searching, setSearching] = useState(false);\r\n   const searchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n"
                },
                {
                    "date": 1747547744293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,15 +33,15 @@\n   const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n   const [matchedDriver, setMatchedDriver] = useState<{\r\n     driverName: string;\r\n     driverId: string;\r\n-    franchiseNumber?: string;\r\n-    experienceYears?: string;\r\n-    location?: { latitude: number; longitude: number }; \r\n+    franchiseNumber: string;\r\n+    experienceYears: string;\r\n+    location: { latitude: number; longitude: number }; \r\n   } | null>(null);\r\n \r\n   const [bookingId, setBookingId] = useState(null);\r\n-  const [showBookingForm, setShowBookingForm] = useState(false);\r\n+  const [showBookingForm, setShowBookingForm] = useState(false); \r\n   const [searching, setSearching] = useState(false);\r\n   const searchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n \r\n \r\n@@ -255,15 +255,28 @@\n     return () => clearInterval(interval);\r\n   }, [bookingId]);\r\n \r\n   useEffect(() => {\r\n-    if (matchedDriver) {\r\n-      console.log(\"🎯 Matched driver name (from state):\", matchedDriver.driverId);\r\n-      console.log(\"🎯 Matched driver name (from state):\", matchedDriver.driverName);\r\n-    }\r\n-  }, [matchedDriver]);\r\n+    if (!mapRef.current) return;\r\n \r\n+    const driverCoords = matchedDriver?.location\r\n+      ? {\r\n+          latitude: matchedDriver.location.latitude,\r\n+          longitude: matchedDriver.location.longitude,\r\n+        }\r\n+      : null;\r\n \r\n+    mapRef.current.postMessage(\r\n+      JSON.stringify({\r\n+        type: \"setMarkers\",\r\n+        destination,\r\n+        driver: driverCoords,\r\n+      })\r\n+    );\r\n+  }, [destination, matchedDriver]);\r\n+\r\n+\r\n+\r\n   if (loading || !location) return null;\r\n \r\n   return (\r\n     <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === \"ios\" ? \"padding\" : undefined} keyboardVerticalOffset={keyboardOffset}>\r\n"
                },
                {
                    "date": 1747547801744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,28 +255,15 @@\n     return () => clearInterval(interval);\r\n   }, [bookingId]);\r\n \r\n   useEffect(() => {\r\n-    if (!mapRef.current) return;\r\n+    if (matchedDriver) {\r\n+      console.log(\"🎯 Matched driver name (from state):\", matchedDriver.driverId);\r\n+      console.log(\"🎯 Matched driver name (from state):\", matchedDriver.driverName);\r\n+    }\r\n+  }, [matchedDriver]);\r\n+  \r\n \r\n-    const driverCoords = matchedDriver?.location\r\n-      ? {\r\n-          latitude: matchedDriver.location.latitude,\r\n-          longitude: matchedDriver.location.longitude,\r\n-        }\r\n-      : null;\r\n-\r\n-    mapRef.current.postMessage(\r\n-      JSON.stringify({\r\n-        type: \"setMarkers\",\r\n-        destination,\r\n-        driver: driverCoords,\r\n-      })\r\n-    );\r\n-  }, [destination, matchedDriver]);\r\n-\r\n-\r\n-\r\n   if (loading || !location) return null;\r\n \r\n   return (\r\n     <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === \"ios\" ? \"padding\" : undefined} keyboardVerticalOffset={keyboardOffset}>\r\n"
                },
                {
                    "date": 1747548748894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n               icon: L.icon({\r\n                 iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png',\r\n                 iconSize: [30, 30],\r\n               })\r\n-            }).addTo(map);\r\n+            }).addTo(map).bindTooltip(\"You\", { permanent: true, direction: \"top\" });\r\n \r\n             let destMarker = null;\r\n             let driverMarker = null;\r\n \r\n@@ -104,23 +104,25 @@\n                 icon: L.icon({\r\n                   iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n                   iconSize: [30, 30],\r\n                 })\r\n-              }).addTo(map);\r\n+              }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n+\r\n               window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n             });\r\n \r\n             window.addEventListener('message', function(event) {\r\n               const msg = JSON.parse(event.data);\r\n+\r\n               if (msg.type === 'setMarkers') {\r\n                 if (destMarker) map.removeLayer(destMarker);\r\n                 if (msg.destination) {\r\n                   destMarker = L.marker([msg.destination.latitude, msg.destination.longitude], {\r\n                     icon: L.icon({\r\n                       iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n                       iconSize: [30, 30],\r\n                     })\r\n-                  }).addTo(map);\r\n+                  }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n                 }\r\n \r\n                 if (driverMarker) map.removeLayer(driverMarker);\r\n                 if (msg.driver) {\r\n@@ -128,13 +130,14 @@\n                     icon: L.icon({\r\n                       iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n                       iconSize: [30, 30],\r\n                     })\r\n-                  }).addTo(map);\r\n+                  }).addTo(map).bindTooltip(\"Driver\", { permanent: true, direction: \"top\" });\r\n                 }\r\n               }\r\n             });\r\n           </script>\r\n+\r\n         </body>\r\n       </html>\r\n     `;\r\n \r\n@@ -260,10 +263,10 @@\n       console.log(\"🎯 Matched driver name (from state):\", matchedDriver.driverId);\r\n       console.log(\"🎯 Matched driver name (from state):\", matchedDriver.driverName);\r\n     }\r\n   }, [matchedDriver]);\r\n-  \r\n \r\n+\r\n   if (loading || !location) return null;\r\n \r\n   return (\r\n     <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === \"ios\" ? \"padding\" : undefined} keyboardVerticalOffset={keyboardOffset}>\r\n"
                },
                {
                    "date": 1747548945047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,8 +204,9 @@\n           const res = await fetch(`${API_BASE_URL}/api/driver/${result.booking.driverId}`);\r\n           const data = await res.json();\r\n           if (data?.driver) {\r\n             setMatchedDriver(data.driver);\r\n+            console.log(\"🚨 DRIVER DATA FROM BACKEND:\", data.driver);\r\n             setSearching(false);\r\n             return;\r\n           }\r\n         } catch (err) {\r\n@@ -227,10 +228,8 @@\n       setSearching(false);\r\n     }\r\n   };\r\n \r\n-\r\n-\r\n   useEffect(() => {\r\n     const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => setKeyboardOffset(-35));\r\n     const showSub = Keyboard.addListener(\"keyboardDidShow\", () => setKeyboardOffset(0));\r\n     return () => {\r\n"
                },
                {
                    "date": 1747549092428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,8 +330,9 @@\n                 )}\r\n \r\n                 {/* ✅ Show this if driver is found */}\r\n                 {matchedDriver && (\r\n+                  console.log(\"🧪 matchedDriver in UI:\", matchedDriver),\r\n                   <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n                     <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n                     <Text>Name: {matchedDriver.driverName}</Text>\r\n                     <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n"
                },
                {
                    "date": 1747551585767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,26 +200,31 @@\n       const startTime = Date.now();\r\n \r\n       const poll = async () => {\r\n         try {\r\n-          const res = await fetch(`${API_BASE_URL}/api/driver/${result.booking.driverId}`);\r\n-          const data = await res.json();\r\n-          if (data?.driver) {\r\n-            setMatchedDriver(data.driver);\r\n-            console.log(\"🚨 DRIVER DATA FROM BACKEND:\", data.driver);\r\n+          const [driverRes, statusRes] = await Promise.all([\r\n+            fetch(`${API_BASE_URL}/api/driver/${result.booking.driverId}`),\r\n+            fetch(`${API_BASE_URL}/api/driver-status/${result.booking.driverId}`)\r\n+          ]);\r\n+\r\n+          const driverData = await driverRes.json();\r\n+          const statusData = await statusRes.json();\r\n+\r\n+          if (driverData?.driver) {\r\n+            setMatchedDriver({\r\n+              driverName: driverData.driver.driverName,\r\n+              driverId: driverData.driver._id,\r\n+              franchiseNumber: driverData.driver.franchiseNumber || \"N/A\",\r\n+              experienceYears: driverData.driver.experienceYears || \"N/A\",\r\n+              location: statusData.location || null, // Live GPS\r\n+            });\r\n+\r\n+            console.log(\"🚨 DRIVER DATA FROM BACKEND:\", driverData.driver);\r\n+            console.log(\"📍 LIVE LOCATION:\", statusData.location);\r\n             setSearching(false);\r\n             return;\r\n           }\r\n-        } catch (err) {\r\n-          console.log(\"⏳ Still waiting for driver...\");\r\n         }\r\n-\r\n-        if (Date.now() - startTime < maxWaitTime) {\r\n-          searchTimeoutRef.current = setTimeout(poll, 5000); // try again in 5 sec\r\n-        } else {\r\n-          setSearching(false); // stop searching silently\r\n-          console.log(\"❌ No driver found within 10 minutes.\");\r\n-        }\r\n       };\r\n \r\n       poll(); // start polling\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1747551635083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,19 @@\n             console.log(\"📍 LIVE LOCATION:\", statusData.location);\r\n             setSearching(false);\r\n             return;\r\n           }\r\n+\r\n+        } catch (err) {\r\n+          console.log(\"⏳ Still waiting for driver...\");\r\n         }\r\n+\r\n+        if (Date.now() - startTime < maxWaitTime) {\r\n+          searchTimeoutRef.current = setTimeout(poll, 5000); // try again in 5 sec\r\n+        } else {\r\n+          setSearching(false); // stop searching silently\r\n+          console.log(\"❌ No driver found within 10 minutes.\");\r\n+        }\r\n       };\r\n \r\n       poll(); // start polling\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1747551736379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,8 @@\n             console.log(\"📍 LIVE LOCATION:\", statusData.location);\r\n             setSearching(false);\r\n             return;\r\n           }\r\n-\r\n         } catch (err) {\r\n           console.log(\"⏳ Still waiting for driver...\");\r\n         }\r\n \r\n@@ -310,8 +309,45 @@\n           )}\r\n \r\n \r\n           <View style={styles.overlayContainer}>\r\n+            {searching && (\r\n+              <View style={{ backgroundColor: \"#fff3cd\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+                <Text style={{ fontWeight: \"bold\" }}>🔍 Finding a driver...</Text>\r\n+                <TouchableOpacity\r\n+                  onPress={() => {\r\n+                    setSearching(false);\r\n+                    setBookingId(null);\r\n+                    if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                  }}\r\n+                  style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+                >\r\n+                  <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n+                </TouchableOpacity>\r\n+              </View>\r\n+            )}\r\n+\r\n+            {/* ✅ Show this if driver is found */}\r\n+            {matchedDriver && (\r\n+              console.log(\"🧪 matchedDriver in UI:\", matchedDriver),\r\n+              <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+                <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n+                <Text>Name: {matchedDriver.driverName}</Text>\r\n+                <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n+                <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n+                <TouchableOpacity\r\n+                  onPress={() => {\r\n+                    setMatchedDriver(null);\r\n+                    setBookingId(null);\r\n+                    setSearching(false);\r\n+                    if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                  }}\r\n+                  style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+                >\r\n+                  <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n+                </TouchableOpacity>\r\n+              </View>\r\n+            )}\r\n             {showBookingForm && (\r\n               <View style={styles.card}>\r\n                 <View style={styles.cardHeader} />\r\n                 <TouchableOpacity style={styles.inputBox}>\r\n@@ -327,45 +363,8 @@\n                 <View style={styles.totalFareContainer}>\r\n                   <View style={styles.fareBox}><Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text></View>\r\n                   <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}><Text style={styles.bookNowText}>BOOK NOW</Text></TouchableOpacity>\r\n                 </View>\r\n-                {searching && (\r\n-                  <View style={{ backgroundColor: \"#fff3cd\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n-                    <Text style={{ fontWeight: \"bold\" }}>🔍 Finding a driver...</Text>\r\n-                    <TouchableOpacity\r\n-                      onPress={() => {\r\n-                        setSearching(false);\r\n-                        setBookingId(null);\r\n-                        if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-                      }}\r\n-                      style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n-                    >\r\n-                      <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n-                    </TouchableOpacity>\r\n-                  </View>\r\n-                )}\r\n-\r\n-                {/* ✅ Show this if driver is found */}\r\n-                {matchedDriver && (\r\n-                  console.log(\"🧪 matchedDriver in UI:\", matchedDriver),\r\n-                  <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n-                    <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n-                    <Text>Name: {matchedDriver.driverName}</Text>\r\n-                    <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n-                    <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n-                    <TouchableOpacity\r\n-                      onPress={() => {\r\n-                        setMatchedDriver(null);\r\n-                        setBookingId(null);\r\n-                        setSearching(false);\r\n-                        if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-                      }}\r\n-                      style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n-                    >\r\n-                      <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n-                    </TouchableOpacity>\r\n-                  </View>\r\n-                )}\r\n               </View>\r\n             )}\r\n \r\n             {!showBookingForm && (\r\n"
                },
                {
                    "date": 1747551767282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,46 +308,48 @@\n             />\r\n           )}\r\n \r\n \r\n+          {searching && (\r\n+            <View style={{ backgroundColor: \"#fff3cd\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+              <Text style={{ fontWeight: \"bold\" }}>🔍 Finding a driver...</Text>\r\n+              <TouchableOpacity\r\n+                onPress={() => {\r\n+                  setSearching(false);\r\n+                  setBookingId(null);\r\n+                  if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                }}\r\n+                style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+              >\r\n+                <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n+              </TouchableOpacity>\r\n+            </View>\r\n+          )}\r\n+\r\n+          {/* ✅ Show this if driver is found */}\r\n+          {matchedDriver && (\r\n+            console.log(\"🧪 matchedDriver in UI:\", matchedDriver),\r\n+            <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+              <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n+              <Text>Name: {matchedDriver.driverName}</Text>\r\n+              <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n+              <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n+              <TouchableOpacity\r\n+                onPress={() => {\r\n+                  setMatchedDriver(null);\r\n+                  setBookingId(null);\r\n+                  setSearching(false);\r\n+                  if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                }}\r\n+                style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+              >\r\n+                <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n+              </TouchableOpacity>\r\n+            </View>\r\n+          )}\r\n+\r\n+\r\n           <View style={styles.overlayContainer}>\r\n-            {searching && (\r\n-              <View style={{ backgroundColor: \"#fff3cd\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n-                <Text style={{ fontWeight: \"bold\" }}>🔍 Finding a driver...</Text>\r\n-                <TouchableOpacity\r\n-                  onPress={() => {\r\n-                    setSearching(false);\r\n-                    setBookingId(null);\r\n-                    if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-                  }}\r\n-                  style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n-                >\r\n-                  <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n-                </TouchableOpacity>\r\n-              </View>\r\n-            )}\r\n-\r\n-            {/* ✅ Show this if driver is found */}\r\n-            {matchedDriver && (\r\n-              console.log(\"🧪 matchedDriver in UI:\", matchedDriver),\r\n-              <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n-                <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n-                <Text>Name: {matchedDriver.driverName}</Text>\r\n-                <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n-                <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n-                <TouchableOpacity\r\n-                  onPress={() => {\r\n-                    setMatchedDriver(null);\r\n-                    setBookingId(null);\r\n-                    setSearching(false);\r\n-                    if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-                  }}\r\n-                  style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n-                >\r\n-                  <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n-                </TouchableOpacity>\r\n-              </View>\r\n-            )}\r\n             {showBookingForm && (\r\n               <View style={styles.card}>\r\n                 <View style={styles.cardHeader} />\r\n                 <TouchableOpacity style={styles.inputBox}>\r\n"
                },
                {
                    "date": 1747551795812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,49 +306,51 @@\n               }}\r\n               onMessage={(event) => setDestination(JSON.parse(event.nativeEvent.data))}\r\n             />\r\n           )}\r\n+          \r\n \r\n+          <View>\r\n+            {searching && (\r\n+              <View style={{ backgroundColor: \"#fff3cd\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+                <Text style={{ fontWeight: \"bold\" }}>🔍 Finding a driver...</Text>\r\n+                <TouchableOpacity\r\n+                  onPress={() => {\r\n+                    setSearching(false);\r\n+                    setBookingId(null);\r\n+                    if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                  }}\r\n+                  style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+                >\r\n+                  <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n+                </TouchableOpacity>\r\n+              </View>\r\n+            )}\r\n \r\n-          {searching && (\r\n-            <View style={{ backgroundColor: \"#fff3cd\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n-              <Text style={{ fontWeight: \"bold\" }}>🔍 Finding a driver...</Text>\r\n-              <TouchableOpacity\r\n-                onPress={() => {\r\n-                  setSearching(false);\r\n-                  setBookingId(null);\r\n-                  if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-                }}\r\n-                style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n-              >\r\n-                <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n-              </TouchableOpacity>\r\n-            </View>\r\n-          )}\r\n+            {/* ✅ Show this if driver is found */}\r\n+            {matchedDriver && (\r\n+              console.log(\"🧪 matchedDriver in UI:\", matchedDriver),\r\n+              <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+                <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n+                <Text>Name: {matchedDriver.driverName}</Text>\r\n+                <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n+                <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n+                <TouchableOpacity\r\n+                  onPress={() => {\r\n+                    setMatchedDriver(null);\r\n+                    setBookingId(null);\r\n+                    setSearching(false);\r\n+                    if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                  }}\r\n+                  style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+                >\r\n+                  <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n+                </TouchableOpacity>\r\n+              </View>\r\n+            )}\r\n+          </View>\r\n \r\n-          {/* ✅ Show this if driver is found */}\r\n-          {matchedDriver && (\r\n-            console.log(\"🧪 matchedDriver in UI:\", matchedDriver),\r\n-            <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n-              <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n-              <Text>Name: {matchedDriver.driverName}</Text>\r\n-              <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n-              <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n-              <TouchableOpacity\r\n-                onPress={() => {\r\n-                  setMatchedDriver(null);\r\n-                  setBookingId(null);\r\n-                  setSearching(false);\r\n-                  if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-                }}\r\n-                style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n-              >\r\n-                <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n-              </TouchableOpacity>\r\n-            </View>\r\n-          )}\r\n \r\n-\r\n           <View style={styles.overlayContainer}>\r\n             {showBookingForm && (\r\n               <View style={styles.card}>\r\n                 <View style={styles.cardHeader} />\r\n"
                },
                {
                    "date": 1747551860213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,52 +306,49 @@\n               }}\r\n               onMessage={(event) => setDestination(JSON.parse(event.nativeEvent.data))}\r\n             />\r\n           )}\r\n-          \r\n \r\n-          <View>\r\n-            {searching && (\r\n-              <View style={{ backgroundColor: \"#fff3cd\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n-                <Text style={{ fontWeight: \"bold\" }}>🔍 Finding a driver...</Text>\r\n-                <TouchableOpacity\r\n-                  onPress={() => {\r\n-                    setSearching(false);\r\n-                    setBookingId(null);\r\n-                    if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-                  }}\r\n-                  style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n-                >\r\n-                  <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n-                </TouchableOpacity>\r\n-              </View>\r\n-            )}\r\n+          <View style={styles.overlayContainer}>\r\n+            <View style={styles.overlay}>\r\n+              {searching && (\r\n+                <View style={{ backgroundColor: \"#fff3cd\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+                  <Text style={{ fontWeight: \"bold\" }}>🔍 Finding a driver...</Text>\r\n+                  <TouchableOpacity\r\n+                    onPress={() => {\r\n+                      setSearching(false);\r\n+                      setBookingId(null);\r\n+                      if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                    }}\r\n+                    style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+                  >\r\n+                    <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+              )}\r\n \r\n-            {/* ✅ Show this if driver is found */}\r\n-            {matchedDriver && (\r\n-              console.log(\"🧪 matchedDriver in UI:\", matchedDriver),\r\n-              <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n-                <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n-                <Text>Name: {matchedDriver.driverName}</Text>\r\n-                <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n-                <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n-                <TouchableOpacity\r\n-                  onPress={() => {\r\n-                    setMatchedDriver(null);\r\n-                    setBookingId(null);\r\n-                    setSearching(false);\r\n-                    if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-                  }}\r\n-                  style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n-                >\r\n-                  <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n-                </TouchableOpacity>\r\n-              </View>\r\n-            )}\r\n-          </View>\r\n-\r\n-\r\n-          <View style={styles.overlayContainer}>\r\n+              {/* ✅ Show this if driver is found */}\r\n+              {matchedDriver && (\r\n+                console.log(\"🧪 matchedDriver in UI:\", matchedDriver),\r\n+                <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+                  <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n+                  <Text>Name: {matchedDriver.driverName}</Text>\r\n+                  <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n+                  <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n+                  <TouchableOpacity\r\n+                    onPress={() => {\r\n+                      setMatchedDriver(null);\r\n+                      setBookingId(null);\r\n+                      setSearching(false);\r\n+                      if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                    }}\r\n+                    style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+                  >\r\n+                    <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+              )}\r\n+            </View>\r\n             {showBookingForm && (\r\n               <View style={styles.card}>\r\n                 <View style={styles.cardHeader} />\r\n                 <TouchableOpacity style={styles.inputBox}>\r\n@@ -402,8 +399,9 @@\n \r\n const styles = StyleSheet.create({\r\n   container: {paddingTop: 30 ,flex: 1, backgroundColor: \"#fff\" },\r\n   overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n+  overlay: {},\r\n   card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n   cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n   inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n   inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n"
                },
                {
                    "date": 1747551882202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -399,9 +399,9 @@\n \r\n const styles = StyleSheet.create({\r\n   container: {paddingTop: 30 ,flex: 1, backgroundColor: \"#fff\" },\r\n   overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n-  overlay: {},\r\n+  overlay: {width: width},\r\n   card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n   cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n   inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n   inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n"
                },
                {
                    "date": 1747551895698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -399,9 +399,9 @@\n \r\n const styles = StyleSheet.create({\r\n   container: {paddingTop: 30 ,flex: 1, backgroundColor: \"#fff\" },\r\n   overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n-  overlay: {width: width},\r\n+  overlay: {width: width, marginHorizontal: 30},\r\n   card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n   cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n   inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n   inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n"
                },
                {
                    "date": 1747551915296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -399,9 +399,9 @@\n \r\n const styles = StyleSheet.create({\r\n   container: {paddingTop: 30 ,flex: 1, backgroundColor: \"#fff\" },\r\n   overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n-  overlay: {width: width, marginHorizontal: 30},\r\n+  overlay: {width: width, marginHorizontal: 30, marginVertical: 30},\r\n   card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n   cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n   inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n   inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n"
                },
                {
                    "date": 1747551927075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -399,9 +399,9 @@\n \r\n const styles = StyleSheet.create({\r\n   container: {paddingTop: 30 ,flex: 1, backgroundColor: \"#fff\" },\r\n   overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n-  overlay: {width: width, marginHorizontal: 30, marginVertical: 30},\r\n+  overlay: {width: width, margin: 50},\r\n   card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n   cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n   inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n   inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n"
                },
                {
                    "date": 1747551935068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -399,9 +399,9 @@\n \r\n const styles = StyleSheet.create({\r\n   container: {paddingTop: 30 ,flex: 1, backgroundColor: \"#fff\" },\r\n   overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n-  overlay: {width: width, margin: 50},\r\n+  overlay: {width: width, margin: 60},\r\n   card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n   cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n   inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n   inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n"
                },
                {
                    "date": 1747552059119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n     driverName: string;\r\n     driverId: string;\r\n     franchiseNumber: string;\r\n     experienceYears: string;\r\n+    selfieImage: string;\r\n     location: { latitude: number; longitude: number }; \r\n   } | null>(null);\r\n \r\n   const [bookingId, setBookingId] = useState(null);\r\n"
                },
                {
                    "date": 1747552081010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,8 +215,9 @@\n               driverName: driverData.driver.driverName,\r\n               driverId: driverData.driver._id,\r\n               franchiseNumber: driverData.driver.franchiseNumber || \"N/A\",\r\n               experienceYears: driverData.driver.experienceYears || \"N/A\",\r\n+              selfieImage: driverData.driver.selfieImage || \"N/A\",\r\n               location: statusData.location || null, // Live GPS\r\n             });\r\n \r\n             console.log(\"🚨 DRIVER DATA FROM BACKEND:\", driverData.driver);\r\n"
                },
                {
                    "date": 1747552211887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -401,9 +401,9 @@\n \r\n const styles = StyleSheet.create({\r\n   container: {paddingTop: 30 ,flex: 1, backgroundColor: \"#fff\" },\r\n   overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n-  overlay: {width: width, margin: 60},\r\n+  overlay: {width: width, margin: 100},\r\n   card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n   cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n   inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n   inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n"
                },
                {
                    "date": 1747552229993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -401,9 +401,9 @@\n \r\n const styles = StyleSheet.create({\r\n   container: {paddingTop: 30 ,flex: 1, backgroundColor: \"#fff\" },\r\n   overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n-  overlay: {width: width, margin: 100},\r\n+  overlay: {width: width, margin: 60},\r\n   card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n   cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n   inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n   inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n"
                },
                {
                    "date": 1747552905835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n   KeyboardAvoidingView,\r\n   Platform,\r\n   TouchableWithoutFeedback,\r\n   Keyboard,\r\n+  Image\r\n } from \"react-native\";\r\n import { WebView } from \"react-native-webview\";\r\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n@@ -329,11 +330,17 @@\n               )}\r\n \r\n               {/* ✅ Show this if driver is found */}\r\n               {matchedDriver && (\r\n-                console.log(\"🧪 matchedDriver in UI:\", matchedDriver),\r\n                 <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n                   <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n+                  <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n+                  {matchedDriver.selfieImage && (\r\n+                    <Image\r\n+                      source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n+                      style={{ width: 80, height: 80, borderRadius: 40, marginVertical: 8 }}\r\n+                    />\r\n+                  )}\r\n                   <Text>Name: {matchedDriver.driverName}</Text>\r\n                   <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n                   <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n                   <TouchableOpacity\r\n@@ -369,9 +376,9 @@\n                 </View>\r\n               </View>\r\n             )}\r\n \r\n-            {!showBookingForm && (\r\n+            {!matchedDriver && !searching && !showBookingForm && (\r\n               <TouchableOpacity\r\n                 onPress={() => setShowBookingForm(true)}\r\n                 style={{\r\n                   position: \"absolute\",\r\n"
                },
                {
                    "date": 1747552927114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,9 +376,9 @@\n                 </View>\r\n               </View>\r\n             )}\r\n \r\n-            {!matchedDriver && !searching && !showBookingForm && (\r\n+            {matchedDriver && !searching && !showBookingForm && (\r\n               <TouchableOpacity\r\n                 onPress={() => setShowBookingForm(true)}\r\n                 style={{\r\n                   position: \"absolute\",\r\n"
                },
                {
                    "date": 1747552937480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,9 +376,9 @@\n                 </View>\r\n               </View>\r\n             )}\r\n \r\n-            {matchedDriver && !searching && !showBookingForm && (\r\n+            {!matchedDriver && !searching && !showBookingForm && (\r\n               <TouchableOpacity\r\n                 onPress={() => setShowBookingForm(true)}\r\n                 style={{\r\n                   position: \"absolute\",\r\n"
                },
                {
                    "date": 1747553190845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -332,9 +332,8 @@\n               {/* ✅ Show this if driver is found */}\r\n               {matchedDriver && (\r\n                 <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n                   <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n-                  <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n                   {matchedDriver.selfieImage && (\r\n                     <Image\r\n                       source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n                       style={{ width: 80, height: 80, borderRadius: 40, marginVertical: 8 }}\r\n"
                },
                {
                    "date": 1747555171264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,8 +333,9 @@\n               {matchedDriver && (\r\n                 <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n                   <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n                   {matchedDriver.selfieImage && (\r\n+                    console.log(\"🖼 Selfie Image URL:\", matchedDriver.selfieImage),\r\n                     <Image\r\n                       source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n                       style={{ width: 80, height: 80, borderRadius: 40, marginVertical: 8 }}\r\n                     />\r\n"
                },
                {
                    "date": 1747556637539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,20 @@\n               padding: 0;\r\n               overflow: hidden;\r\n               touch-action: auto;\r\n             }\r\n-            .leaflet-control-zoom { top: 10px !important; left: 10px !important; }\r\n+            .leaflet-control-zoom {\r\n+              top: 10px !important;\r\n+              left: 10px !important;\r\n+            }\r\n+            .driver-label {\r\n+              font-weight: bold;\r\n+              color: red;\r\n+              background: white;\r\n+              padding: 2px 5px;\r\n+              border-radius: 4px;\r\n+              font-size: 14px;\r\n+            }\r\n           </style>\r\n         </head>\r\n         <body>\r\n           <div id=\"map\"></div>\r\n@@ -93,14 +104,16 @@\n               icon: L.icon({\r\n                 iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png',\r\n                 iconSize: [30, 30],\r\n               })\r\n-            }).addTo(map).bindTooltip(\"You\", { permanent: true, direction: \"top\" });\r\n+            }).addTo(map)\r\n+              .bindTooltip(\"🧍 You\", { permanent: true, direction: \"top\" })\r\n+              .bringToBack();\r\n \r\n             let destMarker = null;\r\n             let driverMarker = null;\r\n \r\n-            map.on('click', function(e) {\r\n+            map.on('click', function (e) {\r\n               const { lat, lng } = e.latlng;\r\n               if (destMarker) map.removeLayer(destMarker);\r\n               destMarker = L.marker([lat, lng], {\r\n                 icon: L.icon({\r\n@@ -111,9 +124,9 @@\n \r\n               window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n             });\r\n \r\n-            window.addEventListener('message', function(event) {\r\n+            window.addEventListener('message', function (event) {\r\n               const msg = JSON.parse(event.data);\r\n \r\n               if (msg.type === 'setMarkers') {\r\n                 if (destMarker) map.removeLayer(destMarker);\r\n@@ -126,20 +139,27 @@\n                   }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n                 }\r\n \r\n                 if (driverMarker) map.removeLayer(driverMarker);\r\n-                if (msg.driver) {\r\n+                if (msg.driver && msg.driver.latitude && msg.driver.longitude) {\r\n                   driverMarker = L.marker([msg.driver.latitude, msg.driver.longitude], {\r\n                     icon: L.icon({\r\n                       iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n-                      iconSize: [30, 30],\r\n+                      iconSize: [40, 40],\r\n+                      iconAnchor: [20, 40],\r\n+                      popupAnchor: [0, -40],\r\n                     })\r\n-                  }).addTo(map).bindTooltip(\"Driver\", { permanent: true, direction: \"top\" });\r\n+                  }).addTo(map)\r\n+                    .bindTooltip(\"🚕 Driver\", {\r\n+                      permanent: true,\r\n+                      direction: \"top\",\r\n+                      className: \"driver-label\"\r\n+                    })\r\n+                    .bringToFront();\r\n                 }\r\n               }\r\n             });\r\n           </script>\r\n-\r\n         </body>\r\n       </html>\r\n     `;\r\n \r\n"
                },
                {
                    "date": 1747557081696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,12 +65,9 @@\n               padding: 0;\r\n               overflow: hidden;\r\n               touch-action: auto;\r\n             }\r\n-            .leaflet-control-zoom {\r\n-              top: 10px !important;\r\n-              left: 10px !important;\r\n-            }\r\n+            .leaflet-control-zoom { top: 10px !important; left: 10px !important; }\r\n             .driver-label {\r\n               font-weight: bold;\r\n               color: red;\r\n               background: white;\r\n@@ -79,8 +76,9 @@\n               font-size: 14px;\r\n             }\r\n           </style>\r\n         </head>\r\n+\r\n         <body>\r\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n           <script>\r\n@@ -124,8 +122,22 @@\n \r\n               window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n             });\r\n \r\n+            map.on('click', function(e) {\r\n+              const { lat, lng } = e.latlng;\r\n+              if (destMarker) map.removeLayer(destMarker);\r\n+              destMarker = L.marker([lat, lng], {\r\n+                icon: L.icon({\r\n+                  iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n+                  iconSize: [30, 30],\r\n+                })\r\n+              }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n+\r\n+              window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n+            });\r\n+\r\n+\r\n             window.addEventListener('message', function (event) {\r\n               const msg = JSON.parse(event.data);\r\n \r\n               if (msg.type === 'setMarkers') {\r\n"
                },
                {
                    "date": 1747557174106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,9 @@\n               overflow: hidden;\r\n               touch-action: auto;\r\n             }\r\n             .leaflet-control-zoom { top: 10px !important; left: 10px !important; }\r\n+\r\n             .driver-label {\r\n               font-weight: bold;\r\n               color: red;\r\n               background: white;\r\n@@ -151,9 +152,9 @@\n                   }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n                 }\r\n \r\n                 if (driverMarker) map.removeLayer(driverMarker);\r\n-                if (msg.driver && msg.driver.latitude && msg.driver.longitude) {\r\n+                if (msg.driver) {\r\n                   driverMarker = L.marker([msg.driver.latitude, msg.driver.longitude], {\r\n                     icon: L.icon({\r\n                       iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n                       iconSize: [40, 40],\r\n"
                },
                {
                    "date": 1747557192019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,20 +66,10 @@\n               overflow: hidden;\r\n               touch-action: auto;\r\n             }\r\n             .leaflet-control-zoom { top: 10px !important; left: 10px !important; }\r\n-\r\n-            .driver-label {\r\n-              font-weight: bold;\r\n-              color: red;\r\n-              background: white;\r\n-              padding: 2px 5px;\r\n-              border-radius: 4px;\r\n-              font-size: 14px;\r\n-            }\r\n           </style>\r\n         </head>\r\n-\r\n         <body>\r\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n           <script>\r\n@@ -103,28 +93,13 @@\n               icon: L.icon({\r\n                 iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png',\r\n                 iconSize: [30, 30],\r\n               })\r\n-            }).addTo(map)\r\n-              .bindTooltip(\"🧍 You\", { permanent: true, direction: \"top\" })\r\n-              .bringToBack();\r\n+            }).addTo(map).bindTooltip(\"You\", { permanent: true, direction: \"top\" });\r\n \r\n             let destMarker = null;\r\n             let driverMarker = null;\r\n \r\n-            map.on('click', function (e) {\r\n-              const { lat, lng } = e.latlng;\r\n-              if (destMarker) map.removeLayer(destMarker);\r\n-              destMarker = L.marker([lat, lng], {\r\n-                icon: L.icon({\r\n-                  iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n-                  iconSize: [30, 30],\r\n-                })\r\n-              }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n-\r\n-              window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n-            });\r\n-\r\n             map.on('click', function(e) {\r\n               const { lat, lng } = e.latlng;\r\n               if (destMarker) map.removeLayer(destMarker);\r\n               destMarker = L.marker([lat, lng], {\r\n@@ -136,10 +111,9 @@\n \r\n               window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n             });\r\n \r\n-\r\n-            window.addEventListener('message', function (event) {\r\n+            window.addEventListener('message', function(event) {\r\n               const msg = JSON.parse(event.data);\r\n \r\n               if (msg.type === 'setMarkers') {\r\n                 if (destMarker) map.removeLayer(destMarker);\r\n@@ -156,23 +130,16 @@\n                 if (msg.driver) {\r\n                   driverMarker = L.marker([msg.driver.latitude, msg.driver.longitude], {\r\n                     icon: L.icon({\r\n                       iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n-                      iconSize: [40, 40],\r\n-                      iconAnchor: [20, 40],\r\n-                      popupAnchor: [0, -40],\r\n+                      iconSize: [30, 30],\r\n                     })\r\n-                  }).addTo(map)\r\n-                    .bindTooltip(\"🚕 Driver\", {\r\n-                      permanent: true,\r\n-                      direction: \"top\",\r\n-                      className: \"driver-label\"\r\n-                    })\r\n-                    .bringToFront();\r\n+                  }).addTo(map).bindTooltip(\"Driver\", { permanent: true, direction: \"top\" });\r\n                 }\r\n               }\r\n             });\r\n           </script>\r\n+\r\n         </body>\r\n       </html>\r\n     `;\r\n \r\n"
                },
                {
                    "date": 1747557224648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,17 @@\n               overflow: hidden;\r\n               touch-action: auto;\r\n             }\r\n             .leaflet-control-zoom { top: 10px !important; left: 10px !important; }\r\n+\r\n+            .driver-label {\r\n+              font-weight: bold;\r\n+              color: red;\r\n+              background: white;\r\n+              padding: 2px 5px;\r\n+              border-radius: 4px;\r\n+              font-size: 14px;\r\n+            }\r\n           </style>\r\n         </head>\r\n         <body>\r\n           <div id=\"map\"></div>\r\n"
                },
                {
                    "date": 1747557279792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,11 +139,16 @@\n                 if (msg.driver) {\r\n                   driverMarker = L.marker([msg.driver.latitude, msg.driver.longitude], {\r\n                     icon: L.icon({\r\n                       iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n-                      iconSize: [30, 30],\r\n+                      iconSize: [40, 40], // Bigger marker\r\n+                      iconAnchor: [20, 40],\r\n+                      popupAnchor: [0, -40],\r\n                     })\r\n-                  }).addTo(map).bindTooltip(\"Driver\", { permanent: true, direction: \"top\" });\r\n+                  })\r\n+                  .addTo(map)\r\n+                  .bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\", className: 'driver-label' })\r\n+                  .bringToFront(); // Always on top\r\n                 }\r\n               }\r\n             });\r\n           </script>\r\n"
                },
                {
                    "date": 1747558007336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,12 +136,20 @@\n                 }\r\n \r\n                 if (driverMarker) map.removeLayer(driverMarker);\r\n                 if (msg.driver) {\r\n+                  const { latitude, longitude } = msg.driver;\r\n+                  L.circle([latitude, longitude], {\r\n+                    color: 'red',\r\n+                    radius: 10,\r\n+                    fillOpacity: 0.9\r\n+                  }).addTo(map);\r\n+\r\n+                  console.log(\"🧭 DEBUG: Driver marker at\", latitude, longitude);\r\n                   driverMarker = L.marker([msg.driver.latitude, msg.driver.longitude], {\r\n                     icon: L.icon({\r\n                       iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n-                      iconSize: [40, 40], // Bigger marker\r\n+                      iconSize: [40, 40],\r\n                       iconAnchor: [20, 40],\r\n                       popupAnchor: [0, -40],\r\n                     })\r\n                   })\r\n"
                },
                {
                    "date": 1747558025787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,8 +144,9 @@\n                     fillOpacity: 0.9\r\n                   }).addTo(map);\r\n \r\n                   console.log(\"🧭 DEBUG: Driver marker at\", latitude, longitude);\r\n+                  \r\n                   driverMarker = L.marker([msg.driver.latitude, msg.driver.longitude], {\r\n                     icon: L.icon({\r\n                       iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n                       iconSize: [40, 40],\r\n"
                },
                {
                    "date": 1747558345186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,8 +81,9 @@\n         <body>\r\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n           <script>\r\n+            window.ReactNativeWebView.postMessage(\"🧭 DEBUG: Driver marker placed\");\r\n             const map = L.map('map', {\r\n               zoomControl: false,\r\n               dragging: true,\r\n               scrollWheelZoom: true,\r\n@@ -144,9 +145,9 @@\n                     fillOpacity: 0.9\r\n                   }).addTo(map);\r\n \r\n                   console.log(\"🧭 DEBUG: Driver marker at\", latitude, longitude);\r\n-                  \r\n+\r\n                   driverMarker = L.marker([msg.driver.latitude, msg.driver.longitude], {\r\n                     icon: L.icon({\r\n                       iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n                       iconSize: [40, 40],\r\n"
                },
                {
                    "date": 1747558377131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,9 @@\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n           <script>\r\n             window.ReactNativeWebView.postMessage(\"🧭 DEBUG: Driver marker placed\");\r\n+\r\n             const map = L.map('map', {\r\n               zoomControl: false,\r\n               dragging: true,\r\n               scrollWheelZoom: true,\r\n"
                },
                {
                    "date": 1747558391179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,10 +81,8 @@\n         <body>\r\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n           <script>\r\n-            window.ReactNativeWebView.postMessage(\"🧭 DEBUG: Driver marker placed\");\r\n-\r\n             const map = L.map('map', {\r\n               zoomControl: false,\r\n               dragging: true,\r\n               scrollWheelZoom: true,\r\n@@ -146,9 +144,9 @@\n                     fillOpacity: 0.9\r\n                   }).addTo(map);\r\n \r\n                   console.log(\"🧭 DEBUG: Driver marker at\", latitude, longitude);\r\n-\r\n+                  \r\n                   driverMarker = L.marker([msg.driver.latitude, msg.driver.longitude], {\r\n                     icon: L.icon({\r\n                       iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n                       iconSize: [40, 40],\r\n"
                },
                {
                    "date": 1747558461695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,8 +168,20 @@\n \r\n     setMapHtml(html);\r\n     }, [location]);\r\n \r\n+    onMessage={(event) => {\r\n+  console.log(\"📥 WebView message:\", event.nativeEvent.data);\r\n+  try {\r\n+    const data = JSON.parse(event.nativeEvent.data);\r\n+    setDestination(data);\r\n+  } catch (e) {\r\n+    // Log any raw debug messages sent\r\n+    console.log(\"📥 Raw WebView msg:\", event.nativeEvent.data);\r\n+  }\r\n+}}\r\n+\r\n+\r\n     useEffect(() => {\r\n     if (!mapRef.current) return;\r\n \r\n     const driverCoords = matchedDriver?.location\r\n"
                },
                {
                    "date": 1747558478673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,20 +168,8 @@\n \r\n     setMapHtml(html);\r\n     }, [location]);\r\n \r\n-    onMessage={(event) => {\r\n-  console.log(\"📥 WebView message:\", event.nativeEvent.data);\r\n-  try {\r\n-    const data = JSON.parse(event.nativeEvent.data);\r\n-    setDestination(data);\r\n-  } catch (e) {\r\n-    // Log any raw debug messages sent\r\n-    console.log(\"📥 Raw WebView msg:\", event.nativeEvent.data);\r\n-  }\r\n-}}\r\n-\r\n-\r\n     useEffect(() => {\r\n     if (!mapRef.current) return;\r\n \r\n     const driverCoords = matchedDriver?.location\r\n"
                },
                {
                    "date": 1747558722082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n                     radius: 10,\r\n                     fillOpacity: 0.9\r\n                   }).addTo(map);\r\n \r\n-                  console.log(\"🧭 DEBUG: Driver marker at\", latitude, longitude);\r\n+                  window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER: \" + latitude + \", \" + longitude);\r\n                   \r\n                   driverMarker = L.marker([msg.driver.latitude, msg.driver.longitude], {\r\n                     icon: L.icon({\r\n                       iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n"
                },
                {
                    "date": 1747558760591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,28 +137,28 @@\n \r\n                 if (driverMarker) map.removeLayer(driverMarker);\r\n                 if (msg.driver) {\r\n                   const { latitude, longitude } = msg.driver;\r\n+\r\n+                  // ✅ Send debug message to Metro log\r\n+                  window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER: \" + latitude + \", \" + longitude);\r\n+\r\n                   L.circle([latitude, longitude], {\r\n                     color: 'red',\r\n                     radius: 10,\r\n                     fillOpacity: 0.9\r\n                   }).addTo(map);\r\n \r\n-                  window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER: \" + latitude + \", \" + longitude);\r\n-                  \r\n-                  driverMarker = L.marker([msg.driver.latitude, msg.driver.longitude], {\r\n+                  driverMarker = L.marker([latitude, longitude], {\r\n                     icon: L.icon({\r\n                       iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n                       iconSize: [40, 40],\r\n                       iconAnchor: [20, 40],\r\n-                      popupAnchor: [0, -40],\r\n                     })\r\n-                  })\r\n-                  .addTo(map)\r\n-                  .bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\", className: 'driver-label' })\r\n-                  .bringToFront(); // Always on top\r\n+                  }).addTo(map).bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\" })\r\n+                    .setZIndexOffset(1000);\r\n                 }\r\n+\r\n               }\r\n             });\r\n           </script>\r\n \r\n"
                },
                {
                    "date": 1747558793385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,8 @@\n                     })\r\n                   }).addTo(map).bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\" })\r\n                     .setZIndexOffset(1000);\r\n                 }\r\n-\r\n               }\r\n             });\r\n           </script>\r\n \r\n@@ -168,8 +167,23 @@\n \r\n     setMapHtml(html);\r\n     }, [location]);\r\n \r\n+    onMessage={(event) => {\r\n+      const msg = event.nativeEvent.data;\r\n+      console.log(\"📥 WebView message:\", msg);\r\n+\r\n+      try {\r\n+        const parsed = JSON.parse(msg);\r\n+        if (parsed.latitude && parsed.longitude) {\r\n+          setDestination(parsed); // location selection\r\n+        }\r\n+      } catch (e) {\r\n+        // It was just a debug string like \"🧭 DRIVER MARKER: ...\"\r\n+      }\r\n+    }}\r\n+\r\n+\r\n     useEffect(() => {\r\n     if (!mapRef.current) return;\r\n \r\n     const driverCoords = matchedDriver?.location\r\n"
                },
                {
                    "date": 1747558871403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n \r\n     setMapHtml(html);\r\n     }, [location]);\r\n \r\n-    onMessage={(event) => {\r\n+    onMessage={(event: any) => {\r\n       const msg = event.nativeEvent.data;\r\n       console.log(\"📥 WebView message:\", msg);\r\n \r\n       try {\r\n"
                },
                {
                    "date": 1747558887705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n import { OSRM_BASE_URL, API_BASE_URL } from \"../../config\";\r\n+import { WebViewMessageEvent } from 'react-native-webview';\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n"
                },
                {
                    "date": 1747558940257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,8 @@\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n import { OSRM_BASE_URL, API_BASE_URL } from \"../../config\";\r\n-import { WebViewMessageEvent } from 'react-native-webview';\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function PHome() {\r\n@@ -167,24 +166,10 @@\n     `;\r\n \r\n     setMapHtml(html);\r\n     }, [location]);\r\n+    \r\n \r\n-    onMessage={(event: any) => {\r\n-      const msg = event.nativeEvent.data;\r\n-      console.log(\"📥 WebView message:\", msg);\r\n-\r\n-      try {\r\n-        const parsed = JSON.parse(msg);\r\n-        if (parsed.latitude && parsed.longitude) {\r\n-          setDestination(parsed); // location selection\r\n-        }\r\n-      } catch (e) {\r\n-        // It was just a debug string like \"🧭 DRIVER MARKER: ...\"\r\n-      }\r\n-    }}\r\n-\r\n-\r\n     useEffect(() => {\r\n     if (!mapRef.current) return;\r\n \r\n     const driverCoords = matchedDriver?.location\r\n"
                },
                {
                    "date": 1747559038064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,23 @@\n               border-radius: 4px;\r\n               font-size: 14px;\r\n             }\r\n           </style>\r\n+\r\n+          onMessage={(event: WebViewMessageEvent) => {\r\n+            const msg = event.nativeEvent.data;\r\n+            console.log(\"📥 WebView message:\", msg);\r\n+\r\n+            try {\r\n+              const parsed = JSON.parse(msg);\r\n+              if (parsed.latitude && parsed.longitude) {\r\n+                setDestination(parsed);\r\n+              }\r\n+            } catch (e) {\r\n+              // message is a raw debug string\r\n+            }\r\n+          }}\r\n+\r\n         </head>\r\n         <body>\r\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n"
                },
                {
                    "date": 1747559060880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,22 +77,8 @@\n               font-size: 14px;\r\n             }\r\n           </style>\r\n \r\n-          onMessage={(event: WebViewMessageEvent) => {\r\n-            const msg = event.nativeEvent.data;\r\n-            console.log(\"📥 WebView message:\", msg);\r\n-\r\n-            try {\r\n-              const parsed = JSON.parse(msg);\r\n-              if (parsed.latitude && parsed.longitude) {\r\n-                setDestination(parsed);\r\n-              }\r\n-            } catch (e) {\r\n-              // message is a raw debug string\r\n-            }\r\n-          }}\r\n-\r\n         </head>\r\n         <body>\r\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n"
                },
                {
                    "date": 1747559076699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,22 @@\n                 }\r\n               }\r\n             });\r\n           </script>\r\n+          onMessage={(event: WebViewMessageEvent) => {\r\n+            const msg = event.nativeEvent.data;\r\n+            console.log(\"📥 WebView message:\", msg);\r\n \r\n+            try {\r\n+              const parsed = JSON.parse(msg);\r\n+              if (parsed.latitude && parsed.longitude) {\r\n+                setDestination(parsed);\r\n+              }\r\n+            } catch (e) {\r\n+              // message is a raw debug string\r\n+            }\r\n+          }}\r\n+\r\n         </body>\r\n       </html>\r\n     `;\r\n \r\n"
                },
                {
                    "date": 1747559208264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,8 @@\n               border-radius: 4px;\r\n               font-size: 14px;\r\n             }\r\n           </style>\r\n-\r\n         </head>\r\n         <body>\r\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n@@ -160,22 +159,9 @@\n                 }\r\n               }\r\n             });\r\n           </script>\r\n-          onMessage={(event: WebViewMessageEvent) => {\r\n-            const msg = event.nativeEvent.data;\r\n-            console.log(\"📥 WebView message:\", msg);\r\n \r\n-            try {\r\n-              const parsed = JSON.parse(msg);\r\n-              if (parsed.latitude && parsed.longitude) {\r\n-                setDestination(parsed);\r\n-              }\r\n-            } catch (e) {\r\n-              // message is a raw debug string\r\n-            }\r\n-          }}\r\n-\r\n         </body>\r\n       </html>\r\n     `;\r\n \r\n@@ -343,9 +329,21 @@\n                 right: 0,\r\n                 bottom: 0,\r\n                 zIndex: 0,\r\n               }}\r\n-              onMessage={(event) => setDestination(JSON.parse(event.nativeEvent.data))}\r\n+              onMessage={(event) => {\r\n+                const msg = event.nativeEvent.data;\r\n+                console.log(\"📥 WebView message:\", msg);\r\n+\r\n+                try {\r\n+                  const parsed = JSON.parse(msg);\r\n+                  if (parsed.latitude && parsed.longitude) {\r\n+                    setDestination(parsed);\r\n+                  }\r\n+                } catch (e) {\r\n+                  // Debug string from inside the WebView like \"🧭 DRIVER MARKER: ...\"\r\n+                }\r\n+              }}\r\n             />\r\n           )}\r\n \r\n           <View style={styles.overlayContainer}>\r\n"
                },
                {
                    "date": 1747559269538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,8 @@\n                 if (driverMarker) map.removeLayer(driverMarker);\r\n                 if (msg.driver) {\r\n                   const { latitude, longitude } = msg.driver;\r\n \r\n-                  // ✅ Send debug message to Metro log\r\n                   window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER: \" + latitude + \", \" + longitude);\r\n \r\n                   L.circle([latitude, longitude], {\r\n                     color: 'red',\r\n"
                },
                {
                    "date": 1747559338337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,8 +329,9 @@\n                 bottom: 0,\r\n                 zIndex: 0,\r\n               }}\r\n               onMessage={(event) => {\r\n+                console.log(\"✅ Received from WebView:\", event.nativeEvent.data);\r\n                 const msg = event.nativeEvent.data;\r\n                 console.log(\"📥 WebView message:\", msg);\r\n \r\n                 try {\r\n"
                },
                {
                    "date": 1747559454133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n                 if (driverMarker) map.removeLayer(driverMarker);\r\n                 if (msg.driver) {\r\n                   const { latitude, longitude } = msg.driver;\r\n \r\n-                  window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER: \" + latitude + \", \" + longitude);\r\n+                  window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER REQUESTED: \" + JSON.stringify(msg.driver));\r\n \r\n                   L.circle([latitude, longitude], {\r\n                     color: 'red',\r\n                     radius: 10,\r\n"
                },
                {
                    "date": 1747560787395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,8 +177,15 @@\n           longitude: matchedDriver.location.longitude,\r\n         }\r\n       : null;\r\n \r\n+    console.log(\"📤 Sending to WebView:\", {\r\n+      type: \"setMarkers\",\r\n+      destination,\r\n+      driver: matchedDriver?.location,\r\n+    });\r\n+\r\n+\r\n     mapRef.current.postMessage(\r\n       JSON.stringify({\r\n         type: \"setMarkers\",\r\n         destination,\r\n"
                },
                {
                    "date": 1747560837901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,8 +122,9 @@\n             });\r\n \r\n             window.addEventListener('message', function(event) {\r\n               const msg = JSON.parse(event.data);\r\n+              window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n \r\n               if (msg.type === 'setMarkers') {\r\n                 if (destMarker) map.removeLayer(destMarker);\r\n                 if (msg.destination) {\r\n"
                },
                {
                    "date": 1747560857162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,8 +123,16 @@\n \r\n             window.addEventListener('message', function(event) {\r\n               const msg = JSON.parse(event.data);\r\n               window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n+              if (msg.type === 'setMarkers') {\r\n+                if (msg.driver) {\r\n+                  const { latitude, longitude } = msg.driver;\r\n+                  window.ReactNativeWebView.postMessage(\"✅ DRIVER FOUND AT: \" + latitude + \", \" + longitude);\r\n+                } else {\r\n+                  window.ReactNativeWebView.postMessage(\"❌ NO DRIVER IN MESSAGE\");\r\n+                }\r\n+              }\r\n \r\n               if (msg.type === 'setMarkers') {\r\n                 if (destMarker) map.removeLayer(destMarker);\r\n                 if (msg.destination) {\r\n"
                },
                {
                    "date": 1747560944800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n             window.addEventListener('message', function(event) {\r\n               const msg = JSON.parse(event.data);\r\n               window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n               if (msg.type === 'setMarkers') {\r\n-                if (msg.driver) {\r\n+                if (msg.destination) {\r\n                   const { latitude, longitude } = msg.driver;\r\n                   window.ReactNativeWebView.postMessage(\"✅ DRIVER FOUND AT: \" + latitude + \", \" + longitude);\r\n                 } else {\r\n                   window.ReactNativeWebView.postMessage(\"❌ NO DRIVER IN MESSAGE\");\r\n"
                },
                {
                    "date": 1747561037414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,16 +311,9 @@\n     interval = setInterval(pollForDriverMatch, 4000);\r\n     return () => clearInterval(interval);\r\n   }, [bookingId]);\r\n \r\n-  useEffect(() => {\r\n-    if (matchedDriver) {\r\n-      console.log(\"🎯 Matched driver name (from state):\", matchedDriver.driverId);\r\n-      console.log(\"🎯 Matched driver name (from state):\", matchedDriver.driverName);\r\n-    }\r\n-  }, [matchedDriver]);\r\n \r\n-\r\n   if (loading || !location) return null;\r\n \r\n   return (\r\n     <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === \"ios\" ? \"padding\" : undefined} keyboardVerticalOffset={keyboardOffset}>\r\n"
                },
                {
                    "date": 1747561056257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -377,9 +377,8 @@\n               {matchedDriver && (\r\n                 <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n                   <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n                   {matchedDriver.selfieImage && (\r\n-                    console.log(\"🖼 Selfie Image URL:\", matchedDriver.selfieImage),\r\n                     <Image\r\n                       source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n                       style={{ width: 80, height: 80, borderRadius: 40, marginVertical: 8 }}\r\n                     />\r\n"
                },
                {
                    "date": 1747561161852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,10 +116,8 @@\n                   iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n                   iconSize: [30, 30],\r\n                 })\r\n               }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n-\r\n-              window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n             });\r\n \r\n             window.addEventListener('message', function(event) {\r\n               const msg = JSON.parse(event.data);\r\n"
                },
                {
                    "date": 1747561351974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,10 @@\n                   iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n                   iconSize: [30, 30],\r\n                 })\r\n               }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n+\r\n+              window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n             });\r\n \r\n             window.addEventListener('message', function(event) {\r\n               const msg = JSON.parse(event.data);\r\n"
                },
                {
                    "date": 1747561400991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n             window.addEventListener('message', function(event) {\r\n               const msg = JSON.parse(event.data);\r\n               window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n               if (msg.type === 'setMarkers') {\r\n-                if (msg.destination) {\r\n+                if (msg.driver) {\r\n                   const { latitude, longitude } = msg.driver;\r\n                   window.ReactNativeWebView.postMessage(\"✅ DRIVER FOUND AT: \" + latitude + \", \" + longitude);\r\n                 } else {\r\n                   window.ReactNativeWebView.postMessage(\"❌ NO DRIVER IN MESSAGE\");\r\n"
                },
                {
                    "date": 1747561467962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,8 +135,9 @@\n \r\n               if (msg.type === 'setMarkers') {\r\n                 if (destMarker) map.removeLayer(destMarker);\r\n                 if (msg.destination) {\r\n+                  window.ReactNativeWebView.postMessage(\"msg destination trigger\");\r\n                   destMarker = L.marker([msg.destination.latitude, msg.destination.longitude], {\r\n                     icon: L.icon({\r\n                       iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n                       iconSize: [30, 30],\r\n"
                },
                {
                    "date": 1747561482012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,8 +146,9 @@\n                 }\r\n \r\n                 if (driverMarker) map.removeLayer(driverMarker);\r\n                 if (msg.driver) {\r\n+                  window.ReactNativeWebView.postMessage(\"msg driver trigger\");\r\n                   const { latitude, longitude } = msg.driver;\r\n \r\n                   window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER REQUESTED: \" + JSON.stringify(msg.driver));\r\n \r\n"
                },
                {
                    "date": 1747561788841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,56 +120,55 @@\n \r\n               window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n             });\r\n \r\n-            window.addEventListener('message', function(event) {\r\n-              const msg = JSON.parse(event.data);\r\n-              window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n-              if (msg.type === 'setMarkers') {\r\n-                if (msg.driver) {\r\n-                  const { latitude, longitude } = msg.driver;\r\n-                  window.ReactNativeWebView.postMessage(\"✅ DRIVER FOUND AT: \" + latitude + \", \" + longitude);\r\n-                } else {\r\n-                  window.ReactNativeWebView.postMessage(\"❌ NO DRIVER IN MESSAGE\");\r\n-                }\r\n-              }\r\n+            setTimeout(() => {\r\n+              window.addEventListener('message', function(event) {\r\n+                const msg = JSON.parse(event.data);\r\n+                window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n \r\n-              if (msg.type === 'setMarkers') {\r\n-                if (destMarker) map.removeLayer(destMarker);\r\n-                if (msg.destination) {\r\n-                  window.ReactNativeWebView.postMessage(\"msg destination trigger\");\r\n-                  destMarker = L.marker([msg.destination.latitude, msg.destination.longitude], {\r\n-                    icon: L.icon({\r\n-                      iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n-                      iconSize: [30, 30],\r\n-                    })\r\n-                  }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n-                }\r\n+                if (msg.type === 'setMarkers') {\r\n+                  if (msg.driver) {\r\n+                    const { latitude, longitude } = msg.driver;\r\n+                    window.ReactNativeWebView.postMessage(\"✅ DRIVER FOUND AT: \" + latitude + \", \" + longitude);\r\n+                  } else {\r\n+                    window.ReactNativeWebView.postMessage(\"❌ NO DRIVER IN MESSAGE\");\r\n+                  }\r\n \r\n-                if (driverMarker) map.removeLayer(driverMarker);\r\n-                if (msg.driver) {\r\n-                  window.ReactNativeWebView.postMessage(\"msg driver trigger\");\r\n-                  const { latitude, longitude } = msg.driver;\r\n+                  if (destMarker) map.removeLayer(destMarker);\r\n+                  if (msg.destination) {\r\n+                    destMarker = L.marker([msg.destination.latitude, msg.destination.longitude], {\r\n+                      icon: L.icon({\r\n+                        iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n+                        iconSize: [30, 30],\r\n+                      })\r\n+                    }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n+                  }\r\n \r\n-                  window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER REQUESTED: \" + JSON.stringify(msg.driver));\r\n+                  if (driverMarker) map.removeLayer(driverMarker);\r\n+                  if (msg.driver) {\r\n+                    const { latitude, longitude } = msg.driver;\r\n+                    window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER REQUESTED: \" + JSON.stringify(msg.driver));\r\n \r\n-                  L.circle([latitude, longitude], {\r\n-                    color: 'red',\r\n-                    radius: 10,\r\n-                    fillOpacity: 0.9\r\n-                  }).addTo(map);\r\n+                    L.circle([latitude, longitude], {\r\n+                      color: 'red',\r\n+                      radius: 10,\r\n+                      fillOpacity: 0.9\r\n+                    }).addTo(map);\r\n \r\n-                  driverMarker = L.marker([latitude, longitude], {\r\n-                    icon: L.icon({\r\n-                      iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n-                      iconSize: [40, 40],\r\n-                      iconAnchor: [20, 40],\r\n-                    })\r\n-                  }).addTo(map).bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\" })\r\n-                    .setZIndexOffset(1000);\r\n+                    driverMarker = L.marker([latitude, longitude], {\r\n+                      icon: L.icon({\r\n+                        iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n+                        iconSize: [40, 40],\r\n+                        iconAnchor: [20, 40],\r\n+                      })\r\n+                    }).addTo(map).bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\" })\r\n+                      .setZIndexOffset(1000);\r\n+                  }\r\n                 }\r\n-              }\r\n-            });\r\n+              });\r\n+            }, 100); // wait 100ms for WebView to attach\r\n+\r\n           </script>\r\n \r\n         </body>\r\n       </html>\r\n"
                },
                {
                    "date": 1747570043892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,9 @@\n                       .setZIndexOffset(1000);\r\n                   }\r\n                 }\r\n               });\r\n-            }, 100); // wait 100ms for WebView to attach\r\n+            }, 1000); \r\n \r\n           </script>\r\n \r\n         </body>\r\n"
                },
                {
                    "date": 1747570529676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,94 +81,95 @@\n         <body>\r\n           <div id=\"map\"></div>\r\n           <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n           <script>\r\n-            const map = L.map('map', {\r\n-              zoomControl: false,\r\n-              dragging: true,\r\n-              scrollWheelZoom: true,\r\n-              touchZoom: true,\r\n-              doubleClickZoom: true,\r\n-              boxZoom: true,\r\n-            }).setView([${location.latitude}, ${location.longitude}], 15);\r\n+            window.onload = function () {\r\n+              const map = L.map('map', {\r\n+                zoomControl: false,\r\n+                dragging: true,\r\n+                scrollWheelZoom: true,\r\n+                touchZoom: true,\r\n+                doubleClickZoom: true,\r\n+                boxZoom: true,\r\n+              }).setView([${location.latitude}, ${location.longitude}], 15);\r\n \r\n-            L.control.zoom({ position: 'topleft' }).addTo(map);\r\n+              L.control.zoom({ position: 'topleft' }).addTo(map);\r\n \r\n-            L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n-              maxZoom: 19,\r\n-              attribution: '© OpenStreetMap contributors'\r\n-            }).addTo(map);\r\n+              L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n+                maxZoom: 19,\r\n+                attribution: '© OpenStreetMap contributors'\r\n+              }).addTo(map);\r\n \r\n-            const currentMarker = L.marker([${location.latitude}, ${location.longitude}], {\r\n-              icon: L.icon({\r\n-                iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png',\r\n-                iconSize: [30, 30],\r\n-              })\r\n-            }).addTo(map).bindTooltip(\"You\", { permanent: true, direction: \"top\" });\r\n-\r\n-            let destMarker = null;\r\n-            let driverMarker = null;\r\n-\r\n-            map.on('click', function(e) {\r\n-              const { lat, lng } = e.latlng;\r\n-              if (destMarker) map.removeLayer(destMarker);\r\n-              destMarker = L.marker([lat, lng], {\r\n+              const currentMarker = L.marker([${location.latitude}, ${location.longitude}], {\r\n                 icon: L.icon({\r\n-                  iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n+                  iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png',\r\n                   iconSize: [30, 30],\r\n                 })\r\n-              }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n+              }).addTo(map).bindTooltip(\"You\", { permanent: true, direction: \"top\" });\r\n \r\n-              window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n-            });\r\n+              let destMarker = null;\r\n+              let driverMarker = null;\r\n \r\n-            setTimeout(() => {\r\n-              window.addEventListener('message', function(event) {\r\n-                const msg = JSON.parse(event.data);\r\n-                window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n+              map.on('click', function(e) {\r\n+                const { lat, lng } = e.latlng;\r\n+                if (destMarker) map.removeLayer(destMarker);\r\n+                destMarker = L.marker([lat, lng], {\r\n+                  icon: L.icon({\r\n+                    iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n+                    iconSize: [30, 30],\r\n+                  })\r\n+                }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n \r\n-                if (msg.type === 'setMarkers') {\r\n-                  if (msg.driver) {\r\n-                    const { latitude, longitude } = msg.driver;\r\n-                    window.ReactNativeWebView.postMessage(\"✅ DRIVER FOUND AT: \" + latitude + \", \" + longitude);\r\n-                  } else {\r\n-                    window.ReactNativeWebView.postMessage(\"❌ NO DRIVER IN MESSAGE\");\r\n-                  }\r\n+                window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n+              });\r\n \r\n-                  if (destMarker) map.removeLayer(destMarker);\r\n-                  if (msg.destination) {\r\n-                    destMarker = L.marker([msg.destination.latitude, msg.destination.longitude], {\r\n-                      icon: L.icon({\r\n-                        iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n-                        iconSize: [30, 30],\r\n-                      })\r\n-                    }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n-                  }\r\n+              setTimeout(() => {\r\n+                window.addEventListener('message', function(event) {\r\n+                  const msg = JSON.parse(event.data);\r\n+                  window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n \r\n-                  if (driverMarker) map.removeLayer(driverMarker);\r\n-                  if (msg.driver) {\r\n-                    const { latitude, longitude } = msg.driver;\r\n-                    window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER REQUESTED: \" + JSON.stringify(msg.driver));\r\n+                  if (msg.type === 'setMarkers') {\r\n+                    if (msg.driver) {\r\n+                      const { latitude, longitude } = msg.driver;\r\n+                      window.ReactNativeWebView.postMessage(\"✅ DRIVER FOUND AT: \" + latitude + \", \" + longitude);\r\n+                    } else {\r\n+                      window.ReactNativeWebView.postMessage(\"❌ NO DRIVER IN MESSAGE\");\r\n+                    }\r\n \r\n-                    L.circle([latitude, longitude], {\r\n-                      color: 'red',\r\n-                      radius: 10,\r\n-                      fillOpacity: 0.9\r\n-                    }).addTo(map);\r\n+                    if (destMarker) map.removeLayer(destMarker);\r\n+                    if (msg.destination) {\r\n+                      destMarker = L.marker([msg.destination.latitude, msg.destination.longitude], {\r\n+                        icon: L.icon({\r\n+                          iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n+                          iconSize: [30, 30],\r\n+                        })\r\n+                      }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n+                    }\r\n \r\n-                    driverMarker = L.marker([latitude, longitude], {\r\n-                      icon: L.icon({\r\n-                        iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n-                        iconSize: [40, 40],\r\n-                        iconAnchor: [20, 40],\r\n-                      })\r\n-                    }).addTo(map).bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\" })\r\n-                      .setZIndexOffset(1000);\r\n+                    if (driverMarker) map.removeLayer(driverMarker);\r\n+                    if (msg.driver) {\r\n+                      const { latitude, longitude } = msg.driver;\r\n+                      window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER REQUESTED: \" + JSON.stringify(msg.driver));\r\n+\r\n+                      L.circle([latitude, longitude], {\r\n+                        color: 'red',\r\n+                        radius: 10,\r\n+                        fillOpacity: 0.9\r\n+                      }).addTo(map);\r\n+\r\n+                      driverMarker = L.marker([latitude, longitude], {\r\n+                        icon: L.icon({\r\n+                          iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n+                          iconSize: [40, 40],\r\n+                          iconAnchor: [20, 40],\r\n+                        })\r\n+                      }).addTo(map).bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\" })\r\n+                        .setZIndexOffset(1000);\r\n+                    }\r\n                   }\r\n-                }\r\n-              });\r\n-            }, 1000); \r\n-\r\n+                });\r\n+              }, 1000); \r\n+            }\r\n           </script>\r\n \r\n         </body>\r\n       </html>\r\n"
                },
                {
                    "date": 1747581431746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n                 window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n               });\r\n \r\n               setTimeout(() => {\r\n-                window.addEventListener('message', function(event) {\r\n+                document.addEventListener('message', function(event) {\r\n                   const msg = JSON.parse(event.data);\r\n                   window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n \r\n                   if (msg.type === 'setMarkers') {\r\n"
                },
                {
                    "date": 1747581494563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,55 +120,52 @@\n                 }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n \r\n                 window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n               });\r\n+              document.addEventListener('message', function(event) {\r\n+                const msg = JSON.parse(event.data);\r\n+                window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n \r\n-              setTimeout(() => {\r\n-                document.addEventListener('message', function(event) {\r\n-                  const msg = JSON.parse(event.data);\r\n-                  window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n+                if (msg.type === 'setMarkers') {\r\n+                  if (msg.driver) {\r\n+                    const { latitude, longitude } = msg.driver;\r\n+                    window.ReactNativeWebView.postMessage(\"✅ DRIVER FOUND AT: \" + latitude + \", \" + longitude);\r\n+                  } else {\r\n+                    window.ReactNativeWebView.postMessage(\"❌ NO DRIVER IN MESSAGE\");\r\n+                  }\r\n \r\n-                  if (msg.type === 'setMarkers') {\r\n-                    if (msg.driver) {\r\n-                      const { latitude, longitude } = msg.driver;\r\n-                      window.ReactNativeWebView.postMessage(\"✅ DRIVER FOUND AT: \" + latitude + \", \" + longitude);\r\n-                    } else {\r\n-                      window.ReactNativeWebView.postMessage(\"❌ NO DRIVER IN MESSAGE\");\r\n-                    }\r\n+                  if (destMarker) map.removeLayer(destMarker);\r\n+                  if (msg.destination) {\r\n+                    destMarker = L.marker([msg.destination.latitude, msg.destination.longitude], {\r\n+                      icon: L.icon({\r\n+                        iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n+                        iconSize: [30, 30],\r\n+                      })\r\n+                    }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n+                  }\r\n \r\n-                    if (destMarker) map.removeLayer(destMarker);\r\n-                    if (msg.destination) {\r\n-                      destMarker = L.marker([msg.destination.latitude, msg.destination.longitude], {\r\n-                        icon: L.icon({\r\n-                          iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n-                          iconSize: [30, 30],\r\n-                        })\r\n-                      }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n-                    }\r\n+                  if (driverMarker) map.removeLayer(driverMarker);\r\n+                  if (msg.driver) {\r\n+                    const { latitude, longitude } = msg.driver;\r\n+                    window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER REQUESTED: \" + JSON.stringify(msg.driver));\r\n \r\n-                    if (driverMarker) map.removeLayer(driverMarker);\r\n-                    if (msg.driver) {\r\n-                      const { latitude, longitude } = msg.driver;\r\n-                      window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER REQUESTED: \" + JSON.stringify(msg.driver));\r\n+                    L.circle([latitude, longitude], {\r\n+                      color: 'red',\r\n+                      radius: 10,\r\n+                      fillOpacity: 0.9\r\n+                    }).addTo(map);\r\n \r\n-                      L.circle([latitude, longitude], {\r\n-                        color: 'red',\r\n-                        radius: 10,\r\n-                        fillOpacity: 0.9\r\n-                      }).addTo(map);\r\n-\r\n-                      driverMarker = L.marker([latitude, longitude], {\r\n-                        icon: L.icon({\r\n-                          iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n-                          iconSize: [40, 40],\r\n-                          iconAnchor: [20, 40],\r\n-                        })\r\n-                      }).addTo(map).bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\" })\r\n-                        .setZIndexOffset(1000);\r\n-                    }\r\n+                    driverMarker = L.marker([latitude, longitude], {\r\n+                      icon: L.icon({\r\n+                        iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n+                        iconSize: [40, 40],\r\n+                        iconAnchor: [20, 40],\r\n+                      })\r\n+                    }).addTo(map).bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\" })\r\n+                      .setZIndexOffset(1000);\r\n                   }\r\n-                });\r\n-              }, 1000); \r\n+                }\r\n+              });\r\n             }\r\n           </script>\r\n \r\n         </body>\r\n"
                },
                {
                    "date": 1747582188321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n                     }).addTo(map);\r\n \r\n                     driverMarker = L.marker([latitude, longitude], {\r\n                       icon: L.icon({\r\n-                        iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n+                        iconUrl: 'https://cdn-icons-png.flaticon.com/512/2972/2972185.png', // 🛺 yellow tricycle/taxi icon\r\n                         iconSize: [40, 40],\r\n                         iconAnchor: [20, 40],\r\n                       })\r\n                     }).addTo(map).bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\" })\r\n"
                },
                {
                    "date": 1747582321681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,13 @@\n \r\n               let destMarker = null;\r\n               let driverMarker = null;\r\n \r\n+              let destinationLocked = false;\r\n+\r\n               map.on('click', function(e) {\r\n+                if (destinationLocked) return;\r\n+\r\n                 const { lat, lng } = e.latlng;\r\n                 if (destMarker) map.removeLayer(destMarker);\r\n                 destMarker = L.marker([lat, lng], {\r\n                   icon: L.icon({\r\n@@ -155,9 +159,9 @@\n                     }).addTo(map);\r\n \r\n                     driverMarker = L.marker([latitude, longitude], {\r\n                       icon: L.icon({\r\n-                        iconUrl: 'https://cdn-icons-png.flaticon.com/512/2972/2972185.png', // 🛺 yellow tricycle/taxi icon\r\n+                        iconUrl: 'https://cdn-icons-png.flaticon.com/512/2972/2972185.png', \r\n                         iconSize: [40, 40],\r\n                         iconAnchor: [20, 40],\r\n                       })\r\n                     }).addTo(map).bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\" })\r\n"
                },
                {
                    "date": 1747582367856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,8 @@\n               let destMarker = null;\r\n               let driverMarker = null;\r\n \r\n               let destinationLocked = false;\r\n-\r\n               map.on('click', function(e) {\r\n                 if (destinationLocked) return;\r\n \r\n                 const { lat, lng } = e.latlng;\r\n@@ -129,8 +128,9 @@\n                 const msg = JSON.parse(event.data);\r\n                 window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n \r\n                 if (msg.type === 'setMarkers') {\r\n+                  destinationLocked = !!msg.driver;\r\n                   if (msg.driver) {\r\n                     const { latitude, longitude } = msg.driver;\r\n                     window.ReactNativeWebView.postMessage(\"✅ DRIVER FOUND AT: \" + latitude + \", \" + longitude);\r\n                   } else {\r\n"
                },
                {
                    "date": 1747582419346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -393,8 +393,9 @@\n                     onPress={() => {\r\n                       setMatchedDriver(null);\r\n                       setBookingId(null);\r\n                       setSearching(false);\r\n+                      setDestination(null);\r\n                       if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n                     }}\r\n                     style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n                   >\r\n"
                },
                {
                    "date": 1747656134594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,17 @@\n   KeyboardAvoidingView,\r\n   Platform,\r\n   TouchableWithoutFeedback,\r\n   Keyboard,\r\n-  Image\r\n+  Image,\r\n+  BackHandler\r\n } from \"react-native\";\r\n import { WebView } from \"react-native-webview\";\r\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n+import { router } from 'expo-router'; // or useNavigation if you're using react-navigation\r\n+import AsyncStorage from '@react-native-async-storage/async-storage';\r\n import { OSRM_BASE_URL, API_BASE_URL } from \"../../config\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n"
                },
                {
                    "date": 1747656200081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,37 @@\n   const [showBookingForm, setShowBookingForm] = useState(false); \r\n   const [searching, setSearching] = useState(false);\r\n   const searchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n \r\n+  useEffect(() => {\r\n+    const backAction = () => {\r\n+      Alert.alert(\"Logout Confirmation\", \"Do you want to log out?\", [\r\n+        {\r\n+          text: \"Cancel\",\r\n+          onPress: () => null,\r\n+          style: \"cancel\"\r\n+        },\r\n+        {\r\n+          text: \"Logout\",\r\n+          onPress: async () => {\r\n+            await AsyncStorage.removeItem(\"passengerId\");\r\n+            router.replace(\"/login_and_reg/plogin\"); // or whatever your login screen is\r\n+          }\r\n+        }\r\n+      ]);\r\n+      return true; // prevent default back action\r\n+    };\r\n \r\n+    const backHandler = BackHandler.addEventListener(\r\n+      \"hardwareBackPress\",\r\n+      backAction\r\n+    );\r\n \r\n+    return () => backHandler.remove(); // clean up on unmount\r\n+  }, []);\r\n \r\n+\r\n+\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n"
                },
                {
                    "date": 1747656238187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,21 +60,16 @@\n         {\r\n           text: \"Logout\",\r\n           onPress: async () => {\r\n             await AsyncStorage.removeItem(\"passengerId\");\r\n-            router.replace(\"/login_and_reg/plogin\"); // or whatever your login screen is\r\n+            router.replace(\"/login_and_reg/plogin\"); \r\n           }\r\n         }\r\n       ]);\r\n-      return true; // prevent default back action\r\n+      return true; \r\n     };\r\n \r\n-    const backHandler = BackHandler.addEventListener(\r\n-      \"hardwareBackPress\",\r\n-      backAction\r\n-    );\r\n-\r\n-    return () => backHandler.remove(); // clean up on unmount\r\n+    ?\r\n   }, []);\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1747656256081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,13 @@\n       ]);\r\n       return true; \r\n     };\r\n \r\n-    ?\r\n+    const backHandler = BackHandler.addEventListener(\r\n+      \"hardwareBackPress\",\r\n+      backAction\r\n+    );\r\n+    return () => backHandler.remove();\r\n   }, []);\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1747657507617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,9 @@\n   const [bookingId, setBookingId] = useState(null);\r\n   const [showBookingForm, setShowBookingForm] = useState(false); \r\n   const [searching, setSearching] = useState(false);\r\n   const searchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n+  \r\n \r\n   useEffect(() => {\r\n     const backAction = () => {\r\n       Alert.alert(\"Logout Confirmation\", \"Do you want to log out?\", [\r\n@@ -238,8 +239,9 @@\n     if (!location || !destination) {\r\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n     }\r\n+    const passengerId = await AsyncStorage.getItem(\"passengerId\");\r\n \r\n     const bookingData = {\r\n       pickupLat: location.latitude,\r\n       pickupLng: location.longitude,\r\n"
                },
                {
                    "date": 1747657537224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,8 +250,9 @@\n       fare,\r\n       paymentMethod,\r\n       notes,\r\n       passengerName: \"Anonymous\",\r\n+      passengerId\r\n     };\r\n \r\n     try {\r\n       setShowBookingForm(false); // hide form\r\n"
                },
                {
                    "date": 1747657588905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,8 @@\n       destinationLng: destination.longitude,\r\n       fare,\r\n       paymentMethod,\r\n       notes,\r\n-      passengerName: \"Anonymous\",\r\n       passengerId\r\n     };\r\n \r\n     try {\r\n"
                },
                {
                    "date": 1747670172383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,501 @@\n+import React, { useState, useEffect, useRef } from \"react\";\r\n+import {\r\n+  View,\r\n+  Text,\r\n+  StyleSheet,\r\n+  Dimensions,\r\n+  TouchableOpacity,\r\n+  StatusBar,\r\n+  TextInput,\r\n+  Alert,\r\n+  KeyboardAvoidingView,\r\n+  Platform,\r\n+  TouchableWithoutFeedback,\r\n+  Keyboard,\r\n+  Image,\r\n+  BackHandler\r\n+} from \"react-native\";\r\n+import { WebView } from \"react-native-webview\";\r\n+import type { WebView as WebViewType } from \"react-native-webview\";\r\n+import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n+import { useLocation } from \"../location/GlobalLocation\";\r\n+import { router } from 'expo-router'; // or useNavigation if you're using react-navigation\r\n+import AsyncStorage from '@react-native-async-storage/async-storage';\r\n+import { OSRM_BASE_URL, API_BASE_URL } from \"../../config\";\r\n+\r\n+const { width, height } = Dimensions.get(\"window\");\r\n+\r\n+\r\n+export default function PHome() {\r\n+  const { location, loading } = useLocation();\r\n+  const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n+  const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n+  const [notes, setNotes] = useState(\"\");\r\n+  const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n+  const [fare, setFare] = useState(20);\r\n+  const [mapHtml, setMapHtml] = useState(\"\");\r\n+  const mapRef = useRef<WebViewType>(null);\r\n+  const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n+  const [matchedDriver, setMatchedDriver] = useState<{\r\n+    driverName: string;\r\n+    driverId: string;\r\n+    franchiseNumber: string;\r\n+    experienceYears: string;\r\n+    selfieImage: string;\r\n+    location: { latitude: number; longitude: number }; \r\n+  } | null>(null);\r\n+\r\n+  const [bookingId, setBookingId] = useState(null);\r\n+  const [showBookingForm, setShowBookingForm] = useState(false); \r\n+  const [searching, setSearching] = useState(false);\r\n+  const searchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n+  \r\n+  \r\n+\r\n+  useEffect(() => {\r\n+    const backAction = () => {\r\n+      Alert.alert(\"Logout Confirmation\", \"Do you want to log out?\", [\r\n+        {\r\n+          text: \"Cancel\",\r\n+          onPress: () => null,\r\n+          style: \"cancel\"\r\n+        },\r\n+        {\r\n+          text: \"Logout\",\r\n+          onPress: async () => {\r\n+            await AsyncStorage.removeItem(\"passengerId\");\r\n+            router.replace(\"/login_and_reg/plogin\"); \r\n+          }\r\n+        }\r\n+      ]);\r\n+      return true; \r\n+    };\r\n+\r\n+    const backHandler = BackHandler.addEventListener(\r\n+      \"hardwareBackPress\",\r\n+      backAction\r\n+    );\r\n+    return () => backHandler.remove();\r\n+  }, []);\r\n+\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    if (!location) return;\r\n+\r\n+    const html = `\r\n+      <!DOCTYPE html>\r\n+      <html>\r\n+        <head>\r\n+          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n+          <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n+          <style>\r\n+            html, body, #map {\r\n+              height: 100%;\r\n+              margin: 0;\r\n+              padding: 0;\r\n+              overflow: hidden;\r\n+              touch-action: auto;\r\n+            }\r\n+            .leaflet-control-zoom { top: 10px !important; left: 10px !important; }\r\n+\r\n+            .driver-label {\r\n+              font-weight: bold;\r\n+              color: red;\r\n+              background: white;\r\n+              padding: 2px 5px;\r\n+              border-radius: 4px;\r\n+              font-size: 14px;\r\n+            }\r\n+          </style>\r\n+        </head>\r\n+        <body>\r\n+          <div id=\"map\"></div>\r\n+          <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n+          <script>\r\n+            window.onload = function () {\r\n+              const map = L.map('map', {\r\n+                zoomControl: false,\r\n+                dragging: true,\r\n+                scrollWheelZoom: true,\r\n+                touchZoom: true,\r\n+                doubleClickZoom: true,\r\n+                boxZoom: true,\r\n+              }).setView([${location.latitude}, ${location.longitude}], 15);\r\n+\r\n+              L.control.zoom({ position: 'topleft' }).addTo(map);\r\n+\r\n+              L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n+                maxZoom: 19,\r\n+                attribution: '© OpenStreetMap contributors'\r\n+              }).addTo(map);\r\n+\r\n+              const currentMarker = L.marker([${location.latitude}, ${location.longitude}], {\r\n+                icon: L.icon({\r\n+                  iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png',\r\n+                  iconSize: [30, 30],\r\n+                })\r\n+              }).addTo(map).bindTooltip(\"You\", { permanent: true, direction: \"top\" });\r\n+\r\n+              let destMarker = null;\r\n+              let driverMarker = null;\r\n+\r\n+              let destinationLocked = false;\r\n+              map.on('click', function(e) {\r\n+                if (destinationLocked) return;\r\n+\r\n+                const { lat, lng } = e.latlng;\r\n+                if (destMarker) map.removeLayer(destMarker);\r\n+                destMarker = L.marker([lat, lng], {\r\n+                  icon: L.icon({\r\n+                    iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n+                    iconSize: [30, 30],\r\n+                  })\r\n+                }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n+\r\n+                window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n+              });\r\n+              document.addEventListener('message', function(event) {\r\n+                const msg = JSON.parse(event.data);\r\n+                window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n+\r\n+                if (msg.type === 'setMarkers') {\r\n+                  destinationLocked = !!msg.driver;\r\n+                  if (msg.driver) {\r\n+                    const { latitude, longitude } = msg.driver;\r\n+                    window.ReactNativeWebView.postMessage(\"✅ DRIVER FOUND AT: \" + latitude + \", \" + longitude);\r\n+                  } else {\r\n+                    window.ReactNativeWebView.postMessage(\"❌ NO DRIVER IN MESSAGE\");\r\n+                  }\r\n+\r\n+                  if (destMarker) map.removeLayer(destMarker);\r\n+                  if (msg.destination) {\r\n+                    destMarker = L.marker([msg.destination.latitude, msg.destination.longitude], {\r\n+                      icon: L.icon({\r\n+                        iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n+                        iconSize: [30, 30],\r\n+                      })\r\n+                    }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n+                  }\r\n+\r\n+                  if (driverMarker) map.removeLayer(driverMarker);\r\n+                  if (msg.driver) {\r\n+                    const { latitude, longitude } = msg.driver;\r\n+                    window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER REQUESTED: \" + JSON.stringify(msg.driver));\r\n+\r\n+                    L.circle([latitude, longitude], {\r\n+                      color: 'red',\r\n+                      radius: 10,\r\n+                      fillOpacity: 0.9\r\n+                    }).addTo(map);\r\n+\r\n+                    driverMarker = L.marker([latitude, longitude], {\r\n+                      icon: L.icon({\r\n+                        iconUrl: 'https://cdn-icons-png.flaticon.com/512/2972/2972185.png', \r\n+                        iconSize: [40, 40],\r\n+                        iconAnchor: [20, 40],\r\n+                      })\r\n+                    }).addTo(map).bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\" })\r\n+                      .setZIndexOffset(1000);\r\n+                  }\r\n+                }\r\n+              });\r\n+            }\r\n+          </script>\r\n+\r\n+        </body>\r\n+      </html>\r\n+    `;\r\n+\r\n+    setMapHtml(html);\r\n+    }, [location]);\r\n+    \r\n+\r\n+    useEffect(() => {\r\n+    if (!mapRef.current) return;\r\n+\r\n+    const driverCoords = matchedDriver?.location\r\n+      ? {\r\n+          latitude: matchedDriver.location.latitude,\r\n+          longitude: matchedDriver.location.longitude,\r\n+        }\r\n+      : null;\r\n+\r\n+    console.log(\"📤 Sending to WebView:\", {\r\n+      type: \"setMarkers\",\r\n+      destination,\r\n+      driver: matchedDriver?.location,\r\n+    });\r\n+\r\n+\r\n+    mapRef.current.postMessage(\r\n+      JSON.stringify({\r\n+        type: \"setMarkers\",\r\n+        destination,\r\n+        driver: driverCoords,\r\n+      })\r\n+    );\r\n+  }, [destination, matchedDriver]);\r\n+\r\n+  const handleBookNow = async () => {\r\n+    if (!location || !destination) {\r\n+      Alert.alert(\"Missing location info\");\r\n+      return;\r\n+    }\r\n+    const passengerId = await AsyncStorage.getItem(\"passengerId\");\r\n+\r\n+    const bookingData = {\r\n+      pickupLat: location.latitude,\r\n+      pickupLng: location.longitude,\r\n+      destinationLat: destination.latitude,\r\n+      destinationLng: destination.longitude,\r\n+      fare,\r\n+      paymentMethod,\r\n+      notes,\r\n+      passengerId\r\n+    };\r\n+\r\n+    try {\r\n+      setShowBookingForm(false); // hide form\r\n+      setSearching(true);        // show searching state\r\n+\r\n+      const response = await fetch(`${API_BASE_URL}/api/book`, {\r\n+        method: \"POST\",\r\n+        headers: { \"Content-Type\": \"application/json\" },\r\n+        body: JSON.stringify(bookingData),\r\n+      });\r\n+\r\n+      const result = await response.json();\r\n+      if (!response.ok) throw new Error(result.message || \"Something went wrong\");\r\n+\r\n+      setBookingId(result.booking.id);\r\n+\r\n+      // Start polling for driver for up to 10 minutes\r\n+      const maxWaitTime = 10 * 60 * 1000; // 10 minutes\r\n+      const startTime = Date.now();\r\n+\r\n+      const poll = async () => {\r\n+        try {\r\n+          const [driverRes, statusRes] = await Promise.all([\r\n+            fetch(`${API_BASE_URL}/api/driver/${result.booking.driverId}`),\r\n+            fetch(`${API_BASE_URL}/api/driver-status/${result.booking.driverId}`)\r\n+          ]);\r\n+\r\n+          const driverData = await driverRes.json();\r\n+          const statusData = await statusRes.json();\r\n+\r\n+          if (driverData?.driver) {\r\n+            setMatchedDriver({\r\n+              driverName: driverData.driver.driverName,\r\n+              driverId: driverData.driver._id,\r\n+              franchiseNumber: driverData.driver.franchiseNumber || \"N/A\",\r\n+              experienceYears: driverData.driver.experienceYears || \"N/A\",\r\n+              selfieImage: driverData.driver.selfieImage || \"N/A\",\r\n+              location: statusData.location || null, // Live GPS\r\n+            });\r\n+\r\n+            setSearching(false);\r\n+            return;\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(\"⏳ Still waiting for driver...\");\r\n+        }\r\n+\r\n+        if (Date.now() - startTime < maxWaitTime) {\r\n+          searchTimeoutRef.current = setTimeout(poll, 5000); // try again in 5 sec\r\n+        } else {\r\n+          setSearching(false); // stop searching silently\r\n+          console.log(\"❌ No driver found within 10 minutes.\");\r\n+        }\r\n+      };\r\n+\r\n+      poll(); // start polling\r\n+    } catch (error) {\r\n+      console.error(\"❌ Booking error:\", error);\r\n+      Alert.alert(\"Error\", \"Failed to send booking. Please try again.\");\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => setKeyboardOffset(-35));\r\n+    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => setKeyboardOffset(0));\r\n+    return () => {\r\n+      showSub.remove();\r\n+      hideSub.remove();\r\n+    };\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    let interval;\r\n+    const pollForDriverMatch = async () => {\r\n+      if (!bookingId) return;\r\n+      try {\r\n+        const res = await fetch(`${API_BASE_URL}/api/bookings`);\r\n+        const allBookings = await res.json();\r\n+        const myBooking = allBookings.find((b: any) => b && b.id === bookingId);\r\n+        if (myBooking && myBooking.status === \"accepted\" && !myBooking.passengerConfirmed) {\r\n+          setMatchedDriver(myBooking);\r\n+        }\r\n+      } catch (err) {\r\n+        console.error(\"❌ Poll error:\", err);\r\n+      }\r\n+    };\r\n+    interval = setInterval(pollForDriverMatch, 4000);\r\n+    return () => clearInterval(interval);\r\n+  }, [bookingId]);\r\n+\r\n+\r\n+  if (loading || !location) return null;\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === \"ios\" ? \"padding\" : undefined} keyboardVerticalOffset={keyboardOffset}>\r\n+      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n+        <View style={styles.container}>\r\n+          <StatusBar barStyle=\"light-content\" translucent backgroundColor=\"black\" />\r\n+          {mapHtml && (\r\n+            <WebView\r\n+              ref={(ref) => {\r\n+                if (ref && !mapRef.current) {\r\n+                  mapRef.current = ref;\r\n+                }\r\n+              }}\r\n+              originWhitelist={[\"*\"]}\r\n+              source={{ html: mapHtml }}\r\n+              javaScriptEnabled={true}\r\n+              style={{\r\n+                position: \"absolute\",\r\n+                top: 0,\r\n+                left: 0,\r\n+                right: 0,\r\n+                bottom: 0,\r\n+                zIndex: 0,\r\n+              }}\r\n+              onMessage={(event) => {\r\n+                console.log(\"✅ Received from WebView:\", event.nativeEvent.data);\r\n+                const msg = event.nativeEvent.data;\r\n+                console.log(\"📥 WebView message:\", msg);\r\n+\r\n+                try {\r\n+                  const parsed = JSON.parse(msg);\r\n+                  if (parsed.latitude && parsed.longitude) {\r\n+                    setDestination(parsed);\r\n+                  }\r\n+                } catch (e) {\r\n+                  // Debug string from inside the WebView like \"🧭 DRIVER MARKER: ...\"\r\n+                }\r\n+              }}\r\n+            />\r\n+          )}\r\n+\r\n+          <View style={styles.overlayContainer}>\r\n+            <View style={styles.overlay}>\r\n+              {searching && (\r\n+                <View style={{ backgroundColor: \"#fff3cd\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+                  <Text style={{ fontWeight: \"bold\" }}>🔍 Finding a driver...</Text>\r\n+                  <TouchableOpacity\r\n+                    onPress={() => {\r\n+                      setSearching(false);\r\n+                      setBookingId(null);\r\n+                      if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                    }}\r\n+                    style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+                  >\r\n+                    <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+              )}\r\n+\r\n+              {/* ✅ Show this if driver is found */}\r\n+              {matchedDriver && (\r\n+                <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+                  <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n+                  {matchedDriver.selfieImage && (\r\n+                    <Image\r\n+                      source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n+                      style={{ width: 80, height: 80, borderRadius: 40, marginVertical: 8 }}\r\n+                    />\r\n+                  )}\r\n+                  <Text>Name: {matchedDriver.driverName}</Text>\r\n+                  <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n+                  <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n+                  <TouchableOpacity\r\n+                    onPress={() => {\r\n+                      setMatchedDriver(null);\r\n+                      setBookingId(null);\r\n+                      setSearching(false);\r\n+                      setDestination(null);\r\n+                      if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                    }}\r\n+                    style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+                  >\r\n+                    <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+              )}\r\n+            </View>\r\n+            {showBookingForm && (\r\n+              <View style={styles.card}>\r\n+                <View style={styles.cardHeader} />\r\n+                <TouchableOpacity style={styles.inputBox}>\r\n+                  <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n+                  <Text style={styles.inputText}>\r\n+                    {destination ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}` : \"Saan ka papunta ngayon?\"}\r\n+                  </Text>\r\n+                  <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+                </TouchableOpacity>\r\n+                <TextInput style={styles.inputBoxSimple} placeholder=\"Name this location (optional: Home, Work, etc.)\" value={destinationLabel} onChangeText={setDestinationLabel} />\r\n+                <TextInput style={styles.inputBoxSimple} placeholder=\"Notes sa driver\" value={notes} onChangeText={setNotes} />\r\n+                <TextInput style={styles.inputBox} placeholder=\"Paano ka magbabayad\" value={paymentMethod} onChangeText={setPaymentMethod} />\r\n+                <View style={styles.totalFareContainer}>\r\n+                  <View style={styles.fareBox}><Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text></View>\r\n+                  <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}><Text style={styles.bookNowText}>BOOK NOW</Text></TouchableOpacity>\r\n+                </View>\r\n+              </View>\r\n+            )}\r\n+\r\n+            {!matchedDriver && !searching && !showBookingForm && (\r\n+              <TouchableOpacity\r\n+                onPress={() => setShowBookingForm(true)}\r\n+                style={{\r\n+                  position: \"absolute\",\r\n+                  bottom: 85,\r\n+                  backgroundColor: \"#81C3E1\",\r\n+                  padding: 10,\r\n+                  borderRadius: 8,\r\n+                }}\r\n+              >\r\n+                <Text style={{ fontWeight: \"bold\", fontSize: 16, color: \"white\" }}>START BOOKING</Text>\r\n+              </TouchableOpacity>\r\n+            )}\r\n+\r\n+\r\n+            <View style={styles.bottomNav}>\r\n+              <TouchableOpacity><Ionicons name=\"home\" size={30} color=\"black\" /><Text>Home</Text></TouchableOpacity>\r\n+              <TouchableOpacity><Ionicons name=\"document-text-outline\" size={30} color=\"black\" /><Text>History</Text></TouchableOpacity>\r\n+              <TouchableOpacity><Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" /><Text>Chats</Text></TouchableOpacity>\r\n+              <TouchableOpacity><Ionicons name=\"person-outline\" size={30} color=\"black\" /><Text>Profile</Text></TouchableOpacity>\r\n+            </View>\r\n+          </View>\r\n+        </View>\r\n+      </TouchableWithoutFeedback>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n+\r\n+const styles = StyleSheet.create({\r\n+  container: {paddingTop: 30 ,flex: 1, backgroundColor: \"#fff\" },\r\n+  overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n+  overlay: {width: width, margin: 60},\r\n+  card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n+  cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n+  inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n+  inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n+  inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n+  totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n+  fareBox: { flex: 1, borderRadius: 3, backgroundColor: \"white\", justifyContent: \"center\", paddingHorizontal: 5, marginRight: 5, width: '50%' },\r\n+  totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n+  bookNowButton: { flex: 1, backgroundColor: \"white\", borderRadius: 8, alignItems: \"center\", justifyContent: \"center\", padding: 5, marginLeft: 5, width: '50%' },\r\n+  bookNowText: { fontSize: 16 },\r\n+  bottomNav: { position: \"absolute\", bottom: 0, flexDirection: \"row\", justifyContent: \"space-around\", width: width, height: 70, backgroundColor: \"white\", borderTopLeftRadius: 30, borderTopRightRadius: 30, alignItems: \"center\", borderWidth: 1, borderColor: \"black\" },\r\n+});\r\n"
                },
                {
                    "date": 1747732693045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,12 +70,12 @@\n       ]);\r\n       return true; \r\n     };\r\n \r\n-    const backHandler = BackHandler.addEventListener(\r\n-      \"hardwareBackPress\",\r\n-      backAction\r\n-    );\r\n+    // const backHandler = BackHandler.addEventListener(\r\n+    //   \"hardwareBackPress\",\r\n+    //   backAction\r\n+    // );\r\n     return () => backHandler.remove();\r\n   }, []);\r\n \r\n \r\n@@ -498,505 +498,4 @@\n   bookNowButton: { flex: 1, backgroundColor: \"white\", borderRadius: 8, alignItems: \"center\", justifyContent: \"center\", padding: 5, marginLeft: 5, width: '50%' },\r\n   bookNowText: { fontSize: 16 },\r\n   bottomNav: { position: \"absolute\", bottom: 0, flexDirection: \"row\", justifyContent: \"space-around\", width: width, height: 70, backgroundColor: \"white\", borderTopLeftRadius: 30, borderTopRightRadius: 30, alignItems: \"center\", borderWidth: 1, borderColor: \"black\" },\r\n });\r\n-import React, { useState, useEffect, useRef } from \"react\";\r\n-import {\r\n-  View,\r\n-  Text,\r\n-  StyleSheet,\r\n-  Dimensions,\r\n-  TouchableOpacity,\r\n-  StatusBar,\r\n-  TextInput,\r\n-  Alert,\r\n-  KeyboardAvoidingView,\r\n-  Platform,\r\n-  TouchableWithoutFeedback,\r\n-  Keyboard,\r\n-  Image,\r\n-  BackHandler\r\n-} from \"react-native\";\r\n-import { WebView } from \"react-native-webview\";\r\n-import type { WebView as WebViewType } from \"react-native-webview\";\r\n-import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n-import { useLocation } from \"../location/GlobalLocation\";\r\n-import { router } from 'expo-router'; // or useNavigation if you're using react-navigation\r\n-import AsyncStorage from '@react-native-async-storage/async-storage';\r\n-import { OSRM_BASE_URL, API_BASE_URL } from \"../../config\";\r\n-\r\n-const { width, height } = Dimensions.get(\"window\");\r\n-\r\n-export default function PHome() {\r\n-  const { location, loading } = useLocation();\r\n-  const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n-  const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n-  const [notes, setNotes] = useState(\"\");\r\n-  const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n-  const [fare, setFare] = useState(20);\r\n-  const [mapHtml, setMapHtml] = useState(\"\");\r\n-  const mapRef = useRef<WebViewType>(null);\r\n-  const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n-  const [matchedDriver, setMatchedDriver] = useState<{\r\n-    driverName: string;\r\n-    driverId: string;\r\n-    franchiseNumber: string;\r\n-    experienceYears: string;\r\n-    selfieImage: string;\r\n-    location: { latitude: number; longitude: number }; \r\n-  } | null>(null);\r\n-\r\n-  const [bookingId, setBookingId] = useState(null);\r\n-  const [showBookingForm, setShowBookingForm] = useState(false); \r\n-  const [searching, setSearching] = useState(false);\r\n-  const searchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n-  \r\n-\r\n-  useEffect(() => {\r\n-    const backAction = () => {\r\n-      Alert.alert(\"Logout Confirmation\", \"Do you want to log out?\", [\r\n-        {\r\n-          text: \"Cancel\",\r\n-          onPress: () => null,\r\n-          style: \"cancel\"\r\n-        },\r\n-        {\r\n-          text: \"Logout\",\r\n-          onPress: async () => {\r\n-            await AsyncStorage.removeItem(\"passengerId\");\r\n-            router.replace(\"/login_and_reg/plogin\"); \r\n-          }\r\n-        }\r\n-      ]);\r\n-      return true; \r\n-    };\r\n-\r\n-    const backHandler = BackHandler.addEventListener(\r\n-      \"hardwareBackPress\",\r\n-      backAction\r\n-    );\r\n-    return () => backHandler.remove();\r\n-  }, []);\r\n-\r\n-\r\n-\r\n-  useEffect(() => {\r\n-    if (!location) return;\r\n-\r\n-    const html = `\r\n-      <!DOCTYPE html>\r\n-      <html>\r\n-        <head>\r\n-          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n-          <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n-          <style>\r\n-            html, body, #map {\r\n-              height: 100%;\r\n-              margin: 0;\r\n-              padding: 0;\r\n-              overflow: hidden;\r\n-              touch-action: auto;\r\n-            }\r\n-            .leaflet-control-zoom { top: 10px !important; left: 10px !important; }\r\n-\r\n-            .driver-label {\r\n-              font-weight: bold;\r\n-              color: red;\r\n-              background: white;\r\n-              padding: 2px 5px;\r\n-              border-radius: 4px;\r\n-              font-size: 14px;\r\n-            }\r\n-          </style>\r\n-        </head>\r\n-        <body>\r\n-          <div id=\"map\"></div>\r\n-          <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n-          <script>\r\n-            window.onload = function () {\r\n-              const map = L.map('map', {\r\n-                zoomControl: false,\r\n-                dragging: true,\r\n-                scrollWheelZoom: true,\r\n-                touchZoom: true,\r\n-                doubleClickZoom: true,\r\n-                boxZoom: true,\r\n-              }).setView([${location.latitude}, ${location.longitude}], 15);\r\n-\r\n-              L.control.zoom({ position: 'topleft' }).addTo(map);\r\n-\r\n-              L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n-                maxZoom: 19,\r\n-                attribution: '© OpenStreetMap contributors'\r\n-              }).addTo(map);\r\n-\r\n-              const currentMarker = L.marker([${location.latitude}, ${location.longitude}], {\r\n-                icon: L.icon({\r\n-                  iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png',\r\n-                  iconSize: [30, 30],\r\n-                })\r\n-              }).addTo(map).bindTooltip(\"You\", { permanent: true, direction: \"top\" });\r\n-\r\n-              let destMarker = null;\r\n-              let driverMarker = null;\r\n-\r\n-              let destinationLocked = false;\r\n-              map.on('click', function(e) {\r\n-                if (destinationLocked) return;\r\n-\r\n-                const { lat, lng } = e.latlng;\r\n-                if (destMarker) map.removeLayer(destMarker);\r\n-                destMarker = L.marker([lat, lng], {\r\n-                  icon: L.icon({\r\n-                    iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n-                    iconSize: [30, 30],\r\n-                  })\r\n-                }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n-\r\n-                window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n-              });\r\n-              document.addEventListener('message', function(event) {\r\n-                const msg = JSON.parse(event.data);\r\n-                window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n-\r\n-                if (msg.type === 'setMarkers') {\r\n-                  destinationLocked = !!msg.driver;\r\n-                  if (msg.driver) {\r\n-                    const { latitude, longitude } = msg.driver;\r\n-                    window.ReactNativeWebView.postMessage(\"✅ DRIVER FOUND AT: \" + latitude + \", \" + longitude);\r\n-                  } else {\r\n-                    window.ReactNativeWebView.postMessage(\"❌ NO DRIVER IN MESSAGE\");\r\n-                  }\r\n-\r\n-                  if (destMarker) map.removeLayer(destMarker);\r\n-                  if (msg.destination) {\r\n-                    destMarker = L.marker([msg.destination.latitude, msg.destination.longitude], {\r\n-                      icon: L.icon({\r\n-                        iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n-                        iconSize: [30, 30],\r\n-                      })\r\n-                    }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n-                  }\r\n-\r\n-                  if (driverMarker) map.removeLayer(driverMarker);\r\n-                  if (msg.driver) {\r\n-                    const { latitude, longitude } = msg.driver;\r\n-                    window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER REQUESTED: \" + JSON.stringify(msg.driver));\r\n-\r\n-                    L.circle([latitude, longitude], {\r\n-                      color: 'red',\r\n-                      radius: 10,\r\n-                      fillOpacity: 0.9\r\n-                    }).addTo(map);\r\n-\r\n-                    driverMarker = L.marker([latitude, longitude], {\r\n-                      icon: L.icon({\r\n-                        iconUrl: 'https://cdn-icons-png.flaticon.com/512/2972/2972185.png', \r\n-                        iconSize: [40, 40],\r\n-                        iconAnchor: [20, 40],\r\n-                      })\r\n-                    }).addTo(map).bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\" })\r\n-                      .setZIndexOffset(1000);\r\n-                  }\r\n-                }\r\n-              });\r\n-            }\r\n-          </script>\r\n-\r\n-        </body>\r\n-      </html>\r\n-    `;\r\n-\r\n-    setMapHtml(html);\r\n-    }, [location]);\r\n-    \r\n-\r\n-    useEffect(() => {\r\n-    if (!mapRef.current) return;\r\n-\r\n-    const driverCoords = matchedDriver?.location\r\n-      ? {\r\n-          latitude: matchedDriver.location.latitude,\r\n-          longitude: matchedDriver.location.longitude,\r\n-        }\r\n-      : null;\r\n-\r\n-    console.log(\"📤 Sending to WebView:\", {\r\n-      type: \"setMarkers\",\r\n-      destination,\r\n-      driver: matchedDriver?.location,\r\n-    });\r\n-\r\n-\r\n-    mapRef.current.postMessage(\r\n-      JSON.stringify({\r\n-        type: \"setMarkers\",\r\n-        destination,\r\n-        driver: driverCoords,\r\n-      })\r\n-    );\r\n-  }, [destination, matchedDriver]);\r\n-\r\n-  const handleBookNow = async () => {\r\n-    if (!location || !destination) {\r\n-      Alert.alert(\"Missing location info\");\r\n-      return;\r\n-    }\r\n-    const passengerId = await AsyncStorage.getItem(\"passengerId\");\r\n-\r\n-    const bookingData = {\r\n-      pickupLat: location.latitude,\r\n-      pickupLng: location.longitude,\r\n-      destinationLat: destination.latitude,\r\n-      destinationLng: destination.longitude,\r\n-      fare,\r\n-      paymentMethod,\r\n-      notes,\r\n-      passengerId\r\n-    };\r\n-\r\n-    try {\r\n-      setShowBookingForm(false); // hide form\r\n-      setSearching(true);        // show searching state\r\n-\r\n-      const response = await fetch(`${API_BASE_URL}/api/book`, {\r\n-        method: \"POST\",\r\n-        headers: { \"Content-Type\": \"application/json\" },\r\n-        body: JSON.stringify(bookingData),\r\n-      });\r\n-\r\n-      const result = await response.json();\r\n-      if (!response.ok) throw new Error(result.message || \"Something went wrong\");\r\n-\r\n-      setBookingId(result.booking.id);\r\n-\r\n-      // Start polling for driver for up to 10 minutes\r\n-      const maxWaitTime = 10 * 60 * 1000; // 10 minutes\r\n-      const startTime = Date.now();\r\n-\r\n-      const poll = async () => {\r\n-        try {\r\n-          const [driverRes, statusRes] = await Promise.all([\r\n-            fetch(`${API_BASE_URL}/api/driver/${result.booking.driverId}`),\r\n-            fetch(`${API_BASE_URL}/api/driver-status/${result.booking.driverId}`)\r\n-          ]);\r\n-\r\n-          const driverData = await driverRes.json();\r\n-          const statusData = await statusRes.json();\r\n-\r\n-          if (driverData?.driver) {\r\n-            setMatchedDriver({\r\n-              driverName: driverData.driver.driverName,\r\n-              driverId: driverData.driver._id,\r\n-              franchiseNumber: driverData.driver.franchiseNumber || \"N/A\",\r\n-              experienceYears: driverData.driver.experienceYears || \"N/A\",\r\n-              selfieImage: driverData.driver.selfieImage || \"N/A\",\r\n-              location: statusData.location || null, // Live GPS\r\n-            });\r\n-\r\n-            console.log(\"🚨 DRIVER DATA FROM BACKEND:\", driverData.driver);\r\n-            console.log(\"📍 LIVE LOCATION:\", statusData.location);\r\n-            setSearching(false);\r\n-            return;\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(\"⏳ Still waiting for driver...\");\r\n-        }\r\n-\r\n-        if (Date.now() - startTime < maxWaitTime) {\r\n-          searchTimeoutRef.current = setTimeout(poll, 5000); // try again in 5 sec\r\n-        } else {\r\n-          setSearching(false); // stop searching silently\r\n-          console.log(\"❌ No driver found within 10 minutes.\");\r\n-        }\r\n-      };\r\n-\r\n-      poll(); // start polling\r\n-    } catch (error) {\r\n-      console.error(\"❌ Booking error:\", error);\r\n-      Alert.alert(\"Error\", \"Failed to send booking. Please try again.\");\r\n-      setSearching(false);\r\n-    }\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => setKeyboardOffset(-35));\r\n-    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => setKeyboardOffset(0));\r\n-    return () => {\r\n-      showSub.remove();\r\n-      hideSub.remove();\r\n-    };\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    let interval;\r\n-    const pollForDriverMatch = async () => {\r\n-      if (!bookingId) return;\r\n-      try {\r\n-        const res = await fetch(`${API_BASE_URL}/api/bookings`);\r\n-        const allBookings = await res.json();\r\n-        const myBooking = allBookings.find((b: any) => b && b.id === bookingId);\r\n-        if (myBooking && myBooking.status === \"accepted\" && !myBooking.passengerConfirmed) {\r\n-          setMatchedDriver(myBooking);\r\n-        }\r\n-      } catch (err) {\r\n-        console.error(\"❌ Poll error:\", err);\r\n-      }\r\n-    };\r\n-    interval = setInterval(pollForDriverMatch, 4000);\r\n-    return () => clearInterval(interval);\r\n-  }, [bookingId]);\r\n-\r\n-\r\n-  if (loading || !location) return null;\r\n-\r\n-  return (\r\n-    <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === \"ios\" ? \"padding\" : undefined} keyboardVerticalOffset={keyboardOffset}>\r\n-      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n-        <View style={styles.container}>\r\n-          <StatusBar barStyle=\"light-content\" translucent backgroundColor=\"black\" />\r\n-          {mapHtml && (\r\n-            <WebView\r\n-              ref={(ref) => {\r\n-                if (ref && !mapRef.current) {\r\n-                  mapRef.current = ref;\r\n-                }\r\n-              }}\r\n-              originWhitelist={[\"*\"]}\r\n-              source={{ html: mapHtml }}\r\n-              javaScriptEnabled={true}\r\n-              style={{\r\n-                position: \"absolute\",\r\n-                top: 0,\r\n-                left: 0,\r\n-                right: 0,\r\n-                bottom: 0,\r\n-                zIndex: 0,\r\n-              }}\r\n-              onMessage={(event) => {\r\n-                console.log(\"✅ Received from WebView:\", event.nativeEvent.data);\r\n-                const msg = event.nativeEvent.data;\r\n-                console.log(\"📥 WebView message:\", msg);\r\n-\r\n-                try {\r\n-                  const parsed = JSON.parse(msg);\r\n-                  if (parsed.latitude && parsed.longitude) {\r\n-                    setDestination(parsed);\r\n-                  }\r\n-                } catch (e) {\r\n-                  // Debug string from inside the WebView like \"🧭 DRIVER MARKER: ...\"\r\n-                }\r\n-              }}\r\n-            />\r\n-          )}\r\n-\r\n-          <View style={styles.overlayContainer}>\r\n-            <View style={styles.overlay}>\r\n-              {searching && (\r\n-                <View style={{ backgroundColor: \"#fff3cd\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n-                  <Text style={{ fontWeight: \"bold\" }}>🔍 Finding a driver...</Text>\r\n-                  <TouchableOpacity\r\n-                    onPress={() => {\r\n-                      setSearching(false);\r\n-                      setBookingId(null);\r\n-                      if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-                    }}\r\n-                    style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n-                  >\r\n-                    <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n-                  </TouchableOpacity>\r\n-                </View>\r\n-              )}\r\n-\r\n-              {/* ✅ Show this if driver is found */}\r\n-              {matchedDriver && (\r\n-                <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n-                  <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n-                  {matchedDriver.selfieImage && (\r\n-                    <Image\r\n-                      source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n-                      style={{ width: 80, height: 80, borderRadius: 40, marginVertical: 8 }}\r\n-                    />\r\n-                  )}\r\n-                  <Text>Name: {matchedDriver.driverName}</Text>\r\n-                  <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n-                  <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n-                  <TouchableOpacity\r\n-                    onPress={() => {\r\n-                      setMatchedDriver(null);\r\n-                      setBookingId(null);\r\n-                      setSearching(false);\r\n-                      setDestination(null);\r\n-                      if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-                    }}\r\n-                    style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n-                  >\r\n-                    <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n-                  </TouchableOpacity>\r\n-                </View>\r\n-              )}\r\n-            </View>\r\n-            {showBookingForm && (\r\n-              <View style={styles.card}>\r\n-                <View style={styles.cardHeader} />\r\n-                <TouchableOpacity style={styles.inputBox}>\r\n-                  <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-                  <Text style={styles.inputText}>\r\n-                    {destination ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}` : \"Saan ka papunta ngayon?\"}\r\n-                  </Text>\r\n-                  <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-                </TouchableOpacity>\r\n-                <TextInput style={styles.inputBoxSimple} placeholder=\"Name this location (optional: Home, Work, etc.)\" value={destinationLabel} onChangeText={setDestinationLabel} />\r\n-                <TextInput style={styles.inputBoxSimple} placeholder=\"Notes sa driver\" value={notes} onChangeText={setNotes} />\r\n-                <TextInput style={styles.inputBox} placeholder=\"Paano ka magbabayad\" value={paymentMethod} onChangeText={setPaymentMethod} />\r\n-                <View style={styles.totalFareContainer}>\r\n-                  <View style={styles.fareBox}><Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text></View>\r\n-                  <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}><Text style={styles.bookNowText}>BOOK NOW</Text></TouchableOpacity>\r\n-                </View>\r\n-              </View>\r\n-            )}\r\n-\r\n-            {!matchedDriver && !searching && !showBookingForm && (\r\n-              <TouchableOpacity\r\n-                onPress={() => setShowBookingForm(true)}\r\n-                style={{\r\n-                  position: \"absolute\",\r\n-                  bottom: 85,\r\n-                  backgroundColor: \"#81C3E1\",\r\n-                  padding: 10,\r\n-                  borderRadius: 8,\r\n-                }}\r\n-              >\r\n-                <Text style={{ fontWeight: \"bold\", fontSize: 16, color: \"white\" }}>START BOOKING</Text>\r\n-              </TouchableOpacity>\r\n-            )}\r\n-\r\n-\r\n-            <View style={styles.bottomNav}>\r\n-              <TouchableOpacity><Ionicons name=\"home\" size={30} color=\"black\" /><Text>Home</Text></TouchableOpacity>\r\n-              <TouchableOpacity><Ionicons name=\"document-text-outline\" size={30} color=\"black\" /><Text>History</Text></TouchableOpacity>\r\n-              <TouchableOpacity><Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" /><Text>Chats</Text></TouchableOpacity>\r\n-              <TouchableOpacity><Ionicons name=\"person-outline\" size={30} color=\"black\" /><Text>Profile</Text></TouchableOpacity>\r\n-            </View>\r\n-          </View>\r\n-        </View>\r\n-      </TouchableWithoutFeedback>\r\n-    </KeyboardAvoidingView>\r\n-  );\r\n-}\r\n-\r\n-const styles = StyleSheet.create({\r\n-  container: {paddingTop: 30 ,flex: 1, backgroundColor: \"#fff\" },\r\n-  overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n-  overlay: {width: width, margin: 60},\r\n-  card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n-  cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n-  inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n-  inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n-  inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n-  totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n-  fareBox: { flex: 1, borderRadius: 3, backgroundColor: \"white\", justifyContent: \"center\", paddingHorizontal: 5, marginRight: 5, width: '50%' },\r\n-  totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n-  bookNowButton: { flex: 1, backgroundColor: \"white\", borderRadius: 8, alignItems: \"center\", justifyContent: \"center\", padding: 5, marginLeft: 5, width: '50%' },\r\n-  bookNowText: { fontSize: 16 },\r\n-  bottomNav: { position: \"absolute\", bottom: 0, flexDirection: \"row\", justifyContent: \"space-around\", width: width, height: 70, backgroundColor: \"white\", borderTopLeftRadius: 30, borderTopRightRadius: 30, alignItems: \"center\", borderWidth: 1, borderColor: \"black\" },\r\n-});\r\n"
                },
                {
                    "date": 1747737668279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n     // const backHandler = BackHandler.addEventListener(\r\n     //   \"hardwareBackPress\",\r\n     //   backAction\r\n     // );\r\n-    return () => backHandler.remove();\r\n+    // return () => backHandler.remove();\r\n   }, []);\r\n \r\n \r\n \r\n@@ -406,9 +406,9 @@\n                 </View>\r\n               )}\r\n \r\n               {/* ✅ Show this if driver is found */}\r\n-              {matchedDriver && (\r\n+              {matchedDriver && !bookingConfirmed && (\r\n                 <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n                   <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n                   {matchedDriver.selfieImage && (\r\n                     <Image\r\n"
                },
                {
                    "date": 1747737676846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -406,9 +406,9 @@\n                 </View>\r\n               )}\r\n \r\n               {/* ✅ Show this if driver is found */}\r\n-              {matchedDriver && !bookingConfirmed && (\r\n+              {matchedDriver && (\r\n                 <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n                   <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n                   {matchedDriver.selfieImage && (\r\n                     <Image\r\n"
                },
                {
                    "date": 1747737778957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,13 +70,13 @@\n       ]);\r\n       return true; \r\n     };\r\n \r\n-    // const backHandler = BackHandler.addEventListener(\r\n-    //   \"hardwareBackPress\",\r\n-    //   backAction\r\n-    // );\r\n-    // return () => backHandler.remove();\r\n+    const backHandler = BackHandler.addEventListener(\r\n+      \"hardwareBackPress\",\r\n+      backAction\r\n+    );\r\n+    return () => backHandler.remove();\r\n   }, []);\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1747748209247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,13 +70,13 @@\n       ]);\r\n       return true; \r\n     };\r\n \r\n-    const backHandler = BackHandler.addEventListener(\r\n-      \"hardwareBackPress\",\r\n-      backAction\r\n-    );\r\n-    return () => backHandler.remove();\r\n+    // const backHandler = BackHandler.addEventListener(\r\n+    //   \"hardwareBackPress\",\r\n+    //   backAction\r\n+    // );\r\n+    // return () => backHandler.remove();\r\n   }, []);\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1747748412403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     experienceYears: string;\r\n     selfieImage: string;\r\n     location: { latitude: number; longitude: number }; \r\n   } | null>(null);\r\n-\r\n+  const [bookingConfirmed, setBookingConfirmed] = useState(false);\r\n   const [bookingId, setBookingId] = useState(null);\r\n   const [showBookingForm, setShowBookingForm] = useState(false); \r\n   const [searching, setSearching] = useState(false);\r\n   const searchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n"
                },
                {
                    "date": 1747748429805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,13 +70,13 @@\n       ]);\r\n       return true; \r\n     };\r\n \r\n-    // const backHandler = BackHandler.addEventListener(\r\n-    //   \"hardwareBackPress\",\r\n-    //   backAction\r\n-    // );\r\n-    // return () => backHandler.remove();\r\n+    const backHandler = BackHandler.addEventListener(\r\n+      \"hardwareBackPress\",\r\n+      backAction\r\n+    );\r\n+    return () => backHandler.remove();\r\n   }, []);\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1747749349705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,10 +333,11 @@\n       try {\r\n         const res = await fetch(`${API_BASE_URL}/api/bookings`);\r\n         const allBookings = await res.json();\r\n         const myBooking = allBookings.find((b: any) => b && b.id === bookingId);\r\n-        if (myBooking && myBooking.status === \"accepted\" && !myBooking.passengerConfirmed) {\r\n-          setMatchedDriver(myBooking);\r\n+        if (myBooking && myBooking.status === \"accepted\" && !bookingConfirmed) {\r\n+          setBookingConfirmed(true);\r\n+          console.log(\"✅ Driver accepted the booking!\");\r\n         }\r\n       } catch (err) {\r\n         console.error(\"❌ Poll error:\", err);\r\n       }\r\n"
                },
                {
                    "date": 1747749495987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,37 +207,39 @@\n       </html>\r\n     `;\r\n \r\n     setMapHtml(html);\r\n-    }, [location]);\r\n+  }, [location]);\r\n     \r\n \r\n-    useEffect(() => {\r\n-    if (!mapRef.current) return;\r\n+  useEffect(() => {\r\n+    if (!mapRef.current || bookingConfirmed) return;\r\n \r\n     const driverCoords = matchedDriver?.location\r\n       ? {\r\n           latitude: matchedDriver.location.latitude,\r\n           longitude: matchedDriver.location.longitude,\r\n         }\r\n       : null;\r\n \r\n-    console.log(\"📤 Sending to WebView:\", {\r\n-      type: \"setMarkers\",\r\n-      destination,\r\n-      driver: matchedDriver?.location,\r\n-    });\r\n-\r\n-\r\n-    mapRef.current.postMessage(\r\n-      JSON.stringify({\r\n+    if (driverCoords && destination) {\r\n+      console.log(\"📤 Sending to WebView:\", {\r\n         type: \"setMarkers\",\r\n         destination,\r\n         driver: driverCoords,\r\n-      })\r\n-    );\r\n-  }, [destination, matchedDriver]);\r\n+      });\r\n \r\n+      mapRef.current.postMessage(\r\n+        JSON.stringify({\r\n+          type: \"setMarkers\",\r\n+          destination,\r\n+          driver: driverCoords,\r\n+        })\r\n+      );\r\n+    }\r\n+  }, [destination, matchedDriver, bookingConfirmed]);\r\n+\r\n+\r\n   const handleBookNow = async () => {\r\n     if (!location || !destination) {\r\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n"
                },
                {
                    "date": 1747749553977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -409,9 +409,9 @@\n                 </View>\r\n               )}\r\n \r\n               {/* ✅ Show this if driver is found */}\r\n-              {matchedDriver && (\r\n+              {matchedDriver && !bookingConfirmed && (\r\n                 <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n                   <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n                   {matchedDriver.selfieImage && (\r\n                     <Image\r\n"
                },
                {
                    "date": 1748018171951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -422,14 +422,27 @@\n                   <Text>Name: {matchedDriver.driverName}</Text>\r\n                   <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n                   <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n                   <TouchableOpacity\r\n-                    onPress={() => {\r\n+                    onPress={async () => {\r\n+                      setSearching(false);\r\n+                      setBookingId(null);\r\n                       setMatchedDriver(null);\r\n-                      setBookingId(null);\r\n-                      setSearching(false);\r\n                       setDestination(null);\r\n+                      setBookingConfirmed(false);\r\n+\r\n                       if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+\r\n+                      try {\r\n+                        await fetch(`${API_BASE_URL}/api/cancel-booking`, {\r\n+                          method: \"POST\",\r\n+                          headers: { \"Content-Type\": \"application/json\" },\r\n+                          body: JSON.stringify({ bookingId }),\r\n+                        });\r\n+                        console.log(\"✅ Ride cancellation sent to backend\");\r\n+                      } catch (err) {\r\n+                        console.error(\"❌ Failed to notify backend of cancellation\", err);\r\n+                      }\r\n                     }}\r\n                     style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n                   >\r\n                     <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n"
                },
                {
                    "date": 1748018226939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -452,15 +452,15 @@\n             </View>\r\n             {showBookingForm && (\r\n               <View style={styles.card}>\r\n                 <View style={styles.cardHeader} />\r\n-                <TouchableOpacity style={styles.inputBox}>\r\n+                <View style={styles.inputBox}>\r\n                   <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n                   <Text style={styles.inputText}>\r\n                     {destination ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}` : \"Saan ka papunta ngayon?\"}\r\n                   </Text>\r\n                   <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-                </TouchableOpacity>\r\n+                </View>\r\n                 <TextInput style={styles.inputBoxSimple} placeholder=\"Name this location (optional: Home, Work, etc.)\" value={destinationLabel} onChangeText={setDestinationLabel} />\r\n                 <TextInput style={styles.inputBoxSimple} placeholder=\"Notes sa driver\" value={notes} onChangeText={setNotes} />\r\n                 <TextInput style={styles.inputBox} placeholder=\"Paano ka magbabayad\" value={paymentMethod} onChangeText={setPaymentMethod} />\r\n                 <View style={styles.totalFareContainer}>\r\n"
                },
                {
                    "date": 1748018954264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -423,16 +423,8 @@\n                   <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n                   <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n                   <TouchableOpacity\r\n                     onPress={async () => {\r\n-                      setSearching(false);\r\n-                      setBookingId(null);\r\n-                      setMatchedDriver(null);\r\n-                      setDestination(null);\r\n-                      setBookingConfirmed(false);\r\n-\r\n-                      if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-\r\n                       try {\r\n                         await fetch(`${API_BASE_URL}/api/cancel-booking`, {\r\n                           method: \"POST\",\r\n                           headers: { \"Content-Type\": \"application/json\" },\r\n@@ -441,8 +433,24 @@\n                         console.log(\"✅ Ride cancellation sent to backend\");\r\n                       } catch (err) {\r\n                         console.error(\"❌ Failed to notify backend of cancellation\", err);\r\n                       }\r\n+\r\n+                      // ✅ Reset all state\r\n+                      setSearching(false);\r\n+                      setBookingId(null);\r\n+                      setMatchedDriver(null);\r\n+                      setDestination(null);\r\n+                      setBookingConfirmed(false);\r\n+\r\n+                      // ✅ Re-enable map clicks (by removing destinationLocked)\r\n+                      mapRef.current?.postMessage(JSON.stringify({\r\n+                        type: \"setMarkers\",\r\n+                        destination: null,\r\n+                        driver: null\r\n+                      }));\r\n+\r\n+                      if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n                     }}\r\n                     style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n                   >\r\n                     <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n"
                },
                {
                    "date": 1748327575305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,27 +329,38 @@\n   }, []);\r\n \r\n   useEffect(() => {\r\n     let interval;\r\n+    let alertShown = false; // ✅ new\r\n+\r\n     const pollForDriverMatch = async () => {\r\n       if (!bookingId) return;\r\n       try {\r\n         const res = await fetch(`${API_BASE_URL}/api/bookings`);\r\n         const allBookings = await res.json();\r\n         const myBooking = allBookings.find((b: any) => b && b.id === bookingId);\r\n-        if (myBooking && myBooking.status === \"accepted\" && !bookingConfirmed) {\r\n-          setBookingConfirmed(true);\r\n-          console.log(\"✅ Driver accepted the booking!\");\r\n+\r\n+        if (myBooking) {\r\n+          if (myBooking.status === \"accepted\" && !bookingConfirmed) {\r\n+            setBookingConfirmed(true);\r\n+            console.log(\"✅ Driver accepted the booking!\");\r\n+          }\r\n+          if (myBooking.driverConfirmed && !alertShown) {\r\n+            alertShown = true;\r\n+            Alert.alert(\"Driver Confirmed\", \"The driver confirmed your ride and is on the way!\");\r\n+          }\r\n         }\r\n       } catch (err) {\r\n         console.error(\"❌ Poll error:\", err);\r\n       }\r\n     };\r\n+\r\n     interval = setInterval(pollForDriverMatch, 4000);\r\n     return () => clearInterval(interval);\r\n-  }, [bookingId]);\r\n+  }, [bookingId, bookingConfirmed]);\r\n \r\n \r\n+\r\n   if (loading || !location) return null;\r\n \r\n   return (\r\n     <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === \"ios\" ? \"padding\" : undefined} keyboardVerticalOffset={keyboardOffset}>\r\n"
                },
                {
                    "date": 1748330028990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,10 @@\n   const [bookingId, setBookingId] = useState(null);\r\n   const [showBookingForm, setShowBookingForm] = useState(false); \r\n   const [searching, setSearching] = useState(false);\r\n   const searchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n+  const [infoBoxMinimized, setInfoBoxMinimized] = useState(false);\r\n+\r\n   \r\n   \r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1748334202074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -422,53 +422,64 @@\n                 </View>\r\n               )}\r\n \r\n               {/* ✅ Show this if driver is found */}\r\n-              {matchedDriver && !bookingConfirmed && (\r\n-                <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n-                  <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n-                  {matchedDriver.selfieImage && (\r\n-                    <Image\r\n-                      source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n-                      style={{ width: 80, height: 80, borderRadius: 40, marginVertical: 8 }}\r\n-                    />\r\n-                  )}\r\n-                  <Text>Name: {matchedDriver.driverName}</Text>\r\n-                  <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n-                  <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n-                  <TouchableOpacity\r\n-                    onPress={async () => {\r\n-                      try {\r\n-                        await fetch(`${API_BASE_URL}/api/cancel-booking`, {\r\n-                          method: \"POST\",\r\n-                          headers: { \"Content-Type\": \"application/json\" },\r\n-                          body: JSON.stringify({ bookingId }),\r\n-                        });\r\n-                        console.log(\"✅ Ride cancellation sent to backend\");\r\n-                      } catch (err) {\r\n-                        console.error(\"❌ Failed to notify backend of cancellation\", err);\r\n-                      }\r\n+              {matchedDriver && (\r\n+                <View style={{ position: \"absolute\", bottom: 100, right: 20 }}>\r\n+                  {infoBoxMinimized ? (\r\n+                    <TouchableOpacity\r\n+                      style={{ backgroundColor: \"#81C3E1\", padding: 10, borderRadius: 8 }}\r\n+                      onPress={() => setInfoBoxMinimized(false)}\r\n+                    >\r\n+                      <Text style={{ color: \"white\", fontWeight: \"bold\" }}>View Driver</Text>\r\n+                    </TouchableOpacity>\r\n+                  ) : (\r\n+                    <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+                      <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n+                      {matchedDriver.selfieImage && (\r\n+                        <Image\r\n+                          source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n+                          style={{ width: 80, height: 80, borderRadius: 40, marginVertical: 8 }}\r\n+                        />\r\n+                      )}\r\n+                      <Text>Name: {matchedDriver.driverName}</Text>\r\n+                      <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n+                      <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n+                      <TouchableOpacity\r\n+                        onPress={async () => {\r\n+                          try {\r\n+                            await fetch(`${API_BASE_URL}/api/cancel-booking`, {\r\n+                              method: \"POST\",\r\n+                              headers: { \"Content-Type\": \"application/json\" },\r\n+                              body: JSON.stringify({ bookingId }),\r\n+                            });\r\n+                            console.log(\"✅ Ride cancellation sent to backend\");\r\n+                          } catch (err) {\r\n+                            console.error(\"❌ Failed to notify backend of cancellation\", err);\r\n+                          }\r\n \r\n-                      // ✅ Reset all state\r\n-                      setSearching(false);\r\n-                      setBookingId(null);\r\n-                      setMatchedDriver(null);\r\n-                      setDestination(null);\r\n-                      setBookingConfirmed(false);\r\n+                          // ✅ Reset all state\r\n+                          setSearching(false);\r\n+                          setBookingId(null);\r\n+                          setMatchedDriver(null);\r\n+                          setDestination(null);\r\n+                          setBookingConfirmed(false);\r\n \r\n-                      // ✅ Re-enable map clicks (by removing destinationLocked)\r\n-                      mapRef.current?.postMessage(JSON.stringify({\r\n-                        type: \"setMarkers\",\r\n-                        destination: null,\r\n-                        driver: null\r\n-                      }));\r\n+                          // ✅ Re-enable map clicks (by removing destinationLocked)\r\n+                          mapRef.current?.postMessage(JSON.stringify({\r\n+                            type: \"setMarkers\",\r\n+                            destination: null,\r\n+                            driver: null\r\n+                          }));\r\n \r\n-                      if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-                    }}\r\n-                    style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n-                  >\r\n-                    <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n-                  </TouchableOpacity>\r\n+                          if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                        }}\r\n+                        style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+                      >\r\n+                        <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n+                      </TouchableOpacity>\r\n+                    </View>\r\n+                  )}\r\n                 </View>\r\n               )}\r\n             </View>\r\n             {showBookingForm && (\r\n"
                },
                {
                    "date": 1748334592583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -421,67 +421,95 @@\n                   </TouchableOpacity>\r\n                 </View>\r\n               )}\r\n \r\n-              {/* ✅ Show this if driver is found */}\r\n               {matchedDriver && (\r\n-                <View style={{ position: \"absolute\", bottom: 100, right: 20 }}>\r\n+                <View\r\n+                  style={{\r\n+                    position: \"absolute\",\r\n+                    bottom: 80, // just above the bottom nav\r\n+                    left: 0,\r\n+                    right: 0,\r\n+                    marginHorizontal: 20,\r\n+                    backgroundColor: \"#d1fcd3\",\r\n+                    borderRadius: 10,\r\n+                    padding: 10,\r\n+                    elevation: 3,\r\n+                  }}\r\n+                >\r\n                   {infoBoxMinimized ? (\r\n                     <TouchableOpacity\r\n-                      style={{ backgroundColor: \"#81C3E1\", padding: 10, borderRadius: 8 }}\r\n+                      style={{\r\n+                        alignItems: \"center\",\r\n+                        padding: 10,\r\n+                      }}\r\n                       onPress={() => setInfoBoxMinimized(false)}\r\n                     >\r\n-                      <Text style={{ color: \"white\", fontWeight: \"bold\" }}>View Driver</Text>\r\n+                      <Text style={{ fontWeight: \"bold\", color: \"#000\" }}>View Driver Info</Text>\r\n                     </TouchableOpacity>\r\n                   ) : (\r\n-                    <View style={{ backgroundColor: \"#d1fcd3\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n-                      <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n-                      {matchedDriver.selfieImage && (\r\n-                        <Image\r\n-                          source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n-                          style={{ width: 80, height: 80, borderRadius: 40, marginVertical: 8 }}\r\n-                        />\r\n-                      )}\r\n-                      <Text>Name: {matchedDriver.driverName}</Text>\r\n-                      <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n-                      <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n-                      <TouchableOpacity\r\n-                        onPress={async () => {\r\n-                          try {\r\n-                            await fetch(`${API_BASE_URL}/api/cancel-booking`, {\r\n-                              method: \"POST\",\r\n-                              headers: { \"Content-Type\": \"application/json\" },\r\n-                              body: JSON.stringify({ bookingId }),\r\n-                            });\r\n-                            console.log(\"✅ Ride cancellation sent to backend\");\r\n-                          } catch (err) {\r\n-                            console.error(\"❌ Failed to notify backend of cancellation\", err);\r\n-                          }\r\n+                    <>\r\n+                      <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n+                        {matchedDriver.selfieImage && (\r\n+                          <Image\r\n+                            source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n+                            style={{ width: 50, height: 50, borderRadius: 25, marginRight: 10 }}\r\n+                          />\r\n+                        )}\r\n+                        <View style={{ flex: 1 }}>\r\n+                          <Text style={{ fontWeight: \"bold\", color: \"#000\" }}>✅ Driver Found!</Text>\r\n+                          <Text>Name: {matchedDriver.driverName}</Text>\r\n+                          <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n+                          <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n+                        </View>\r\n+                      </View>\r\n+                      <View style={{ flexDirection: \"row\", justifyContent: \"space-between\", marginTop: 10 }}>\r\n+                        <TouchableOpacity\r\n+                          onPress={() => setInfoBoxMinimized(true)}\r\n+                          style={{ backgroundColor: \"#81C3E1\", borderRadius: 5, padding: 5 }}\r\n+                        >\r\n+                          <Text style={{ color: \"white\" }}>Minimize</Text>\r\n+                        </TouchableOpacity>\r\n+                        <TouchableOpacity\r\n+                          onPress={async () => {\r\n+                            try {\r\n+                              await fetch(`${API_BASE_URL}/api/cancel-booking`, {\r\n+                                method: \"POST\",\r\n+                                headers: { \"Content-Type\": \"application/json\" },\r\n+                                body: JSON.stringify({ bookingId }),\r\n+                              });\r\n+                              console.log(\"✅ Ride cancellation sent to backend\");\r\n+                            } catch (err) {\r\n+                              console.error(\"❌ Failed to notify backend of cancellation\", err);\r\n+                            }\r\n \r\n-                          // ✅ Reset all state\r\n-                          setSearching(false);\r\n-                          setBookingId(null);\r\n-                          setMatchedDriver(null);\r\n-                          setDestination(null);\r\n-                          setBookingConfirmed(false);\r\n+                            // Reset all state\r\n+                            setSearching(false);\r\n+                            setBookingId(null);\r\n+                            setMatchedDriver(null);\r\n+                            setDestination(null);\r\n+                            setBookingConfirmed(false);\r\n \r\n-                          // ✅ Re-enable map clicks (by removing destinationLocked)\r\n-                          mapRef.current?.postMessage(JSON.stringify({\r\n-                            type: \"setMarkers\",\r\n-                            destination: null,\r\n-                            driver: null\r\n-                          }));\r\n+                            mapRef.current?.postMessage(\r\n+                              JSON.stringify({\r\n+                                type: \"setMarkers\",\r\n+                                destination: null,\r\n+                                driver: null,\r\n+                              })\r\n+                            );\r\n \r\n-                          if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-                        }}\r\n-                        style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n-                      >\r\n-                        <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n-                      </TouchableOpacity>\r\n-                    </View>\r\n+                            if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                          }}\r\n+                          style={{ backgroundColor: \"#f44336\", borderRadius: 5, padding: 5 }}\r\n+                        >\r\n+                          <Text style={{ color: \"white\" }}>Cancel Ride</Text>\r\n+                        </TouchableOpacity>\r\n+                      </View>\r\n+                    </>\r\n                   )}\r\n                 </View>\r\n               )}\r\n+\r\n             </View>\r\n             {showBookingForm && (\r\n               <View style={styles.card}>\r\n                 <View style={styles.cardHeader} />\r\n"
                },
                {
                    "date": 1748334606938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -425,9 +425,8 @@\n               {matchedDriver && (\r\n                 <View\r\n                   style={{\r\n                     position: \"absolute\",\r\n-                    bottom: 80, // just above the bottom nav\r\n                     left: 0,\r\n                     right: 0,\r\n                     marginHorizontal: 20,\r\n                     backgroundColor: \"#d1fcd3\",\r\n"
                },
                {
                    "date": 1748334616195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -425,8 +425,9 @@\n               {matchedDriver && (\r\n                 <View\r\n                   style={{\r\n                     position: \"absolute\",\r\n+                    bottom: 40, // just above the bottom nav\r\n                     left: 0,\r\n                     right: 0,\r\n                     marginHorizontal: 20,\r\n                     backgroundColor: \"#d1fcd3\",\r\n"
                },
                {
                    "date": 1748334624983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -425,9 +425,9 @@\n               {matchedDriver && (\r\n                 <View\r\n                   style={{\r\n                     position: \"absolute\",\r\n-                    bottom: 40, // just above the bottom nav\r\n+                    bottom: 20, // just above the bottom nav\r\n                     left: 0,\r\n                     right: 0,\r\n                     marginHorizontal: 20,\r\n                     backgroundColor: \"#d1fcd3\",\r\n"
                },
                {
                    "date": 1748334655251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -425,9 +425,9 @@\n               {matchedDriver && (\r\n                 <View\r\n                   style={{\r\n                     position: \"absolute\",\r\n-                    bottom: 20, // just above the bottom nav\r\n+                    bottom: 10, // just above the bottom nav\r\n                     left: 0,\r\n                     right: 0,\r\n                     marginHorizontal: 20,\r\n                     backgroundColor: \"#d1fcd3\",\r\n@@ -443,9 +443,9 @@\n                         padding: 10,\r\n                       }}\r\n                       onPress={() => setInfoBoxMinimized(false)}\r\n                     >\r\n-                      <Text style={{ fontWeight: \"bold\", color: \"#000\" }}>View Driver Info</Text>\r\n+                      <Text style={{ fontWeight: \"bold\", color: \"#000\" }}>--------------</Text>\r\n                     </TouchableOpacity>\r\n                   ) : (\r\n                     <>\r\n                       <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n"
                },
                {
                    "date": 1748334925953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -438,14 +438,25 @@\n                 >\r\n                   {infoBoxMinimized ? (\r\n                     <TouchableOpacity\r\n                       style={{\r\n-                        alignItems: \"center\",\r\n-                        padding: 10,\r\n+                        position: \"absolute\",\r\n+                        bottom: 80, // above bottom nav\r\n+                        left: 20,\r\n+                        width: 50,\r\n+                        height: 50,\r\n+                        borderRadius: 25,\r\n+                        overflow: \"hidden\",\r\n+                        borderWidth: 2,\r\n+                        borderColor: \"white\",\r\n+                        elevation: 3,\r\n                       }}\r\n                       onPress={() => setInfoBoxMinimized(false)}\r\n                     >\r\n-                      <Text style={{ fontWeight: \"bold\", color: \"#000\" }}>--------------</Text>\r\n+                      <Image\r\n+                        source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n+                        style={{ width: \"100%\", height: \"100%\" }}\r\n+                      />\r\n                     </TouchableOpacity>\r\n                   ) : (\r\n                     <>\r\n                       <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n"
                },
                {
                    "date": 1748335152998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -439,85 +439,74 @@\n                   {infoBoxMinimized ? (\r\n                     <TouchableOpacity\r\n                       style={{\r\n                         position: \"absolute\",\r\n-                        bottom: 80, // above bottom nav\r\n+                        bottom: 85, // or adjust slightly above bottom nav\r\n                         left: 20,\r\n-                        width: 50,\r\n-                        height: 50,\r\n-                        borderRadius: 25,\r\n+                        width: 60,\r\n+                        height: 60,\r\n+                        borderRadius: 30,\r\n                         overflow: \"hidden\",\r\n+                        backgroundColor: \"#fff\",\r\n                         borderWidth: 2,\r\n-                        borderColor: \"white\",\r\n-                        elevation: 3,\r\n+                        borderColor: \"#fff\",\r\n+                        elevation: 5,\r\n+                        shadowColor: \"#000\",\r\n+                        shadowOpacity: 0.3,\r\n+                        shadowRadius: 3,\r\n+                        shadowOffset: { width: 0, height: 2 },\r\n                       }}\r\n                       onPress={() => setInfoBoxMinimized(false)}\r\n                     >\r\n                       <Image\r\n                         source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n-                        style={{ width: \"100%\", height: \"100%\" }}\r\n+                        style={{ width: \"100%\", height: \"100%\", borderRadius: 30 }}\r\n                       />\r\n                     </TouchableOpacity>\r\n                   ) : (\r\n-                    <>\r\n+                    <View\r\n+                      style={{\r\n+                        position: \"absolute\",\r\n+                        bottom: 85,\r\n+                        left: 20,\r\n+                        backgroundColor: \"#d1fcd3\",\r\n+                        padding: 10,\r\n+                        borderRadius: 10,\r\n+                        elevation: 5,\r\n+                        shadowColor: \"#000\",\r\n+                        shadowOpacity: 0.2,\r\n+                        shadowRadius: 3,\r\n+                        shadowOffset: { width: 0, height: 2 },\r\n+                      }}\r\n+                    >\r\n+                      {/* Driver info here */}\r\n                       <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n-                        {matchedDriver.selfieImage && (\r\n-                          <Image\r\n-                            source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n-                            style={{ width: 50, height: 50, borderRadius: 25, marginRight: 10 }}\r\n-                          />\r\n-                        )}\r\n-                        <View style={{ flex: 1 }}>\r\n-                          <Text style={{ fontWeight: \"bold\", color: \"#000\" }}>✅ Driver Found!</Text>\r\n-                          <Text>Name: {matchedDriver.driverName}</Text>\r\n-                          <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n-                          <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n+                        <Image\r\n+                          source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n+                          style={{ width: 40, height: 40, borderRadius: 20, marginRight: 10 }}\r\n+                        />\r\n+                        <View>\r\n+                          <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n+                          <Text style={{ fontSize: 12 }}>Name: {matchedDriver.driverName}</Text>\r\n+                          <Text style={{ fontSize: 12 }}>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n                         </View>\r\n                       </View>\r\n-                      <View style={{ flexDirection: \"row\", justifyContent: \"space-between\", marginTop: 10 }}>\r\n-                        <TouchableOpacity\r\n-                          onPress={() => setInfoBoxMinimized(true)}\r\n-                          style={{ backgroundColor: \"#81C3E1\", borderRadius: 5, padding: 5 }}\r\n-                        >\r\n-                          <Text style={{ color: \"white\" }}>Minimize</Text>\r\n-                        </TouchableOpacity>\r\n-                        <TouchableOpacity\r\n-                          onPress={async () => {\r\n-                            try {\r\n-                              await fetch(`${API_BASE_URL}/api/cancel-booking`, {\r\n-                                method: \"POST\",\r\n-                                headers: { \"Content-Type\": \"application/json\" },\r\n-                                body: JSON.stringify({ bookingId }),\r\n-                              });\r\n-                              console.log(\"✅ Ride cancellation sent to backend\");\r\n-                            } catch (err) {\r\n-                              console.error(\"❌ Failed to notify backend of cancellation\", err);\r\n-                            }\r\n+                      <TouchableOpacity\r\n+                        onPress={() => setInfoBoxMinimized(true)}\r\n+                        style={{\r\n+                          backgroundColor: \"#f44336\",\r\n+                          padding: 5,\r\n+                          borderRadius: 5,\r\n+                          marginTop: 5,\r\n+                        }}\r\n+                      >\r\n+                        <Text style={{ color: \"white\", textAlign: \"center\", fontSize: 12 }}>\r\n+                          MINIMIZE\r\n+                        </Text>\r\n+                      </TouchableOpacity>\r\n+                    </View>\r\n+                  )}\r\n \r\n-                            // Reset all state\r\n-                            setSearching(false);\r\n-                            setBookingId(null);\r\n-                            setMatchedDriver(null);\r\n-                            setDestination(null);\r\n-                            setBookingConfirmed(false);\r\n-\r\n-                            mapRef.current?.postMessage(\r\n-                              JSON.stringify({\r\n-                                type: \"setMarkers\",\r\n-                                destination: null,\r\n-                                driver: null,\r\n-                              })\r\n-                            );\r\n-\r\n-                            if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-                          }}\r\n-                          style={{ backgroundColor: \"#f44336\", borderRadius: 5, padding: 5 }}\r\n-                        >\r\n-                          <Text style={{ color: \"white\" }}>Cancel Ride</Text>\r\n-                        </TouchableOpacity>\r\n-                      </View>\r\n-                    </>\r\n-                  )}\r\n                 </View>\r\n               )}\r\n \r\n             </View>\r\n"
                },
                {
                    "date": 1748335165759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -439,9 +439,9 @@\n                   {infoBoxMinimized ? (\r\n                     <TouchableOpacity\r\n                       style={{\r\n                         position: \"absolute\",\r\n-                        bottom: 85, // or adjust slightly above bottom nav\r\n+                        bottom: 10,\r\n                         left: 20,\r\n                         width: 60,\r\n                         height: 60,\r\n                         borderRadius: 30,\r\n"
                },
                {
                    "date": 1748335208579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -439,74 +439,85 @@\n                   {infoBoxMinimized ? (\r\n                     <TouchableOpacity\r\n                       style={{\r\n                         position: \"absolute\",\r\n-                        bottom: 10,\r\n+                        bottom: 80, // above bottom nav\r\n                         left: 20,\r\n-                        width: 60,\r\n-                        height: 60,\r\n-                        borderRadius: 30,\r\n+                        width: 50,\r\n+                        height: 50,\r\n+                        borderRadius: 25,\r\n                         overflow: \"hidden\",\r\n-                        backgroundColor: \"#fff\",\r\n                         borderWidth: 2,\r\n-                        borderColor: \"#fff\",\r\n-                        elevation: 5,\r\n-                        shadowColor: \"#000\",\r\n-                        shadowOpacity: 0.3,\r\n-                        shadowRadius: 3,\r\n-                        shadowOffset: { width: 0, height: 2 },\r\n+                        borderColor: \"white\",\r\n+                        elevation: 3,\r\n                       }}\r\n                       onPress={() => setInfoBoxMinimized(false)}\r\n                     >\r\n                       <Image\r\n                         source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n-                        style={{ width: \"100%\", height: \"100%\", borderRadius: 30 }}\r\n+                        style={{ width: \"100%\", height: \"100%\" }}\r\n                       />\r\n                     </TouchableOpacity>\r\n                   ) : (\r\n-                    <View\r\n-                      style={{\r\n-                        position: \"absolute\",\r\n-                        bottom: 85,\r\n-                        left: 20,\r\n-                        backgroundColor: \"#d1fcd3\",\r\n-                        padding: 10,\r\n-                        borderRadius: 10,\r\n-                        elevation: 5,\r\n-                        shadowColor: \"#000\",\r\n-                        shadowOpacity: 0.2,\r\n-                        shadowRadius: 3,\r\n-                        shadowOffset: { width: 0, height: 2 },\r\n-                      }}\r\n-                    >\r\n-                      {/* Driver info here */}\r\n+                    <>\r\n                       <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n-                        <Image\r\n-                          source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n-                          style={{ width: 40, height: 40, borderRadius: 20, marginRight: 10 }}\r\n-                        />\r\n-                        <View>\r\n-                          <Text style={{ fontWeight: \"bold\" }}>✅ Driver Found!</Text>\r\n-                          <Text style={{ fontSize: 12 }}>Name: {matchedDriver.driverName}</Text>\r\n-                          <Text style={{ fontSize: 12 }}>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n+                        {matchedDriver.selfieImage && (\r\n+                          <Image\r\n+                            source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n+                            style={{ width: 50, height: 50, borderRadius: 25, marginRight: 10 }}\r\n+                          />\r\n+                        )}\r\n+                        <View style={{ flex: 1 }}>\r\n+                          <Text style={{ fontWeight: \"bold\", color: \"#000\" }}>✅ Driver Found!</Text>\r\n+                          <Text>Name: {matchedDriver.driverName}</Text>\r\n+                          <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n+                          <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n                         </View>\r\n                       </View>\r\n-                      <TouchableOpacity\r\n-                        onPress={() => setInfoBoxMinimized(true)}\r\n-                        style={{\r\n-                          backgroundColor: \"#f44336\",\r\n-                          padding: 5,\r\n-                          borderRadius: 5,\r\n-                          marginTop: 5,\r\n-                        }}\r\n-                      >\r\n-                        <Text style={{ color: \"white\", textAlign: \"center\", fontSize: 12 }}>\r\n-                          MINIMIZE\r\n-                        </Text>\r\n-                      </TouchableOpacity>\r\n-                    </View>\r\n+                      <View style={{ flexDirection: \"row\", justifyContent: \"space-between\", marginTop: 10 }}>\r\n+                        <TouchableOpacity\r\n+                          onPress={() => setInfoBoxMinimized(true)}\r\n+                          style={{ backgroundColor: \"#81C3E1\", borderRadius: 5, padding: 5 }}\r\n+                        >\r\n+                          <Text style={{ color: \"white\" }}>Minimize</Text>\r\n+                        </TouchableOpacity>\r\n+                        <TouchableOpacity\r\n+                          onPress={async () => {\r\n+                            try {\r\n+                              await fetch(`${API_BASE_URL}/api/cancel-booking`, {\r\n+                                method: \"POST\",\r\n+                                headers: { \"Content-Type\": \"application/json\" },\r\n+                                body: JSON.stringify({ bookingId }),\r\n+                              });\r\n+                              console.log(\"✅ Ride cancellation sent to backend\");\r\n+                            } catch (err) {\r\n+                              console.error(\"❌ Failed to notify backend of cancellation\", err);\r\n+                            }\r\n+\r\n+                            // Reset all state\r\n+                            setSearching(false);\r\n+                            setBookingId(null);\r\n+                            setMatchedDriver(null);\r\n+                            setDestination(null);\r\n+                            setBookingConfirmed(false);\r\n+\r\n+                            mapRef.current?.postMessage(\r\n+                              JSON.stringify({\r\n+                                type: \"setMarkers\",\r\n+                                destination: null,\r\n+                                driver: null,\r\n+                              })\r\n+                            );\r\n+\r\n+                            if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                          }}\r\n+                          style={{ backgroundColor: \"#f44336\", borderRadius: 5, padding: 5 }}\r\n+                        >\r\n+                          <Text style={{ color: \"white\" }}>Cancel Ride</Text>\r\n+                        </TouchableOpacity>\r\n+                      </View>\r\n+                    </>\r\n                   )}\r\n-\r\n                 </View>\r\n               )}\r\n \r\n             </View>\r\n"
                },
                {
                    "date": 1748335285234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -429,9 +429,9 @@\n                     bottom: 10, // just above the bottom nav\r\n                     left: 0,\r\n                     right: 0,\r\n                     marginHorizontal: 20,\r\n-                    backgroundColor: \"#d1fcd3\",\r\n+                    backgroundColor: \"#fff\",\r\n                     borderRadius: 10,\r\n                     padding: 10,\r\n                     elevation: 3,\r\n                   }}\r\n"
                },
                {
                    "date": 1748335675160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -429,34 +429,23 @@\n                     bottom: 10, // just above the bottom nav\r\n                     left: 0,\r\n                     right: 0,\r\n                     marginHorizontal: 20,\r\n-                    backgroundColor: \"#fff\",\r\n+                    backgroundColor: \"#d1fcd3\",\r\n                     borderRadius: 10,\r\n                     padding: 10,\r\n                     elevation: 3,\r\n                   }}\r\n                 >\r\n                   {infoBoxMinimized ? (\r\n                     <TouchableOpacity\r\n                       style={{\r\n-                        position: \"absolute\",\r\n-                        bottom: 80, // above bottom nav\r\n-                        left: 20,\r\n-                        width: 50,\r\n-                        height: 50,\r\n-                        borderRadius: 25,\r\n-                        overflow: \"hidden\",\r\n-                        borderWidth: 2,\r\n-                        borderColor: \"white\",\r\n-                        elevation: 3,\r\n+                        alignItems: \"center\",\r\n+                        padding: 10,\r\n                       }}\r\n                       onPress={() => setInfoBoxMinimized(false)}\r\n                     >\r\n-                      <Image\r\n-                        source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n-                        style={{ width: \"100%\", height: \"100%\" }}\r\n-                      />\r\n+                      <Text style={{ fontWeight: \"bold\", color: \"#000\" }}></Text>\r\n                     </TouchableOpacity>\r\n                   ) : (\r\n                     <>\r\n                       <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n"
                },
                {
                    "date": 1748335680429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -443,9 +443,9 @@\n                         padding: 10,\r\n                       }}\r\n                       onPress={() => setInfoBoxMinimized(false)}\r\n                     >\r\n-                      <Text style={{ fontWeight: \"bold\", color: \"#000\" }}></Text>\r\n+                      <Text style={{ fontWeight: \"bold\", color: \"#000\" }}>View Driver Info</Text>\r\n                     </TouchableOpacity>\r\n                   ) : (\r\n                     <>\r\n                       <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n"
                },
                {
                    "date": 1748336208700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,38 +331,30 @@\n   }, []);\r\n \r\n   useEffect(() => {\r\n     let interval;\r\n-    let alertShown = false; // ✅ new\r\n-\r\n     const pollForDriverMatch = async () => {\r\n       if (!bookingId) return;\r\n       try {\r\n         const res = await fetch(`${API_BASE_URL}/api/bookings`);\r\n         const allBookings = await res.json();\r\n         const myBooking = allBookings.find((b: any) => b && b.id === bookingId);\r\n-\r\n-        if (myBooking) {\r\n-          if (myBooking.status === \"accepted\" && !bookingConfirmed) {\r\n-            setBookingConfirmed(true);\r\n-            console.log(\"✅ Driver accepted the booking!\");\r\n-          }\r\n-          if (myBooking.driverConfirmed && !alertShown) {\r\n-            alertShown = true;\r\n-            Alert.alert(\"Driver Confirmed\", \"The driver confirmed your ride and is on the way!\");\r\n-          }\r\n+        if (myBooking && myBooking.status === \"accepted\" && !bookingConfirmed) {\r\n+          setBookingConfirmed(true);\r\n+          console.log(\"✅ Driver accepted the booking!\");\r\n+          Alert.alert(\"Driver Accepted!\", \"The driver has accepted your ride and is on the way!\");\r\n         }\r\n       } catch (err) {\r\n         console.error(\"❌ Poll error:\", err);\r\n       }\r\n     };\r\n-\r\n     interval = setInterval(pollForDriverMatch, 4000);\r\n     return () => clearInterval(interval);\r\n   }, [bookingId, bookingConfirmed]);\r\n \r\n \r\n \r\n+\r\n   if (loading || !location) return null;\r\n \r\n   return (\r\n     <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === \"ios\" ? \"padding\" : undefined} keyboardVerticalOffset={keyboardOffset}>\r\n"
                },
                {
                    "date": 1748350200647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -538,9 +538,9 @@\n             )}\r\n \r\n \r\n             <View style={styles.bottomNav}>\r\n-              <TouchableOpacity><Ionicons name=\"home\" size={30} color=\"black\" /><Text>Home</Text></TouchableOpacity>\r\n+              <TouchableOpacity onPress={() => router.push(\"./phome.tsx\")}><Ionicons name=\"home\" size={30} color=\"black\" /><Text>Home</Text></TouchableOpacity>\r\n               <TouchableOpacity><Ionicons name=\"document-text-outline\" size={30} color=\"black\" /><Text>History</Text></TouchableOpacity>\r\n               <TouchableOpacity><Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" /><Text>Chats</Text></TouchableOpacity>\r\n               <TouchableOpacity><Ionicons name=\"person-outline\" size={30} color=\"black\" /><Text>Profile</Text></TouchableOpacity>\r\n             </View>\r\n"
                },
                {
                    "date": 1748350221691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -538,9 +538,9 @@\n             )}\r\n \r\n \r\n             <View style={styles.bottomNav}>\r\n-              <TouchableOpacity onPress={() => router.push(\"./phome.tsx\")}><Ionicons name=\"home\" size={30} color=\"black\" /><Text>Home</Text></TouchableOpacity>\r\n+              <TouchableOpacity onPress={() => router.push(\"/homepassenger/phome\")}><Ionicons name=\"home\" size={30} color=\"black\" /><Text>Home</Text></TouchableOpacity>\r\n               <TouchableOpacity><Ionicons name=\"document-text-outline\" size={30} color=\"black\" /><Text>History</Text></TouchableOpacity>\r\n               <TouchableOpacity><Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" /><Text>Chats</Text></TouchableOpacity>\r\n               <TouchableOpacity><Ionicons name=\"person-outline\" size={30} color=\"black\" /><Text>Profile</Text></TouchableOpacity>\r\n             </View>\r\n"
                },
                {
                    "date": 1748350242082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -539,9 +539,9 @@\n \r\n \r\n             <View style={styles.bottomNav}>\r\n               <TouchableOpacity onPress={() => router.push(\"/homepassenger/phome\")}><Ionicons name=\"home\" size={30} color=\"black\" /><Text>Home</Text></TouchableOpacity>\r\n-              <TouchableOpacity><Ionicons name=\"document-text-outline\" size={30} color=\"black\" /><Text>History</Text></TouchableOpacity>\r\n+              <TouchableOpacity onPress={() => router.push(\"/homepassenger/phistory\")}><Ionicons name=\"document-text-outline\" size={30} color=\"black\" /><Text>History</Text></TouchableOpacity>\r\n               <TouchableOpacity><Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" /><Text>Chats</Text></TouchableOpacity>\r\n               <TouchableOpacity><Ionicons name=\"person-outline\" size={30} color=\"black\" /><Text>Profile</Text></TouchableOpacity>\r\n             </View>\r\n           </View>\r\n"
                },
                {
                    "date": 1748350260383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -540,10 +540,10 @@\n \r\n             <View style={styles.bottomNav}>\r\n               <TouchableOpacity onPress={() => router.push(\"/homepassenger/phome\")}><Ionicons name=\"home\" size={30} color=\"black\" /><Text>Home</Text></TouchableOpacity>\r\n               <TouchableOpacity onPress={() => router.push(\"/homepassenger/phistory\")}><Ionicons name=\"document-text-outline\" size={30} color=\"black\" /><Text>History</Text></TouchableOpacity>\r\n-              <TouchableOpacity><Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" /><Text>Chats</Text></TouchableOpacity>\r\n-              <TouchableOpacity><Ionicons name=\"person-outline\" size={30} color=\"black\" /><Text>Profile</Text></TouchableOpacity>\r\n+              <TouchableOpacity onPress={() => router.push(\"/homepassenger/pchats\")}><Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" /><Text>Chats</Text></TouchableOpacity>\r\n+              <TouchableOpacity onPress={() => router.push(\"/homepassenger/pprofile\")}><Ionicons name=\"person-outline\" size={30} color=\"black\" /><Text>Profile</Text></TouchableOpacity>\r\n             </View>\r\n           </View>\r\n         </View>\r\n       </TouchableWithoutFeedback>\r\n"
                },
                {
                    "date": 1748356701891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,569 @@\n+import React, { useState, useEffect, useRef } from \"react\";\r\n+import {\r\n+  View,\r\n+  Text,\r\n+  StyleSheet,\r\n+  Dimensions,\r\n+  TouchableOpacity,\r\n+  StatusBar,\r\n+  TextInput,\r\n+  Alert,\r\n+  KeyboardAvoidingView,\r\n+  Platform,\r\n+  TouchableWithoutFeedback,\r\n+  Keyboard,\r\n+  Image,\r\n+  BackHandler\r\n+} from \"react-native\";\r\n+import { WebView } from \"react-native-webview\";\r\n+import type { WebView as WebViewType } from \"react-native-webview\";\r\n+import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n+import { useLocation } from \"../location/GlobalLocation\";\r\n+import { router } from 'expo-router';\r\n+import AsyncStorage from '@react-native-async-storage/async-storage';\r\n+import { OSRM_BASE_URL, API_BASE_URL } from \"../../config\";\r\n+\r\n+const { width, height } = Dimensions.get(\"window\");\r\n+\r\n+\r\n+export default function PHome() {\r\n+  const { location, loading } = useLocation();\r\n+  const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n+  const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n+  const [notes, setNotes] = useState(\"\");\r\n+  const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n+  const [fare, setFare] = useState(20);\r\n+  const [mapHtml, setMapHtml] = useState(\"\");\r\n+  const mapRef = useRef<WebViewType>(null);\r\n+  const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n+  const [matchedDriver, setMatchedDriver] = useState<{\r\n+    driverName: string;\r\n+    driverId: string;\r\n+    franchiseNumber: string;\r\n+    experienceYears: string;\r\n+    selfieImage: string;\r\n+    location: { latitude: number; longitude: number }; \r\n+  } | null>(null);\r\n+  const [bookingConfirmed, setBookingConfirmed] = useState(false);\r\n+  const [bookingId, setBookingId] = useState(null);\r\n+  const [showBookingForm, setShowBookingForm] = useState(false); \r\n+  const [searching, setSearching] = useState(false);\r\n+  const searchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n+  const [infoBoxMinimized, setInfoBoxMinimized] = useState(false);\r\n+\r\n+  \r\n+  \r\n+\r\n+  useEffect(() => {\r\n+    const backAction = () => {\r\n+      Alert.alert(\"Logout Confirmation\", \"Do you want to log out?\", [\r\n+        {\r\n+          text: \"Cancel\",\r\n+          onPress: () => null,\r\n+          style: \"cancel\"\r\n+        },\r\n+        {\r\n+          text: \"Logout\",\r\n+          onPress: async () => {\r\n+            await AsyncStorage.removeItem(\"passengerId\");\r\n+            router.replace(\"/login_and_reg/plogin\"); \r\n+          }\r\n+        }\r\n+      ]);\r\n+      return true; \r\n+    };\r\n+\r\n+    const backHandler = BackHandler.addEventListener(\r\n+      \"hardwareBackPress\",\r\n+      backAction\r\n+    );\r\n+    return () => backHandler.remove();\r\n+  }, []);\r\n+\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    if (!location) return;\r\n+\r\n+    const html = `\r\n+      <!DOCTYPE html>\r\n+      <html>\r\n+        <head>\r\n+          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n+          <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n+          <style>\r\n+            html, body, #map {\r\n+              height: 100%;\r\n+              margin: 0;\r\n+              padding: 0;\r\n+              overflow: hidden;\r\n+              touch-action: auto;\r\n+            }\r\n+            .leaflet-control-zoom { top: 10px !important; left: 10px !important; }\r\n+\r\n+            .driver-label {\r\n+              font-weight: bold;\r\n+              color: red;\r\n+              background: white;\r\n+              padding: 2px 5px;\r\n+              border-radius: 4px;\r\n+              font-size: 14px;\r\n+            }\r\n+          </style>\r\n+        </head>\r\n+        <body>\r\n+          <div id=\"map\"></div>\r\n+          <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n+          <script>\r\n+            window.onload = function () {\r\n+              const map = L.map('map', {\r\n+                zoomControl: false,\r\n+                dragging: true,\r\n+                scrollWheelZoom: true,\r\n+                touchZoom: true,\r\n+                doubleClickZoom: true,\r\n+                boxZoom: true,\r\n+              }).setView([${location.latitude}, ${location.longitude}], 15);\r\n+\r\n+              L.control.zoom({ position: 'topleft' }).addTo(map);\r\n+\r\n+              L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n+                maxZoom: 19,\r\n+                attribution: '© OpenStreetMap contributors'\r\n+              }).addTo(map);\r\n+\r\n+              const currentMarker = L.marker([${location.latitude}, ${location.longitude}], {\r\n+                icon: L.icon({\r\n+                  iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png',\r\n+                  iconSize: [30, 30],\r\n+                })\r\n+              }).addTo(map).bindTooltip(\"You\", { permanent: true, direction: \"top\" });\r\n+\r\n+              let destMarker = null;\r\n+              let driverMarker = null;\r\n+\r\n+              let destinationLocked = false;\r\n+              map.on('click', function(e) {\r\n+                if (destinationLocked) return;\r\n+\r\n+                const { lat, lng } = e.latlng;\r\n+                if (destMarker) map.removeLayer(destMarker);\r\n+                destMarker = L.marker([lat, lng], {\r\n+                  icon: L.icon({\r\n+                    iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n+                    iconSize: [30, 30],\r\n+                  })\r\n+                }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n+\r\n+                window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n+              });\r\n+              document.addEventListener('message', function(event) {\r\n+                const msg = JSON.parse(event.data);\r\n+                window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n+\r\n+                if (msg.type === 'setMarkers') {\r\n+                  destinationLocked = !!msg.driver;\r\n+                  if (msg.driver) {\r\n+                    const { latitude, longitude } = msg.driver;\r\n+                    window.ReactNativeWebView.postMessage(\"✅ DRIVER FOUND AT: \" + latitude + \", \" + longitude);\r\n+                  } else {\r\n+                    window.ReactNativeWebView.postMessage(\"❌ NO DRIVER IN MESSAGE\");\r\n+                  }\r\n+\r\n+                  if (destMarker) map.removeLayer(destMarker);\r\n+                  if (msg.destination) {\r\n+                    destMarker = L.marker([msg.destination.latitude, msg.destination.longitude], {\r\n+                      icon: L.icon({\r\n+                        iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n+                        iconSize: [30, 30],\r\n+                      })\r\n+                    }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n+                  }\r\n+\r\n+                  if (driverMarker) map.removeLayer(driverMarker);\r\n+                  if (msg.driver) {\r\n+                    const { latitude, longitude } = msg.driver;\r\n+                    window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER REQUESTED: \" + JSON.stringify(msg.driver));\r\n+\r\n+                    L.circle([latitude, longitude], {\r\n+                      color: 'red',\r\n+                      radius: 10,\r\n+                      fillOpacity: 0.9\r\n+                    }).addTo(map);\r\n+\r\n+                    driverMarker = L.marker([latitude, longitude], {\r\n+                      icon: L.icon({\r\n+                        iconUrl: 'https://cdn-icons-png.flaticon.com/512/2972/2972185.png', \r\n+                        iconSize: [40, 40],\r\n+                        iconAnchor: [20, 40],\r\n+                      })\r\n+                    }).addTo(map).bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\" })\r\n+                      .setZIndexOffset(1000);\r\n+                  }\r\n+                }\r\n+              });\r\n+            }\r\n+          </script>\r\n+\r\n+        </body>\r\n+      </html>\r\n+    `;\r\n+\r\n+    setMapHtml(html);\r\n+  }, [location]);\r\n+    \r\n+\r\n+  useEffect(() => {\r\n+    if (!mapRef.current || bookingConfirmed) return;\r\n+\r\n+    const driverCoords = matchedDriver?.location\r\n+      ? {\r\n+          latitude: matchedDriver.location.latitude,\r\n+          longitude: matchedDriver.location.longitude,\r\n+        }\r\n+      : null;\r\n+\r\n+    if (driverCoords && destination) {\r\n+      console.log(\"📤 Sending to WebView:\", {\r\n+        type: \"setMarkers\",\r\n+        destination,\r\n+        driver: driverCoords,\r\n+      });\r\n+\r\n+      mapRef.current.postMessage(\r\n+        JSON.stringify({\r\n+          type: \"setMarkers\",\r\n+          destination,\r\n+          driver: driverCoords,\r\n+        })\r\n+      );\r\n+    }\r\n+  }, [destination, matchedDriver, bookingConfirmed]);\r\n+\r\n+\r\n+  const handleBookNow = async () => {\r\n+    if (!location || !destination) {\r\n+      Alert.alert(\"Missing location info\");\r\n+      return;\r\n+    }\r\n+    const passengerId = await AsyncStorage.getItem(\"passengerId\");\r\n+\r\n+    const bookingData = {\r\n+      pickupLat: location.latitude,\r\n+      pickupLng: location.longitude,\r\n+      destinationLat: destination.latitude,\r\n+      destinationLng: destination.longitude,\r\n+      fare,\r\n+      paymentMethod,\r\n+      notes,\r\n+      passengerId\r\n+    };\r\n+\r\n+    try {\r\n+      setShowBookingForm(false); // hide form\r\n+      setSearching(true);        // show searching state\r\n+\r\n+      const response = await fetch(`${API_BASE_URL}/api/book`, {\r\n+        method: \"POST\",\r\n+        headers: { \"Content-Type\": \"application/json\" },\r\n+        body: JSON.stringify(bookingData),\r\n+      });\r\n+\r\n+      const result = await response.json();\r\n+      if (!response.ok) throw new Error(result.message || \"Something went wrong\");\r\n+\r\n+      setBookingId(result.booking.id);\r\n+\r\n+      // Start polling for driver for up to 10 minutes\r\n+      const maxWaitTime = 10 * 60 * 1000; // 10 minutes\r\n+      const startTime = Date.now();\r\n+\r\n+      const poll = async () => {\r\n+        try {\r\n+          const [driverRes, statusRes] = await Promise.all([\r\n+            fetch(`${API_BASE_URL}/api/driver/${result.booking.driverId}`),\r\n+            fetch(`${API_BASE_URL}/api/driver-status/${result.booking.driverId}`)\r\n+          ]);\r\n+\r\n+          const driverData = await driverRes.json();\r\n+          const statusData = await statusRes.json();\r\n+\r\n+          if (driverData?.driver) {\r\n+            setMatchedDriver({\r\n+              driverName: driverData.driver.driverName,\r\n+              driverId: driverData.driver._id,\r\n+              franchiseNumber: driverData.driver.franchiseNumber || \"N/A\",\r\n+              experienceYears: driverData.driver.experienceYears || \"N/A\",\r\n+              selfieImage: driverData.driver.selfieImage || \"N/A\",\r\n+              location: statusData.location || null, // Live GPS\r\n+            });\r\n+\r\n+            setSearching(false);\r\n+            return;\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(\"⏳ Still waiting for driver...\");\r\n+        }\r\n+\r\n+        if (Date.now() - startTime < maxWaitTime) {\r\n+          searchTimeoutRef.current = setTimeout(poll, 5000); // try again in 5 sec\r\n+        } else {\r\n+          setSearching(false); // stop searching silently\r\n+          console.log(\"❌ No driver found within 10 minutes.\");\r\n+        }\r\n+      };\r\n+\r\n+      poll(); // start polling\r\n+    } catch (error) {\r\n+      console.error(\"❌ Booking error:\", error);\r\n+      Alert.alert(\"Error\", \"Failed to send booking. Please try again.\");\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => setKeyboardOffset(-35));\r\n+    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => setKeyboardOffset(0));\r\n+    return () => {\r\n+      showSub.remove();\r\n+      hideSub.remove();\r\n+    };\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    let interval;\r\n+    const pollForDriverMatch = async () => {\r\n+      if (!bookingId) return;\r\n+      try {\r\n+        const res = await fetch(`${API_BASE_URL}/api/bookings`);\r\n+        const allBookings = await res.json();\r\n+        const myBooking = allBookings.find((b: any) => b && b.id === bookingId);\r\n+        if (myBooking && myBooking.status === \"accepted\" && !bookingConfirmed) {\r\n+          setBookingConfirmed(true);\r\n+          console.log(\"✅ Driver accepted the booking!\");\r\n+          Alert.alert(\"Driver Accepted!\", \"The driver has accepted your ride and is on the way!\");\r\n+        }\r\n+      } catch (err) {\r\n+        console.error(\"❌ Poll error:\", err);\r\n+      }\r\n+    };\r\n+    interval = setInterval(pollForDriverMatch, 4000);\r\n+    return () => clearInterval(interval);\r\n+  }, [bookingId, bookingConfirmed]);\r\n+\r\n+\r\n+\r\n+\r\n+  if (loading || !location) return null;\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === \"ios\" ? \"padding\" : undefined} keyboardVerticalOffset={keyboardOffset}>\r\n+      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n+        <View style={styles.container}>\r\n+          <StatusBar barStyle=\"light-content\" translucent backgroundColor=\"black\" />\r\n+          {mapHtml && (\r\n+            <WebView\r\n+              ref={(ref) => {\r\n+                if (ref && !mapRef.current) {\r\n+                  mapRef.current = ref;\r\n+                }\r\n+              }}\r\n+              originWhitelist={[\"*\"]}\r\n+              source={{ html: mapHtml }}\r\n+              javaScriptEnabled={true}\r\n+              style={{\r\n+                position: \"absolute\",\r\n+                top: 0,\r\n+                left: 0,\r\n+                right: 0,\r\n+                bottom: 0,\r\n+                zIndex: 0,\r\n+              }}\r\n+              onMessage={(event) => {\r\n+                console.log(\"✅ Received from WebView:\", event.nativeEvent.data);\r\n+                const msg = event.nativeEvent.data;\r\n+                console.log(\"📥 WebView message:\", msg);\r\n+\r\n+                try {\r\n+                  const parsed = JSON.parse(msg);\r\n+                  if (parsed.latitude && parsed.longitude) {\r\n+                    setDestination(parsed);\r\n+                  }\r\n+                } catch (e) {\r\n+                  // Debug string from inside the WebView like \"🧭 DRIVER MARKER: ...\"\r\n+                }\r\n+              }}\r\n+            />\r\n+          )}\r\n+\r\n+          <View style={styles.overlayContainer}>\r\n+            <View style={styles.overlay}>\r\n+              {searching && (\r\n+                <View style={{ backgroundColor: \"#fff3cd\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n+                  <Text style={{ fontWeight: \"bold\" }}>🔍 Finding a driver...</Text>\r\n+                  <TouchableOpacity\r\n+                    onPress={() => {\r\n+                      setSearching(false);\r\n+                      setBookingId(null);\r\n+                      if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                    }}\r\n+                    style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n+                  >\r\n+                    <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+              )}\r\n+\r\n+              {matchedDriver && (\r\n+                <View\r\n+                  style={{\r\n+                    position: \"absolute\",\r\n+                    bottom: 10, // just above the bottom nav\r\n+                    left: 0,\r\n+                    right: 0,\r\n+                    marginHorizontal: 20,\r\n+                    backgroundColor: \"#d1fcd3\",\r\n+                    borderRadius: 10,\r\n+                    padding: 10,\r\n+                    elevation: 3,\r\n+                  }}\r\n+                >\r\n+                  {infoBoxMinimized ? (\r\n+                    <TouchableOpacity\r\n+                      style={{\r\n+                        alignItems: \"center\",\r\n+                        padding: 10,\r\n+                      }}\r\n+                      onPress={() => setInfoBoxMinimized(false)}\r\n+                    >\r\n+                      <Text style={{ fontWeight: \"bold\", color: \"#000\" }}>View Driver Info</Text>\r\n+                    </TouchableOpacity>\r\n+                  ) : (\r\n+                    <>\r\n+                      <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n+                        {matchedDriver.selfieImage && (\r\n+                          <Image\r\n+                            source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n+                            style={{ width: 50, height: 50, borderRadius: 25, marginRight: 10 }}\r\n+                          />\r\n+                        )}\r\n+                        <View style={{ flex: 1 }}>\r\n+                          <Text style={{ fontWeight: \"bold\", color: \"#000\" }}>✅ Driver Found!</Text>\r\n+                          <Text>Name: {matchedDriver.driverName}</Text>\r\n+                          <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n+                          <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n+                        </View>\r\n+                      </View>\r\n+                      <View style={{ flexDirection: \"row\", justifyContent: \"space-between\", marginTop: 10 }}>\r\n+                        <TouchableOpacity\r\n+                          onPress={() => setInfoBoxMinimized(true)}\r\n+                          style={{ backgroundColor: \"#81C3E1\", borderRadius: 5, padding: 5 }}\r\n+                        >\r\n+                          <Text style={{ color: \"white\" }}>Minimize</Text>\r\n+                        </TouchableOpacity>\r\n+                        <TouchableOpacity\r\n+                          onPress={async () => {\r\n+                            try {\r\n+                              await fetch(`${API_BASE_URL}/api/cancel-booking`, {\r\n+                                method: \"POST\",\r\n+                                headers: { \"Content-Type\": \"application/json\" },\r\n+                                body: JSON.stringify({ bookingId }),\r\n+                              });\r\n+                              console.log(\"✅ Ride cancellation sent to backend\");\r\n+                            } catch (err) {\r\n+                              console.error(\"❌ Failed to notify backend of cancellation\", err);\r\n+                            }\r\n+\r\n+                            // Reset all state\r\n+                            setSearching(false);\r\n+                            setBookingId(null);\r\n+                            setMatchedDriver(null);\r\n+                            setDestination(null);\r\n+                            setBookingConfirmed(false);\r\n+\r\n+                            mapRef.current?.postMessage(\r\n+                              JSON.stringify({\r\n+                                type: \"setMarkers\",\r\n+                                destination: null,\r\n+                                driver: null,\r\n+                              })\r\n+                            );\r\n+\r\n+                            if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n+                          }}\r\n+                          style={{ backgroundColor: \"#f44336\", borderRadius: 5, padding: 5 }}\r\n+                        >\r\n+                          <Text style={{ color: \"white\" }}>Cancel Ride</Text>\r\n+                        </TouchableOpacity>\r\n+                      </View>\r\n+                    </>\r\n+                  )}\r\n+                </View>\r\n+              )}\r\n+\r\n+            </View>\r\n+            {showBookingForm && (\r\n+              <View style={styles.card}>\r\n+                <View style={styles.cardHeader} />\r\n+                <View style={styles.inputBox}>\r\n+                  <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n+                  <Text style={styles.inputText}>\r\n+                    {destination ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}` : \"Saan ka papunta ngayon?\"}\r\n+                  </Text>\r\n+                  <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+                </View>\r\n+                <TextInput style={styles.inputBoxSimple} placeholder=\"Name this location (optional: Home, Work, etc.)\" value={destinationLabel} onChangeText={setDestinationLabel} />\r\n+                <TextInput style={styles.inputBoxSimple} placeholder=\"Notes sa driver\" value={notes} onChangeText={setNotes} />\r\n+                <TextInput style={styles.inputBox} placeholder=\"Paano ka magbabayad\" value={paymentMethod} onChangeText={setPaymentMethod} />\r\n+                <View style={styles.totalFareContainer}>\r\n+                  <View style={styles.fareBox}><Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text></View>\r\n+                  <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}><Text style={styles.bookNowText}>BOOK NOW</Text></TouchableOpacity>\r\n+                </View>\r\n+              </View>\r\n+            )}\r\n+\r\n+            {!matchedDriver && !searching && !showBookingForm && (\r\n+              <TouchableOpacity\r\n+                onPress={() => setShowBookingForm(true)}\r\n+                style={{\r\n+                  position: \"absolute\",\r\n+                  bottom: 85,\r\n+                  backgroundColor: \"#81C3E1\",\r\n+                  padding: 10,\r\n+                  borderRadius: 8,\r\n+                }}\r\n+              >\r\n+                <Text style={{ fontWeight: \"bold\", fontSize: 16, color: \"white\" }}>START BOOKING</Text>\r\n+              </TouchableOpacity>\r\n+            )}\r\n+\r\n+\r\n+            <View style={styles.bottomNav}>\r\n+              <TouchableOpacity onPress={() => router.push(\"/homepassenger/phome\")}><Ionicons name=\"home\" size={30} color=\"black\" /><Text>Home</Text></TouchableOpacity>\r\n+              <TouchableOpacity onPress={() => router.push(\"/homepassenger/phistory\")}><Ionicons name=\"document-text-outline\" size={30} color=\"black\" /><Text>History</Text></TouchableOpacity>\r\n+              <TouchableOpacity onPress={() => router.push(\"/homepassenger/pchats\")}><Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" /><Text>Chats</Text></TouchableOpacity>\r\n+              <TouchableOpacity onPress={() => router.push(\"/homepassenger/pprofile\")}><Ionicons name=\"person-outline\" size={30} color=\"black\" /><Text>Profile</Text></TouchableOpacity>\r\n+            </View>\r\n+          </View>\r\n+        </View>\r\n+      </TouchableWithoutFeedback>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n+\r\n+const styles = StyleSheet.create({\r\n+  container: {paddingTop: 30 ,flex: 1, backgroundColor: \"#fff\" },\r\n+  overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n+  overlay: {width: width, margin: 60},\r\n+  card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n+  cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n+  inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n+  inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n+  inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n+  totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n+  fareBox: { flex: 1, borderRadius: 3, backgroundColor: \"white\", justifyContent: \"center\", paddingHorizontal: 5, marginRight: 5, width: '50%' },\r\n+  totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n+  bookNowButton: { flex: 1, backgroundColor: \"white\", borderRadius: 8, alignItems: \"center\", justifyContent: \"center\", padding: 5, marginLeft: 5, width: '50%' },\r\n+  bookNowText: { fontSize: 16 },\r\n+  bottomNav: { position: \"absolute\", bottom: 0, flexDirection: \"row\", justifyContent: \"space-around\", width: width, height: 70, backgroundColor: \"white\", borderTopLeftRadius: 30, borderTopRightRadius: 30, alignItems: \"center\", borderWidth: 1, borderColor: \"black\" },\r\n+});\r\n"
                },
                {
                    "date": 1748428167422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -566,573 +566,4 @@\n   bookNowButton: { flex: 1, backgroundColor: \"white\", borderRadius: 8, alignItems: \"center\", justifyContent: \"center\", padding: 5, marginLeft: 5, width: '50%' },\r\n   bookNowText: { fontSize: 16 },\r\n   bottomNav: { position: \"absolute\", bottom: 0, flexDirection: \"row\", justifyContent: \"space-around\", width: width, height: 70, backgroundColor: \"white\", borderTopLeftRadius: 30, borderTopRightRadius: 30, alignItems: \"center\", borderWidth: 1, borderColor: \"black\" },\r\n });\r\n-import React, { useState, useEffect, useRef } from \"react\";\r\n-import {\r\n-  View,\r\n-  Text,\r\n-  StyleSheet,\r\n-  Dimensions,\r\n-  TouchableOpacity,\r\n-  StatusBar,\r\n-  TextInput,\r\n-  Alert,\r\n-  KeyboardAvoidingView,\r\n-  Platform,\r\n-  TouchableWithoutFeedback,\r\n-  Keyboard,\r\n-  Image,\r\n-  BackHandler\r\n-} from \"react-native\";\r\n-import { WebView } from \"react-native-webview\";\r\n-import type { WebView as WebViewType } from \"react-native-webview\";\r\n-import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n-import { useLocation } from \"../location/GlobalLocation\";\r\n-import { router } from 'expo-router'; // or useNavigation if you're using react-navigation\r\n-import AsyncStorage from '@react-native-async-storage/async-storage';\r\n-import { OSRM_BASE_URL, API_BASE_URL } from \"../../config\";\r\n-\r\n-const { width, height } = Dimensions.get(\"window\");\r\n-\r\n-\r\n-export default function PHome() {\r\n-  const { location, loading } = useLocation();\r\n-  const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n-  const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n-  const [notes, setNotes] = useState(\"\");\r\n-  const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n-  const [fare, setFare] = useState(20);\r\n-  const [mapHtml, setMapHtml] = useState(\"\");\r\n-  const mapRef = useRef<WebViewType>(null);\r\n-  const [keyboardOffset, setKeyboardOffset] = useState(0);\r\n-  const [matchedDriver, setMatchedDriver] = useState<{\r\n-    driverName: string;\r\n-    driverId: string;\r\n-    franchiseNumber: string;\r\n-    experienceYears: string;\r\n-    selfieImage: string;\r\n-    location: { latitude: number; longitude: number }; \r\n-  } | null>(null);\r\n-  const [bookingConfirmed, setBookingConfirmed] = useState(false);\r\n-  const [bookingId, setBookingId] = useState(null);\r\n-  const [showBookingForm, setShowBookingForm] = useState(false); \r\n-  const [searching, setSearching] = useState(false);\r\n-  const searchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n-  const [infoBoxMinimized, setInfoBoxMinimized] = useState(false);\r\n-\r\n-  \r\n-  \r\n-\r\n-  useEffect(() => {\r\n-    const backAction = () => {\r\n-      Alert.alert(\"Logout Confirmation\", \"Do you want to log out?\", [\r\n-        {\r\n-          text: \"Cancel\",\r\n-          onPress: () => null,\r\n-          style: \"cancel\"\r\n-        },\r\n-        {\r\n-          text: \"Logout\",\r\n-          onPress: async () => {\r\n-            await AsyncStorage.removeItem(\"passengerId\");\r\n-            router.replace(\"/login_and_reg/plogin\"); \r\n-          }\r\n-        }\r\n-      ]);\r\n-      return true; \r\n-    };\r\n-\r\n-    const backHandler = BackHandler.addEventListener(\r\n-      \"hardwareBackPress\",\r\n-      backAction\r\n-    );\r\n-    return () => backHandler.remove();\r\n-  }, []);\r\n-\r\n-\r\n-\r\n-  useEffect(() => {\r\n-    if (!location) return;\r\n-\r\n-    const html = `\r\n-      <!DOCTYPE html>\r\n-      <html>\r\n-        <head>\r\n-          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n-          <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n-          <style>\r\n-            html, body, #map {\r\n-              height: 100%;\r\n-              margin: 0;\r\n-              padding: 0;\r\n-              overflow: hidden;\r\n-              touch-action: auto;\r\n-            }\r\n-            .leaflet-control-zoom { top: 10px !important; left: 10px !important; }\r\n-\r\n-            .driver-label {\r\n-              font-weight: bold;\r\n-              color: red;\r\n-              background: white;\r\n-              padding: 2px 5px;\r\n-              border-radius: 4px;\r\n-              font-size: 14px;\r\n-            }\r\n-          </style>\r\n-        </head>\r\n-        <body>\r\n-          <div id=\"map\"></div>\r\n-          <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n-          <script>\r\n-            window.onload = function () {\r\n-              const map = L.map('map', {\r\n-                zoomControl: false,\r\n-                dragging: true,\r\n-                scrollWheelZoom: true,\r\n-                touchZoom: true,\r\n-                doubleClickZoom: true,\r\n-                boxZoom: true,\r\n-              }).setView([${location.latitude}, ${location.longitude}], 15);\r\n-\r\n-              L.control.zoom({ position: 'topleft' }).addTo(map);\r\n-\r\n-              L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\r\n-                maxZoom: 19,\r\n-                attribution: '© OpenStreetMap contributors'\r\n-              }).addTo(map);\r\n-\r\n-              const currentMarker = L.marker([${location.latitude}, ${location.longitude}], {\r\n-                icon: L.icon({\r\n-                  iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png',\r\n-                  iconSize: [30, 30],\r\n-                })\r\n-              }).addTo(map).bindTooltip(\"You\", { permanent: true, direction: \"top\" });\r\n-\r\n-              let destMarker = null;\r\n-              let driverMarker = null;\r\n-\r\n-              let destinationLocked = false;\r\n-              map.on('click', function(e) {\r\n-                if (destinationLocked) return;\r\n-\r\n-                const { lat, lng } = e.latlng;\r\n-                if (destMarker) map.removeLayer(destMarker);\r\n-                destMarker = L.marker([lat, lng], {\r\n-                  icon: L.icon({\r\n-                    iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n-                    iconSize: [30, 30],\r\n-                  })\r\n-                }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n-\r\n-                window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n-              });\r\n-              document.addEventListener('message', function(event) {\r\n-                const msg = JSON.parse(event.data);\r\n-                window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n-\r\n-                if (msg.type === 'setMarkers') {\r\n-                  destinationLocked = !!msg.driver;\r\n-                  if (msg.driver) {\r\n-                    const { latitude, longitude } = msg.driver;\r\n-                    window.ReactNativeWebView.postMessage(\"✅ DRIVER FOUND AT: \" + latitude + \", \" + longitude);\r\n-                  } else {\r\n-                    window.ReactNativeWebView.postMessage(\"❌ NO DRIVER IN MESSAGE\");\r\n-                  }\r\n-\r\n-                  if (destMarker) map.removeLayer(destMarker);\r\n-                  if (msg.destination) {\r\n-                    destMarker = L.marker([msg.destination.latitude, msg.destination.longitude], {\r\n-                      icon: L.icon({\r\n-                        iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n-                        iconSize: [30, 30],\r\n-                      })\r\n-                    }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n-                  }\r\n-\r\n-                  if (driverMarker) map.removeLayer(driverMarker);\r\n-                  if (msg.driver) {\r\n-                    const { latitude, longitude } = msg.driver;\r\n-                    window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER REQUESTED: \" + JSON.stringify(msg.driver));\r\n-\r\n-                    L.circle([latitude, longitude], {\r\n-                      color: 'red',\r\n-                      radius: 10,\r\n-                      fillOpacity: 0.9\r\n-                    }).addTo(map);\r\n-\r\n-                    driverMarker = L.marker([latitude, longitude], {\r\n-                      icon: L.icon({\r\n-                        iconUrl: 'https://cdn-icons-png.flaticon.com/512/2972/2972185.png', \r\n-                        iconSize: [40, 40],\r\n-                        iconAnchor: [20, 40],\r\n-                      })\r\n-                    }).addTo(map).bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\" })\r\n-                      .setZIndexOffset(1000);\r\n-                  }\r\n-                }\r\n-              });\r\n-            }\r\n-          </script>\r\n-\r\n-        </body>\r\n-      </html>\r\n-    `;\r\n-\r\n-    setMapHtml(html);\r\n-  }, [location]);\r\n-    \r\n-\r\n-  useEffect(() => {\r\n-    if (!mapRef.current || bookingConfirmed) return;\r\n-\r\n-    const driverCoords = matchedDriver?.location\r\n-      ? {\r\n-          latitude: matchedDriver.location.latitude,\r\n-          longitude: matchedDriver.location.longitude,\r\n-        }\r\n-      : null;\r\n-\r\n-    if (driverCoords && destination) {\r\n-      console.log(\"📤 Sending to WebView:\", {\r\n-        type: \"setMarkers\",\r\n-        destination,\r\n-        driver: driverCoords,\r\n-      });\r\n-\r\n-      mapRef.current.postMessage(\r\n-        JSON.stringify({\r\n-          type: \"setMarkers\",\r\n-          destination,\r\n-          driver: driverCoords,\r\n-        })\r\n-      );\r\n-    }\r\n-  }, [destination, matchedDriver, bookingConfirmed]);\r\n-\r\n-\r\n-  const handleBookNow = async () => {\r\n-    if (!location || !destination) {\r\n-      Alert.alert(\"Missing location info\");\r\n-      return;\r\n-    }\r\n-    const passengerId = await AsyncStorage.getItem(\"passengerId\");\r\n-\r\n-    const bookingData = {\r\n-      pickupLat: location.latitude,\r\n-      pickupLng: location.longitude,\r\n-      destinationLat: destination.latitude,\r\n-      destinationLng: destination.longitude,\r\n-      fare,\r\n-      paymentMethod,\r\n-      notes,\r\n-      passengerId\r\n-    };\r\n-\r\n-    try {\r\n-      setShowBookingForm(false); // hide form\r\n-      setSearching(true);        // show searching state\r\n-\r\n-      const response = await fetch(`${API_BASE_URL}/api/book`, {\r\n-        method: \"POST\",\r\n-        headers: { \"Content-Type\": \"application/json\" },\r\n-        body: JSON.stringify(bookingData),\r\n-      });\r\n-\r\n-      const result = await response.json();\r\n-      if (!response.ok) throw new Error(result.message || \"Something went wrong\");\r\n-\r\n-      setBookingId(result.booking.id);\r\n-\r\n-      // Start polling for driver for up to 10 minutes\r\n-      const maxWaitTime = 10 * 60 * 1000; // 10 minutes\r\n-      const startTime = Date.now();\r\n-\r\n-      const poll = async () => {\r\n-        try {\r\n-          const [driverRes, statusRes] = await Promise.all([\r\n-            fetch(`${API_BASE_URL}/api/driver/${result.booking.driverId}`),\r\n-            fetch(`${API_BASE_URL}/api/driver-status/${result.booking.driverId}`)\r\n-          ]);\r\n-\r\n-          const driverData = await driverRes.json();\r\n-          const statusData = await statusRes.json();\r\n-\r\n-          if (driverData?.driver) {\r\n-            setMatchedDriver({\r\n-              driverName: driverData.driver.driverName,\r\n-              driverId: driverData.driver._id,\r\n-              franchiseNumber: driverData.driver.franchiseNumber || \"N/A\",\r\n-              experienceYears: driverData.driver.experienceYears || \"N/A\",\r\n-              selfieImage: driverData.driver.selfieImage || \"N/A\",\r\n-              location: statusData.location || null, // Live GPS\r\n-            });\r\n-\r\n-            setSearching(false);\r\n-            return;\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(\"⏳ Still waiting for driver...\");\r\n-        }\r\n-\r\n-        if (Date.now() - startTime < maxWaitTime) {\r\n-          searchTimeoutRef.current = setTimeout(poll, 5000); // try again in 5 sec\r\n-        } else {\r\n-          setSearching(false); // stop searching silently\r\n-          console.log(\"❌ No driver found within 10 minutes.\");\r\n-        }\r\n-      };\r\n-\r\n-      poll(); // start polling\r\n-    } catch (error) {\r\n-      console.error(\"❌ Booking error:\", error);\r\n-      Alert.alert(\"Error\", \"Failed to send booking. Please try again.\");\r\n-      setSearching(false);\r\n-    }\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const hideSub = Keyboard.addListener(\"keyboardDidHide\", () => setKeyboardOffset(-35));\r\n-    const showSub = Keyboard.addListener(\"keyboardDidShow\", () => setKeyboardOffset(0));\r\n-    return () => {\r\n-      showSub.remove();\r\n-      hideSub.remove();\r\n-    };\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    let interval;\r\n-    const pollForDriverMatch = async () => {\r\n-      if (!bookingId) return;\r\n-      try {\r\n-        const res = await fetch(`${API_BASE_URL}/api/bookings`);\r\n-        const allBookings = await res.json();\r\n-        const myBooking = allBookings.find((b: any) => b && b.id === bookingId);\r\n-        if (myBooking && myBooking.status === \"accepted\" && !bookingConfirmed) {\r\n-          setBookingConfirmed(true);\r\n-          console.log(\"✅ Driver accepted the booking!\");\r\n-          Alert.alert(\"Driver Accepted!\", \"The driver has accepted your ride and is on the way!\");\r\n-        }\r\n-      } catch (err) {\r\n-        console.error(\"❌ Poll error:\", err);\r\n-      }\r\n-    };\r\n-    interval = setInterval(pollForDriverMatch, 4000);\r\n-    return () => clearInterval(interval);\r\n-  }, [bookingId, bookingConfirmed]);\r\n-\r\n-\r\n-\r\n-\r\n-  if (loading || !location) return null;\r\n-\r\n-  return (\r\n-    <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === \"ios\" ? \"padding\" : undefined} keyboardVerticalOffset={keyboardOffset}>\r\n-      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n-        <View style={styles.container}>\r\n-          <StatusBar barStyle=\"light-content\" translucent backgroundColor=\"black\" />\r\n-          {mapHtml && (\r\n-            <WebView\r\n-              ref={(ref) => {\r\n-                if (ref && !mapRef.current) {\r\n-                  mapRef.current = ref;\r\n-                }\r\n-              }}\r\n-              originWhitelist={[\"*\"]}\r\n-              source={{ html: mapHtml }}\r\n-              javaScriptEnabled={true}\r\n-              style={{\r\n-                position: \"absolute\",\r\n-                top: 0,\r\n-                left: 0,\r\n-                right: 0,\r\n-                bottom: 0,\r\n-                zIndex: 0,\r\n-              }}\r\n-              onMessage={(event) => {\r\n-                console.log(\"✅ Received from WebView:\", event.nativeEvent.data);\r\n-                const msg = event.nativeEvent.data;\r\n-                console.log(\"📥 WebView message:\", msg);\r\n-\r\n-                try {\r\n-                  const parsed = JSON.parse(msg);\r\n-                  if (parsed.latitude && parsed.longitude) {\r\n-                    setDestination(parsed);\r\n-                  }\r\n-                } catch (e) {\r\n-                  // Debug string from inside the WebView like \"🧭 DRIVER MARKER: ...\"\r\n-                }\r\n-              }}\r\n-            />\r\n-          )}\r\n-\r\n-          <View style={styles.overlayContainer}>\r\n-            <View style={styles.overlay}>\r\n-              {searching && (\r\n-                <View style={{ backgroundColor: \"#fff3cd\", padding: 10, marginTop: 10, borderRadius: 8 }}>\r\n-                  <Text style={{ fontWeight: \"bold\" }}>🔍 Finding a driver...</Text>\r\n-                  <TouchableOpacity\r\n-                    onPress={() => {\r\n-                      setSearching(false);\r\n-                      setBookingId(null);\r\n-                      if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-                    }}\r\n-                    style={{ backgroundColor: \"#f44336\", padding: 10, marginTop: 10, borderRadius: 5 }}\r\n-                  >\r\n-                    <Text style={{ color: \"white\", textAlign: \"center\" }}>CANCEL RIDE</Text>\r\n-                  </TouchableOpacity>\r\n-                </View>\r\n-              )}\r\n-\r\n-              {matchedDriver && (\r\n-                <View\r\n-                  style={{\r\n-                    position: \"absolute\",\r\n-                    bottom: 10, // just above the bottom nav\r\n-                    left: 0,\r\n-                    right: 0,\r\n-                    marginHorizontal: 20,\r\n-                    backgroundColor: \"#d1fcd3\",\r\n-                    borderRadius: 10,\r\n-                    padding: 10,\r\n-                    elevation: 3,\r\n-                  }}\r\n-                >\r\n-                  {infoBoxMinimized ? (\r\n-                    <TouchableOpacity\r\n-                      style={{\r\n-                        alignItems: \"center\",\r\n-                        padding: 10,\r\n-                      }}\r\n-                      onPress={() => setInfoBoxMinimized(false)}\r\n-                    >\r\n-                      <Text style={{ fontWeight: \"bold\", color: \"#000\" }}>View Driver Info</Text>\r\n-                    </TouchableOpacity>\r\n-                  ) : (\r\n-                    <>\r\n-                      <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n-                        {matchedDriver.selfieImage && (\r\n-                          <Image\r\n-                            source={{ uri: `${API_BASE_URL}/${matchedDriver.selfieImage}` }}\r\n-                            style={{ width: 50, height: 50, borderRadius: 25, marginRight: 10 }}\r\n-                          />\r\n-                        )}\r\n-                        <View style={{ flex: 1 }}>\r\n-                          <Text style={{ fontWeight: \"bold\", color: \"#000\" }}>✅ Driver Found!</Text>\r\n-                          <Text>Name: {matchedDriver.driverName}</Text>\r\n-                          <Text>Franchise #: {matchedDriver.franchiseNumber || \"N/A\"}</Text>\r\n-                          <Text>Experience: {matchedDriver.experienceYears || \"N/A\"} years</Text>\r\n-                        </View>\r\n-                      </View>\r\n-                      <View style={{ flexDirection: \"row\", justifyContent: \"space-between\", marginTop: 10 }}>\r\n-                        <TouchableOpacity\r\n-                          onPress={() => setInfoBoxMinimized(true)}\r\n-                          style={{ backgroundColor: \"#81C3E1\", borderRadius: 5, padding: 5 }}\r\n-                        >\r\n-                          <Text style={{ color: \"white\" }}>Minimize</Text>\r\n-                        </TouchableOpacity>\r\n-                        <TouchableOpacity\r\n-                          onPress={async () => {\r\n-                            try {\r\n-                              await fetch(`${API_BASE_URL}/api/cancel-booking`, {\r\n-                                method: \"POST\",\r\n-                                headers: { \"Content-Type\": \"application/json\" },\r\n-                                body: JSON.stringify({ bookingId }),\r\n-                              });\r\n-                              console.log(\"✅ Ride cancellation sent to backend\");\r\n-                            } catch (err) {\r\n-                              console.error(\"❌ Failed to notify backend of cancellation\", err);\r\n-                            }\r\n-\r\n-                            // Reset all state\r\n-                            setSearching(false);\r\n-                            setBookingId(null);\r\n-                            setMatchedDriver(null);\r\n-                            setDestination(null);\r\n-                            setBookingConfirmed(false);\r\n-\r\n-                            mapRef.current?.postMessage(\r\n-                              JSON.stringify({\r\n-                                type: \"setMarkers\",\r\n-                                destination: null,\r\n-                                driver: null,\r\n-                              })\r\n-                            );\r\n-\r\n-                            if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n-                          }}\r\n-                          style={{ backgroundColor: \"#f44336\", borderRadius: 5, padding: 5 }}\r\n-                        >\r\n-                          <Text style={{ color: \"white\" }}>Cancel Ride</Text>\r\n-                        </TouchableOpacity>\r\n-                      </View>\r\n-                    </>\r\n-                  )}\r\n-                </View>\r\n-              )}\r\n-\r\n-            </View>\r\n-            {showBookingForm && (\r\n-              <View style={styles.card}>\r\n-                <View style={styles.cardHeader} />\r\n-                <View style={styles.inputBox}>\r\n-                  <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-                  <Text style={styles.inputText}>\r\n-                    {destination ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}` : \"Saan ka papunta ngayon?\"}\r\n-                  </Text>\r\n-                  <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n-                </View>\r\n-                <TextInput style={styles.inputBoxSimple} placeholder=\"Name this location (optional: Home, Work, etc.)\" value={destinationLabel} onChangeText={setDestinationLabel} />\r\n-                <TextInput style={styles.inputBoxSimple} placeholder=\"Notes sa driver\" value={notes} onChangeText={setNotes} />\r\n-                <TextInput style={styles.inputBox} placeholder=\"Paano ka magbabayad\" value={paymentMethod} onChangeText={setPaymentMethod} />\r\n-                <View style={styles.totalFareContainer}>\r\n-                  <View style={styles.fareBox}><Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text></View>\r\n-                  <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}><Text style={styles.bookNowText}>BOOK NOW</Text></TouchableOpacity>\r\n-                </View>\r\n-              </View>\r\n-            )}\r\n-\r\n-            {!matchedDriver && !searching && !showBookingForm && (\r\n-              <TouchableOpacity\r\n-                onPress={() => setShowBookingForm(true)}\r\n-                style={{\r\n-                  position: \"absolute\",\r\n-                  bottom: 85,\r\n-                  backgroundColor: \"#81C3E1\",\r\n-                  padding: 10,\r\n-                  borderRadius: 8,\r\n-                }}\r\n-              >\r\n-                <Text style={{ fontWeight: \"bold\", fontSize: 16, color: \"white\" }}>START BOOKING</Text>\r\n-              </TouchableOpacity>\r\n-            )}\r\n-\r\n-\r\n-            <View style={styles.bottomNav}>\r\n-              <TouchableOpacity onPress={() => router.push(\"/homepassenger/phome\")}><Ionicons name=\"home\" size={30} color=\"black\" /><Text>Home</Text></TouchableOpacity>\r\n-              <TouchableOpacity onPress={() => router.push(\"/homepassenger/phistory\")}><Ionicons name=\"document-text-outline\" size={30} color=\"black\" /><Text>History</Text></TouchableOpacity>\r\n-              <TouchableOpacity onPress={() => router.push(\"/homepassenger/pchats\")}><Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" /><Text>Chats</Text></TouchableOpacity>\r\n-              <TouchableOpacity onPress={() => router.push(\"/homepassenger/pprofile\")}><Ionicons name=\"person-outline\" size={30} color=\"black\" /><Text>Profile</Text></TouchableOpacity>\r\n-            </View>\r\n-          </View>\r\n-        </View>\r\n-      </TouchableWithoutFeedback>\r\n-    </KeyboardAvoidingView>\r\n-  );\r\n-}\r\n-\r\n-const styles = StyleSheet.create({\r\n-  container: {paddingTop: 30 ,flex: 1, backgroundColor: \"#fff\" },\r\n-  overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n-  overlay: {width: width, margin: 60},\r\n-  card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n-  cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n-  inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n-  inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n-  inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n-  totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n-  fareBox: { flex: 1, borderRadius: 3, backgroundColor: \"white\", justifyContent: \"center\", paddingHorizontal: 5, marginRight: 5, width: '50%' },\r\n-  totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n-  bookNowButton: { flex: 1, backgroundColor: \"white\", borderRadius: 8, alignItems: \"center\", justifyContent: \"center\", padding: 5, marginLeft: 5, width: '50%' },\r\n-  bookNowText: { fontSize: 16 },\r\n-  bottomNav: { position: \"absolute\", bottom: 0, flexDirection: \"row\", justifyContent: \"space-around\", width: width, height: 70, backgroundColor: \"white\", borderTopLeftRadius: 30, borderTopRightRadius: 30, alignItems: \"center\", borderWidth: 1, borderColor: \"black\" },\r\n-});\r\n"
                },
                {
                    "date": 1748448727807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,21 +12,22 @@\n   Platform,\r\n   TouchableWithoutFeedback,\r\n   Keyboard,\r\n   Image,\r\n-  BackHandler\r\n+  BackHandler,\r\n+  ScrollView\r\n } from \"react-native\";\r\n import { WebView } from \"react-native-webview\";\r\n import type { WebView as WebViewType } from \"react-native-webview\";\r\n import { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\n import { useLocation } from \"../location/GlobalLocation\";\r\n import { router } from 'expo-router';\r\n import AsyncStorage from '@react-native-async-storage/async-storage';\r\n import { OSRM_BASE_URL, API_BASE_URL } from \"../../config\";\r\n+import * as Location from 'expo-location';\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n-\r\n export default function PHome() {\r\n   const { location, loading } = useLocation();\r\n   const [destination, setDestination] = useState<{ latitude: number; longitude: number } | null>(null);\r\n   const [destinationLabel, setDestinationLabel] = useState(\"\");\r\n@@ -41,37 +42,54 @@\n     driverId: string;\r\n     franchiseNumber: string;\r\n     experienceYears: string;\r\n     selfieImage: string;\r\n-    location: { latitude: number; longitude: number }; \r\n+    location: { latitude: number; longitude: number };\r\n   } | null>(null);\r\n   const [bookingConfirmed, setBookingConfirmed] = useState(false);\r\n   const [bookingId, setBookingId] = useState(null);\r\n-  const [showBookingForm, setShowBookingForm] = useState(false); \r\n+  const [showBookingForm, setShowBookingForm] = useState(false);\r\n   const [searching, setSearching] = useState(false);\r\n   const searchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n   const [infoBoxMinimized, setInfoBoxMinimized] = useState(false);\r\n \r\n-  \r\n-  \r\n+  // NEW: For address names\r\n+  const [pickupName, setPickupName] = useState(\"\");\r\n+  const [dropoffName, setDropoffName] = useState(\"\");\r\n \r\n+  // Reverse geocode for pick-up location\r\n   useEffect(() => {\r\n+    if (location) {\r\n+      Location.reverseGeocodeAsync({\r\n+        latitude: location.latitude,\r\n+        longitude: location.longitude,\r\n+      }).then((results) => {\r\n+        if (results && results.length > 0) {\r\n+          const addr = results[0];\r\n+          setPickupName(\r\n+            `${addr.street || \"\"}${addr.street ? \", \" : \"\"}${addr.city || addr.subregion || \"\"}`\r\n+          );\r\n+        } else {\r\n+          setPickupName(\"Current Location\");\r\n+        }\r\n+      }).catch(() => setPickupName(\"Current Location\"));\r\n+    }\r\n+  }, [location]);\r\n+\r\n+  // Handle Android hardware back button (logout prompt)\r\n+  useEffect(() => {\r\n     const backAction = () => {\r\n       Alert.alert(\"Logout Confirmation\", \"Do you want to log out?\", [\r\n+        { text: \"Cancel\", onPress: () => null, style: \"cancel\" },\r\n         {\r\n-          text: \"Cancel\",\r\n-          onPress: () => null,\r\n-          style: \"cancel\"\r\n-        },\r\n-        {\r\n           text: \"Logout\",\r\n           onPress: async () => {\r\n             await AsyncStorage.removeItem(\"passengerId\");\r\n-            router.replace(\"/login_and_reg/plogin\"); \r\n-          }\r\n-        }\r\n+            router.replace(\"/login_and_reg/plogin\");\r\n+          },\r\n+        },\r\n       ]);\r\n-      return true; \r\n+      return true;\r\n     };\r\n \r\n     const backHandler = BackHandler.addEventListener(\r\n       \"hardwareBackPress\",\r\n@@ -79,10 +97,9 @@\n     );\r\n     return () => backHandler.remove();\r\n   }, []);\r\n \r\n-\r\n-\r\n+  // Generate map HTML when location changes\r\n   useEffect(() => {\r\n     if (!location) return;\r\n \r\n     const html = `\r\n@@ -99,9 +116,8 @@\n               overflow: hidden;\r\n               touch-action: auto;\r\n             }\r\n             .leaflet-control-zoom { top: 10px !important; left: 10px !important; }\r\n-\r\n             .driver-label {\r\n               font-weight: bold;\r\n               color: red;\r\n               background: white;\r\n@@ -140,37 +156,26 @@\n               }).addTo(map).bindTooltip(\"You\", { permanent: true, direction: \"top\" });\r\n \r\n               let destMarker = null;\r\n               let driverMarker = null;\r\n-\r\n               let destinationLocked = false;\r\n               map.on('click', function(e) {\r\n                 if (destinationLocked) return;\r\n-\r\n                 const { lat, lng } = e.latlng;\r\n                 if (destMarker) map.removeLayer(destMarker);\r\n                 destMarker = L.marker([lat, lng], {\r\n                   icon: L.icon({\r\n                     iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png',\r\n                     iconSize: [30, 30],\r\n                   })\r\n                 }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n-\r\n                 window.ReactNativeWebView.postMessage(JSON.stringify({ latitude: lat, longitude: lng }));\r\n               });\r\n               document.addEventListener('message', function(event) {\r\n                 const msg = JSON.parse(event.data);\r\n                 window.ReactNativeWebView.postMessage(\"📥 RECEIVED IN MAP: \" + JSON.stringify(msg));\r\n-\r\n                 if (msg.type === 'setMarkers') {\r\n                   destinationLocked = !!msg.driver;\r\n-                  if (msg.driver) {\r\n-                    const { latitude, longitude } = msg.driver;\r\n-                    window.ReactNativeWebView.postMessage(\"✅ DRIVER FOUND AT: \" + latitude + \", \" + longitude);\r\n-                  } else {\r\n-                    window.ReactNativeWebView.postMessage(\"❌ NO DRIVER IN MESSAGE\");\r\n-                  }\r\n-\r\n                   if (destMarker) map.removeLayer(destMarker);\r\n                   if (msg.destination) {\r\n                     destMarker = L.marker([msg.destination.latitude, msg.destination.longitude], {\r\n                       icon: L.icon({\r\n@@ -178,23 +183,19 @@\n                         iconSize: [30, 30],\r\n                       })\r\n                     }).addTo(map).bindTooltip(\"Destination\", { permanent: true, direction: \"top\" });\r\n                   }\r\n-\r\n                   if (driverMarker) map.removeLayer(driverMarker);\r\n                   if (msg.driver) {\r\n                     const { latitude, longitude } = msg.driver;\r\n-                    window.ReactNativeWebView.postMessage(\"🧭 DRIVER MARKER REQUESTED: \" + JSON.stringify(msg.driver));\r\n-\r\n                     L.circle([latitude, longitude], {\r\n                       color: 'red',\r\n                       radius: 10,\r\n                       fillOpacity: 0.9\r\n                     }).addTo(map);\r\n-\r\n                     driverMarker = L.marker([latitude, longitude], {\r\n                       icon: L.icon({\r\n-                        iconUrl: 'https://cdn-icons-png.flaticon.com/512/2972/2972185.png', \r\n+                        iconUrl: 'https://cdn-icons-png.flaticon.com/512/2972/2972185.png',\r\n                         iconSize: [40, 40],\r\n                         iconAnchor: [20, 40],\r\n                       })\r\n                     }).addTo(map).bindTooltip(\"🚕 Driver\", { permanent: true, direction: \"top\" })\r\n@@ -203,34 +204,53 @@\n                 }\r\n               });\r\n             }\r\n           </script>\r\n-\r\n         </body>\r\n       </html>\r\n     `;\r\n-\r\n     setMapHtml(html);\r\n   }, [location]);\r\n-    \r\n \r\n+  // Reverse geocode for drop-off location\r\n+  const handleMapMessage = async (event: any) => {\r\n+    try {\r\n+      const parsed = JSON.parse(event.nativeEvent.data);\r\n+      if (parsed.latitude && parsed.longitude) {\r\n+        setDestination(parsed);\r\n+        // Get address for destination\r\n+        try {\r\n+          const results = await Location.reverseGeocodeAsync({\r\n+            latitude: parsed.latitude,\r\n+            longitude: parsed.longitude,\r\n+          });\r\n+          if (results && results.length > 0) {\r\n+            const addr = results[0];\r\n+            setDropoffName(\r\n+              `${addr.street || \"\"}${addr.street ? \", \" : \"\"}${addr.city || addr.subregion || \"\"}`\r\n+            );\r\n+          } else {\r\n+            setDropoffName(\"Selected Location\");\r\n+          }\r\n+        } catch {\r\n+          setDropoffName(\"Selected Location\");\r\n+        }\r\n+      }\r\n+    } catch (e) {\r\n+      // handle parse error\r\n+    }\r\n+  };\r\n+\r\n+  // Set destination/driver markers after booking confirmed, etc\r\n   useEffect(() => {\r\n     if (!mapRef.current || bookingConfirmed) return;\r\n-\r\n     const driverCoords = matchedDriver?.location\r\n       ? {\r\n           latitude: matchedDriver.location.latitude,\r\n           longitude: matchedDriver.location.longitude,\r\n         }\r\n       : null;\r\n-\r\n     if (driverCoords && destination) {\r\n-      console.log(\"📤 Sending to WebView:\", {\r\n-        type: \"setMarkers\",\r\n-        destination,\r\n-        driver: driverCoords,\r\n-      });\r\n-\r\n       mapRef.current.postMessage(\r\n         JSON.stringify({\r\n           type: \"setMarkers\",\r\n           destination,\r\n@@ -239,16 +259,15 @@\n       );\r\n     }\r\n   }, [destination, matchedDriver, bookingConfirmed]);\r\n \r\n-\r\n+  // BOOK NOW logic unchanged\r\n   const handleBookNow = async () => {\r\n     if (!location || !destination) {\r\n       Alert.alert(\"Missing location info\");\r\n       return;\r\n     }\r\n     const passengerId = await AsyncStorage.getItem(\"passengerId\");\r\n-\r\n     const bookingData = {\r\n       pickupLat: location.latitude,\r\n       pickupLng: location.longitude,\r\n       destinationLat: destination.latitude,\r\n@@ -257,38 +276,30 @@\n       paymentMethod,\r\n       notes,\r\n       passengerId\r\n     };\r\n-\r\n     try {\r\n-      setShowBookingForm(false); // hide form\r\n-      setSearching(true);        // show searching state\r\n-\r\n+      setShowBookingForm(false);\r\n+      setSearching(true);\r\n       const response = await fetch(`${API_BASE_URL}/api/book`, {\r\n         method: \"POST\",\r\n         headers: { \"Content-Type\": \"application/json\" },\r\n         body: JSON.stringify(bookingData),\r\n       });\r\n-\r\n       const result = await response.json();\r\n       if (!response.ok) throw new Error(result.message || \"Something went wrong\");\r\n-\r\n       setBookingId(result.booking.id);\r\n-\r\n       // Start polling for driver for up to 10 minutes\r\n       const maxWaitTime = 10 * 60 * 1000; // 10 minutes\r\n       const startTime = Date.now();\r\n-\r\n       const poll = async () => {\r\n         try {\r\n           const [driverRes, statusRes] = await Promise.all([\r\n             fetch(`${API_BASE_URL}/api/driver/${result.booking.driverId}`),\r\n             fetch(`${API_BASE_URL}/api/driver-status/${result.booking.driverId}`)\r\n           ]);\r\n-\r\n           const driverData = await driverRes.json();\r\n           const statusData = await statusRes.json();\r\n-\r\n           if (driverData?.driver) {\r\n             setMatchedDriver({\r\n               driverName: driverData.driver.driverName,\r\n               driverId: driverData.driver._id,\r\n@@ -296,27 +307,22 @@\n               experienceYears: driverData.driver.experienceYears || \"N/A\",\r\n               selfieImage: driverData.driver.selfieImage || \"N/A\",\r\n               location: statusData.location || null, // Live GPS\r\n             });\r\n-\r\n             setSearching(false);\r\n             return;\r\n           }\r\n         } catch (err) {\r\n-          console.log(\"⏳ Still waiting for driver...\");\r\n+          // Still waiting\r\n         }\r\n-\r\n         if (Date.now() - startTime < maxWaitTime) {\r\n-          searchTimeoutRef.current = setTimeout(poll, 5000); // try again in 5 sec\r\n+          searchTimeoutRef.current = setTimeout(poll, 5000);\r\n         } else {\r\n-          setSearching(false); // stop searching silently\r\n-          console.log(\"❌ No driver found within 10 minutes.\");\r\n+          setSearching(false);\r\n         }\r\n       };\r\n-\r\n-      poll(); // start polling\r\n+      poll();\r\n     } catch (error) {\r\n-      console.error(\"❌ Booking error:\", error);\r\n       Alert.alert(\"Error\", \"Failed to send booking. Please try again.\");\r\n       setSearching(false);\r\n     }\r\n   };\r\n@@ -339,22 +345,18 @@\n         const allBookings = await res.json();\r\n         const myBooking = allBookings.find((b: any) => b && b.id === bookingId);\r\n         if (myBooking && myBooking.status === \"accepted\" && !bookingConfirmed) {\r\n           setBookingConfirmed(true);\r\n-          console.log(\"✅ Driver accepted the booking!\");\r\n           Alert.alert(\"Driver Accepted!\", \"The driver has accepted your ride and is on the way!\");\r\n         }\r\n       } catch (err) {\r\n-        console.error(\"❌ Poll error:\", err);\r\n+        // error polling\r\n       }\r\n     };\r\n     interval = setInterval(pollForDriverMatch, 4000);\r\n     return () => clearInterval(interval);\r\n   }, [bookingId, bookingConfirmed]);\r\n \r\n-\r\n-\r\n-\r\n   if (loading || !location) return null;\r\n \r\n   return (\r\n     <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === \"ios\" ? \"padding\" : undefined} keyboardVerticalOffset={keyboardOffset}>\r\n@@ -378,22 +380,9 @@\n                 right: 0,\r\n                 bottom: 0,\r\n                 zIndex: 0,\r\n               }}\r\n-              onMessage={(event) => {\r\n-                console.log(\"✅ Received from WebView:\", event.nativeEvent.data);\r\n-                const msg = event.nativeEvent.data;\r\n-                console.log(\"📥 WebView message:\", msg);\r\n-\r\n-                try {\r\n-                  const parsed = JSON.parse(msg);\r\n-                  if (parsed.latitude && parsed.longitude) {\r\n-                    setDestination(parsed);\r\n-                  }\r\n-                } catch (e) {\r\n-                  // Debug string from inside the WebView like \"🧭 DRIVER MARKER: ...\"\r\n-                }\r\n-              }}\r\n+              onMessage={handleMapMessage}\r\n             />\r\n           )}\r\n \r\n           <View style={styles.overlayContainer}>\r\n@@ -417,9 +406,9 @@\n               {matchedDriver && (\r\n                 <View\r\n                   style={{\r\n                     position: \"absolute\",\r\n-                    bottom: 10, // just above the bottom nav\r\n+                    bottom: 10,\r\n                     left: 0,\r\n                     right: 0,\r\n                     marginHorizontal: 20,\r\n                     backgroundColor: \"#d1fcd3\",\r\n@@ -468,28 +457,21 @@\n                                 method: \"POST\",\r\n                                 headers: { \"Content-Type\": \"application/json\" },\r\n                                 body: JSON.stringify({ bookingId }),\r\n                               });\r\n-                              console.log(\"✅ Ride cancellation sent to backend\");\r\n-                            } catch (err) {\r\n-                              console.error(\"❌ Failed to notify backend of cancellation\", err);\r\n-                            }\r\n-\r\n-                            // Reset all state\r\n+                            } catch (err) { }\r\n                             setSearching(false);\r\n                             setBookingId(null);\r\n                             setMatchedDriver(null);\r\n                             setDestination(null);\r\n                             setBookingConfirmed(false);\r\n-\r\n                             mapRef.current?.postMessage(\r\n                               JSON.stringify({\r\n                                 type: \"setMarkers\",\r\n                                 destination: null,\r\n                                 driver: null,\r\n                               })\r\n                             );\r\n-\r\n                             if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);\r\n                           }}\r\n                           style={{ backgroundColor: \"#f44336\", borderRadius: 5, padding: 5 }}\r\n                         >\r\n@@ -499,27 +481,51 @@\n                     </>\r\n                   )}\r\n                 </View>\r\n               )}\r\n-\r\n             </View>\r\n+            {/* -- NEW BOOKING PANEL LAYOUT -- */}\r\n             {showBookingForm && (\r\n-              <View style={styles.card}>\r\n-                <View style={styles.cardHeader} />\r\n-                <View style={styles.inputBox}>\r\n-                  <Ionicons name=\"location-outline\" size={20} color=\"#616161\" />\r\n-                  <Text style={styles.inputText}>\r\n-                    {destination ? `Going to: ${destination.latitude.toFixed(4)}, ${destination.longitude.toFixed(4)}` : \"Saan ka papunta ngayon?\"}\r\n-                  </Text>\r\n-                  <MaterialIcons name=\"keyboard-arrow-right\" size={24} color=\"#616161\" />\r\n+              <View style={styles.panel}>\r\n+                <Text style={styles.panelTitle}>Booking Details</Text>\r\n+                <ScrollView style={styles.inputsContainer}>\r\n+                  <TextInput\r\n+                    style={styles.input}\r\n+                    placeholder=\"Saan ang pick-up?\"\r\n+                    value={pickupName}\r\n+                    editable={true}\r\n+                  />\r\n+                  <TextInput\r\n+                    style={styles.input}\r\n+                    placeholder=\"Saan ang drop-off?\"\r\n+                    value={dropoffName}\r\n+                    editable={true}\r\n+                  />\r\n+                  <TextInput\r\n+                    style={styles.input}\r\n+                    placeholder=\"Name this location (optional: Home, Work, etc.)\"\r\n+                    value={destinationLabel}\r\n+                    onChangeText={setDestinationLabel}\r\n+                  />\r\n+                  <TextInput\r\n+                    style={styles.input}\r\n+                    placeholder=\"Notes sa driver\"\r\n+                    value={notes}\r\n+                    onChangeText={setNotes}\r\n+                  />\r\n+                  <TextInput\r\n+                    style={styles.input}\r\n+                    placeholder=\"Paano ka magbabayad?\"\r\n+                    value={paymentMethod}\r\n+                    onChangeText={setPaymentMethod}\r\n+                  />\r\n+                </ScrollView>\r\n+                <View style={styles.fareContainer}>\r\n+                  <Text style={styles.totalFare}>Total Fare: ₱{fare}</Text>\r\n+                  <TouchableOpacity style={styles.bookButton} onPress={handleBookNow}>\r\n+                    <Text style={styles.bookButtonText}>BOOK NOW</Text>\r\n+                  </TouchableOpacity>\r\n                 </View>\r\n-                <TextInput style={styles.inputBoxSimple} placeholder=\"Name this location (optional: Home, Work, etc.)\" value={destinationLabel} onChangeText={setDestinationLabel} />\r\n-                <TextInput style={styles.inputBoxSimple} placeholder=\"Notes sa driver\" value={notes} onChangeText={setNotes} />\r\n-                <TextInput style={styles.inputBox} placeholder=\"Paano ka magbabayad\" value={paymentMethod} onChangeText={setPaymentMethod} />\r\n-                <View style={styles.totalFareContainer}>\r\n-                  <View style={styles.fareBox}><Text style={styles.totalFareText}>Total Fare: ₱{fare}</Text></View>\r\n-                  <TouchableOpacity style={styles.bookNowButton} onPress={handleBookNow}><Text style={styles.bookNowText}>BOOK NOW</Text></TouchableOpacity>\r\n-                </View>\r\n               </View>\r\n             )}\r\n \r\n             {!matchedDriver && !searching && !showBookingForm && (\r\n@@ -536,9 +542,8 @@\n                 <Text style={{ fontWeight: \"bold\", fontSize: 16, color: \"white\" }}>START BOOKING</Text>\r\n               </TouchableOpacity>\r\n             )}\r\n \r\n-\r\n             <View style={styles.bottomNav}>\r\n               <TouchableOpacity onPress={() => router.push(\"/homepassenger/phome\")}><Ionicons name=\"home\" size={30} color=\"black\" /><Text>Home</Text></TouchableOpacity>\r\n               <TouchableOpacity onPress={() => router.push(\"/homepassenger/phistory\")}><Ionicons name=\"document-text-outline\" size={30} color=\"black\" /><Text>History</Text></TouchableOpacity>\r\n               <TouchableOpacity onPress={() => router.push(\"/homepassenger/pchats\")}><Ionicons name=\"chatbubbles-outline\" size={30} color=\"black\" /><Text>Chats</Text></TouchableOpacity>\r\n@@ -551,19 +556,34 @@\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n-  container: {paddingTop: 30 ,flex: 1, backgroundColor: \"#fff\" },\r\n+  container: { paddingTop: 30, flex: 1, backgroundColor: \"#fff\" },\r\n   overlayContainer: { paddingBottom: Platform.OS === \"android\" ? 20 : 0, position: \"absolute\", bottom: 0, width: \"100%\", alignItems: \"center\" },\r\n-  overlay: {width: width, margin: 60},\r\n-  card: { position: \"absolute\", bottom: 75, backgroundColor: \"#81C3E1\", width: width * 0.95, alignSelf: \"center\", borderRadius: 10, padding: 10 },\r\n-  cardHeader: { width: 150, height: 4, backgroundColor: \"black\", alignSelf: \"center\", borderRadius: 5, marginBottom: 10 },\r\n-  inputBox: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n-  inputBoxSimple: { backgroundColor: \"white\", borderRadius: 8, flexDirection: \"row\", alignItems: \"center\", paddingHorizontal: 10, height: 40, marginBottom: 5 },\r\n-  inputText: { flex: 1, marginLeft: 10, fontSize: 15, color: \"#616161\" },\r\n-  totalFareContainer: { flexDirection: \"row\", marginTop: 10 },\r\n-  fareBox: { flex: 1, borderRadius: 3, backgroundColor: \"white\", justifyContent: \"center\", paddingHorizontal: 5, marginRight: 5, width: '50%' },\r\n-  totalFareText: { fontSize: 14, fontWeight: \"bold\" },\r\n-  bookNowButton: { flex: 1, backgroundColor: \"white\", borderRadius: 8, alignItems: \"center\", justifyContent: \"center\", padding: 5, marginLeft: 5, width: '50%' },\r\n-  bookNowText: { fontSize: 16 },\r\n+  overlay: { width: width, margin: 60 },\r\n+  panel: {\r\n+    position: 'absolute',\r\n+    bottom: 85,\r\n+    width: '100%',\r\n+    backgroundColor: '#E0F0FF',\r\n+    borderTopLeftRadius: 20,\r\n+    borderTopRightRadius: 20,\r\n+    padding: 15,\r\n+    zIndex: 10,\r\n+  },\r\n+  panelTitle: { fontWeight: 'bold', marginBottom: 5 },\r\n+  radioContainer: { flexDirection: 'row', justifyContent: 'space-between', marginBottom: 5 },\r\n+  radioButton: { padding: 10, backgroundColor: '#FFF', borderRadius: 10, marginRight: 10 },\r\n+  inputsContainer: { marginTop: 10, maxHeight: 180 },\r\n+  input: { backgroundColor: '#FFF', borderRadius: 10, padding: 10, marginVertical: 5 },\r\n+  fareContainer: {\r\n+    flexDirection: 'row',\r\n+    justifyContent: 'space-between',\r\n+    alignItems: 'center',\r\n+    marginTop: 10,\r\n+  },\r\n+  totalFare: { fontWeight: 'bold' },\r\n+  bookButton: { backgroundColor: '#000', borderRadius: 10, padding: 10 },\r\n+  bookButtonText: { color: '#FFF', fontWeight: 'bold' },\r\n   bottomNav: { position: \"absolute\", bottom: 0, flexDirection: \"row\", justifyContent: \"space-around\", width: width, height: 70, backgroundColor: \"white\", borderTopLeftRadius: 30, borderTopRightRadius: 30, alignItems: \"center\", borderWidth: 1, borderColor: \"black\" },\r\n });\r\n+\r\n"
                }
            ],
            "date": 1745770351244,
            "name": "Commit-0",
            "content": "import React from \"react\";\r\nimport { View, Text, TouchableOpacity, StyleSheet, StatusBar, Dimensions } from \"react-native\";\r\nimport { useRouter } from \"expo-router\";\r\n\r\nconst { width } = Dimensions.get(\"window\");\r\n\r\nexport default function PassengerHome() {\r\n  const router = useRouter();\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <StatusBar barStyle=\"dark-content\" translucent backgroundColor=\"transparent\" />\r\n      \r\n      <View style={styles.inner}>\r\n        <Text style={styles.title}>Welcome, Passenger!</Text>\r\n        <Text style={styles.subtitle}>You are now logged in.</Text>\r\n\r\n        <TouchableOpacity\r\n          style={styles.button}\r\n        //   onPress={() => router.push(\"/somewhere\")} // Replace with your real pages later\r\n        >\r\n          <Text style={styles.buttonText}>Go to Available Rides</Text>\r\n        </TouchableOpacity>\r\n\r\n        <TouchableOpacity\r\n          style={[styles.button, { backgroundColor: \"#DD1F1F\" }]}\r\n          onPress={() => router.push(\"/login_and_reg/plogin\")} // Simulate logout (go back to login)\r\n        >\r\n          <Text style={styles.buttonText}>Log Out</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: { flex: 1, backgroundColor: \"#fff\", alignItems: \"center\", justifyContent: \"center\" },\r\n  inner: { width: width * 0.85, alignItems: \"center\" },\r\n  title: { fontSize: 26, fontWeight: \"bold\", color: \"#414141\", marginBottom: 10 },\r\n  subtitle: { fontSize: 16, color: \"#666\", marginBottom: 30 },\r\n  button: {\r\n    width: \"100%\",\r\n    backgroundColor: \"#5089A3\",\r\n    borderRadius: 8,\r\n    paddingVertical: 14,\r\n    alignItems: \"center\",\r\n    marginBottom: 15,\r\n  },\r\n  buttonText: { color: \"#fff\", fontSize: 16, fontWeight: \"bold\" },\r\n});\r\n"
        }
    ]
}